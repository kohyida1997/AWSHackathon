{
  "version": "1.0",
  "resource": "/generate-insights-python",
  "path": "/default/generate-insights-python",
  "httpMethod": "POST",
  "headers": {
    "Content-Length": "427003",
    "Content-Type": "multipart/form-data; boundary=--------------------------104617940851235207681121",
    "Host": "1bo0ta8uk3.execute-api.ap-southeast-1.amazonaws.com",
    "Postman-Token": "404c12f1-b586-4703-8620-975fe57a8ed0",
    "User-Agent": "PostmanRuntime/7.26.8",
    "X-Amzn-Trace-Id": "Root=1-60f845ff-4e6990df56672b0419a6b0be",
    "X-Forwarded-For": "165.173.7.75",
    "X-Forwarded-Port": "443",
    "X-Forwarded-Proto": "https",
    "accept": "*/*",
    "accept-encoding": "gzip, deflate, br"
  },
  "multiValueHeaders": {
    "Content-Length": [
      "427003"
    ],
    "Content-Type": [
      "multipart/form-data; boundary=--------------------------104617940851235207681121"
    ],
    "Host": [
      "1bo0ta8uk3.execute-api.ap-southeast-1.amazonaws.com"
    ],
    "Postman-Token": [
      "404c12f1-b586-4703-8620-975fe57a8ed0"
    ],
    "User-Agent": [
      "PostmanRuntime/7.26.8"
    ],
    "X-Amzn-Trace-Id": [
      "Root=1-60f845ff-4e6990df56672b0419a6b0be"
    ],
    "X-Forwarded-For": [
      "165.173.7.75"
    ],
    "X-Forwarded-Port": [
      "443"
    ],
    "X-Forwarded-Proto": [
      "https"
    ],
    "accept": [
      "*/*"
    ],
    "accept-encoding": [
      "gzip, deflate, br"
    ]
  },
  "queryStringParameters": null,
  "multiValueQueryStringParameters": null,
  "requestContext": {
    "accountId": "509677836255",
    "apiId": "1bo0ta8uk3",
    "domainName": "1bo0ta8uk3.execute-api.ap-southeast-1.amazonaws.com",
    "domainPrefix": "1bo0ta8uk3",
    "extendedRequestId": "C0_f_jjAyQ0EMiw=",
    "httpMethod": "POST",
    "identity": {
      "accessKey": null,
      "accountId": null,
      "caller": null,
      "cognitoAmr": null,
      "cognitoAuthenticationProvider": null,
      "cognitoAuthenticationType": null,
      "cognitoIdentityId": null,
      "cognitoIdentityPoolId": null,
      "principalOrgId": null,
      "sourceIp": "165.173.7.75",
      "user": null,
      "userAgent": "PostmanRuntime/7.26.8",
      "userArn": null
    },
    "path": "/default/generate-insights-python",
    "protocol": "HTTP/1.1",
    "requestId": "C0_f_jjAyQ0EMiw=",
    "requestTime": "21/Jul/2021:16:06:23 +0000",
    "requestTimeEpoch": 1626883583759,
    "resourceId": "ANY /generate-insights-python",
    "resourcePath": "/generate-insights-python",
    "stage": "default"
  },
  "pathParameters": null,
  "stageVariables": null,
  "body": "----------------------------104617940851235207681121
Content-Disposition: form-data; name="file"; filename="Questions-short.csv"
Content-Type: text/csv

﻿id,OwnerUserId,timestamp,Score,Title,Body,text
77434,14008,2008-09-16T21:40:29Z,171,How to access the last value in a vector?,"<p>Suppose I have a vector that is nested in a dataframe one or two levels.  Is there a quick and dirty way to access the last value, without using the <code>length()</code> function?  Something ala PERL's <code>$#</code> special var?</p>

<p>So I would like something like:</p>

<pre><code>dat$vec1$vec2[$#]
</code></pre>

<p>instead of</p>

<pre><code>dat$vec1$vec2[length(dat$vec1$vec2)]
</code></pre>
","How to access the last value in a vector? <p>Suppose I have a vector that is nested in a dataframe one or two levels.  Is there a quick and dirty way to access the last value, without using the <code>length()</code> function?  Something ala PERL's <code>$#</code> special var?</p>

<p>So I would like something like:</p>

<pre><code>dat$vec1$vec2[$#]
</code></pre>

<p>instead of</p>

<pre><code>dat$vec1$vec2[length(dat$vec1$vec2)]
</code></pre>
"
79709,NA,2008-09-17T03:39:16Z,3,Worse sin: side effects or passing massive objects?,"<p>I have a function inside a loop inside a function. The inner function acquires and stores a large vector of data in memory (as a global variable... I'm using ""R"" which is like ""S-Plus""). The loop loops through a long list of data to be acquired. The outer function starts the process and passes in the list of datasets to be acquired.</p>

<pre><code>for (dataset in list_of_datasets) {
  for (datachunk in dataset) {
    &lt;process datachunk&gt;
    &lt;store result? as vector? where?&gt;
  }
}
</code></pre>

<p>I programmed the inner function to store each dataset before moving to the next, so all the work of the outer function occurs as side effects on global variables... a big no-no. Is this better or worse than collecting and returning a giant, memory-hogging vector of vectors? Is there a superior third approach?</p>

<p>Would the answer change if I were storing the data vectors in a database rather than in memory? Ideally, I'd like to be able to terminate the function (or have it fail due to network timeouts) without losing all the information processed prior to termination.</p>
","Worse sin: side effects or passing massive objects? <p>I have a function inside a loop inside a function. The inner function acquires and stores a large vector of data in memory (as a global variable... I'm using ""R"" which is like ""S-Plus""). The loop loops through a long list of data to be acquired. The outer function starts the process and passes in the list of datasets to be acquired.</p>

<pre><code>for (dataset in list_of_datasets) {
  for (datachunk in dataset) {
    &lt;process datachunk&gt;
    &lt;store result? as vector? where?&gt;
  }
}
</code></pre>

<p>I programmed the inner function to store each dataset before moving to the next, so all the work of the outer function occurs as side effects on global variables... a big no-no. Is this better or worse than collecting and returning a giant, memory-hogging vector of vectors? Is there a superior third approach?</p>

<p>Would the answer change if I were storing the data vectors in a database rather than in memory? Ideally, I'd like to be able to terminate the function (or have it fail due to network timeouts) without losing all the information processed prior to termination.</p>
"
95007,15842,2008-09-18T17:59:19Z,56,Explain the quantile() function in R,"<p>I've been mystified by the R quantile function all day.  </p>

<p>I have an intuitive notion of how quantiles work, and an M.S. in stats, but boy oh boy, the documentation for it is confusing to me.  </p>

<p>From the docs:</p>

<blockquote>
  <p>Q[i](p) = (1 - gamma) x[j] + gamma
  x[j+1],</p>
</blockquote>

<p>I'm with it so far.  For a type <em>i</em> quantile, it's an interpolation between x[j] and x [j+1], based on some mysterious constant <em>gamma</em></p>

<blockquote>
  <p>where 1 &lt;= i &lt;= 9, (j-m)/n &lt;= p &lt;
  (j-m+1)/ n, x[j] is the jth order
  statistic, n is the sample size, and m
  is a constant determined by the sample
  quantile type. Here gamma depends on
  the fractional part of g = np+m-j. </p>
</blockquote>

<p>So, how calculate j?   m?</p>

<blockquote>
  <p>For the continuous sample quantile
  types (4 through 9), the sample
  quantiles can be obtained by linear
  interpolation between the kth order
  statistic and p(k): </p>
  
  <p>p(k) = (k - alpha) / (n - alpha - beta
  + 1),
  where Î± and Î² are constants determined
  by the type. Further, m = alpha + p(1
  - alpha - beta), and gamma = g.</p>
</blockquote>

<p>Now I'm really lost.  p, which was a constant before, is now apparently a function.  </p>

<p>So for Type 7 quantiles, the default...</p>

<blockquote>
  <p>Type 7</p>
  
  <p>p(k) = (k - 1) / (n - 1). In this case, p(k) = mode[F(x[k])]. This is used by S. </p>
</blockquote>

<p>Anyone want to help me out?  In particular I'm confused by the notation of p being a function and a constant, what the heck <em>m</em> is, and now to calculate j for some particular <em>p</em>.  </p>

<p>I hope that based on the answers here, we can submit some revised documentation that better explains what is going on here.  </p>

<p><a href=""https://svn.r-project.org/R/trunk/src/library/stats/R/quantile.R"" rel=""noreferrer"">quantile.R source code</a>
or type:  quantile.default</p>
","Explain the quantile() function in R <p>I've been mystified by the R quantile function all day.  </p>

<p>I have an intuitive notion of how quantiles work, and an M.S. in stats, but boy oh boy, the documentation for it is confusing to me.  </p>

<p>From the docs:</p>

<blockquote>
  <p>Q[i](p) = (1 - gamma) x[j] + gamma
  x[j+1],</p>
</blockquote>

<p>I'm with it so far.  For a type <em>i</em> quantile, it's an interpolation between x[j] and x [j+1], based on some mysterious constant <em>gamma</em></p>

<blockquote>
  <p>where 1 &lt;= i &lt;= 9, (j-m)/n &lt;= p &lt;
  (j-m+1)/ n, x[j] is the jth order
  statistic, n is the sample size, and m
  is a constant determined by the sample
  quantile type. Here gamma depends on
  the fractional part of g = np+m-j. </p>
</blockquote>

<p>So, how calculate j?   m?</p>

<blockquote>
  <p>For the continuous sample quantile
  types (4 through 9), the sample
  quantiles can be obtained by linear
  interpolation between the kth order
  statistic and p(k): </p>
  
  <p>p(k) = (k - alpha) / (n - alpha - beta
  + 1),
  where Î± and Î² are constants determined
  by the type. Further, m = alpha + p(1
  - alpha - beta), and gamma = g.</p>
</blockquote>

<p>Now I'm really lost.  p, which was a constant before, is now apparently a function.  </p>

<p>So for Type 7 quantiles, the default...</p>

<blockquote>
  <p>Type 7</p>
  
  <p>p(k) = (k - 1) / (n - 1). In this case, p(k) = mode[F(x[k])]. This is used by S. </p>
</blockquote>

<p>Anyone want to help me out?  In particular I'm confused by the notation of p being a function and a constant, what the heck <em>m</em> is, and now to calculate j for some particular <em>p</em>.  </p>

<p>I hope that based on the answers here, we can submit some revised documentation that better explains what is going on here.  </p>

<p><a href=""https://svn.r-project.org/R/trunk/src/library/stats/R/quantile.R"" rel=""noreferrer"">quantile.R source code</a>
or type:  quantile.default</p>
"
103312,NA,2008-09-19T16:09:26Z,4,How to test for the EOF flag in R?,"<p>How can I test for the <code>EOF</code> flag in R? </p>

<p>For example:</p>

<pre><code>f &lt;- file(fname, ""rb"")
while (???) {
    a &lt;- readBin(f, ""int"", n=1)
}
</code></pre>
","How to test for the EOF flag in R? <p>How can I test for the <code>EOF</code> flag in R? </p>

<p>For example:</p>

<pre><code>f &lt;- file(fname, ""rb"")
while (???) {
    a &lt;- readBin(f, ""int"", n=1)
}
</code></pre>
"
255697,1941213,2008-11-01T15:48:30Z,4,Is there an R package for learning a Dirichlet prior from counts data,"<p>I'm looking for a an <code>R</code> package which can be used to train a Dirichlet prior from counts data.  I'm asking for a colleague who's using <code>R</code>, and don't use it myself, so I'm not too sure how to look for packages.  It's a bit hard to search for, because ""R"" is such a nonspecific search string.  There doesn't seem to be anything on <a href=""http://cran.r-project.org/web/packages/index.html"" rel=""nofollow noreferrer"">CRAN</a>, but are there any other places to look?</p>
","Is there an R package for learning a Dirichlet prior from counts data <p>I'm looking for a an <code>R</code> package which can be used to train a Dirichlet prior from counts data.  I'm asking for a colleague who's using <code>R</code>, and don't use it myself, so I'm not too sure how to look for packages.  It's a bit hard to search for, because ""R"" is such a nonspecific search string.  There doesn't seem to be anything on <a href=""http://cran.r-project.org/web/packages/index.html"" rel=""nofollow noreferrer"">CRAN</a>, but are there any other places to look?</p>
"
359438,2173,2008-12-11T14:02:06Z,4,Optimization packages for R,"<p>Does anyone know of any optimization packages out there for R (similar to NUOPT for S+)?</p>
","Optimization packages for R <p>Does anyone know of any optimization packages out there for R (similar to NUOPT for S+)?</p>
"
439526,37751,2009-01-13T15:58:48Z,23,Thinking in Vectors with R,"<p>I know that R works most efficiently with vectors and looping should be avoided. I am having a hard time teaching myself to actually write code this way. I would like some ideas on how to 'vectorize' my code. Here's an example of creating 10 years of sample data for 10,000 non unique combinations of state (<code>st</code>), plan1 (<code>p1</code>) and plan2 (<code>p2</code>):</p>

<pre><code>st&lt;-NULL
p1&lt;-NULL
p2&lt;-NULL
year&lt;-NULL
i&lt;-0
starttime &lt;- Sys.time()

while (i&lt;10000) {
    for (years in seq(1991,2000)) {
        st&lt;-c(st,sample(c(12,17,24),1,prob=c(20,30,50)))
        p1&lt;-c(p1,sample(c(12,17,24),1,prob=c(20,30,50)))
        p2&lt;-c(p2,sample(c(12,17,24),1,prob=c(20,30,50)))    
        year &lt;-c(year,years)
    }
        i&lt;-i+1
}
Sys.time() - starttime
</code></pre>

<p>This takes about 8 minutes to run on my laptop. I end up with 4 vectors, each with 100,000 values, as expected. How can I do this faster using vector functions?</p>

<p>As a side note, if I limit the above code to 1000 loops on i it only takes 2 seconds, but 10,000 takes 8 minutes. Any idea why?</p>
","Thinking in Vectors with R <p>I know that R works most efficiently with vectors and looping should be avoided. I am having a hard time teaching myself to actually write code this way. I would like some ideas on how to 'vectorize' my code. Here's an example of creating 10 years of sample data for 10,000 non unique combinations of state (<code>st</code>), plan1 (<code>p1</code>) and plan2 (<code>p2</code>):</p>

<pre><code>st&lt;-NULL
p1&lt;-NULL
p2&lt;-NULL
year&lt;-NULL
i&lt;-0
starttime &lt;- Sys.time()

while (i&lt;10000) {
    for (years in seq(1991,2000)) {
        st&lt;-c(st,sample(c(12,17,24),1,prob=c(20,30,50)))
        p1&lt;-c(p1,sample(c(12,17,24),1,prob=c(20,30,50)))
        p2&lt;-c(p2,sample(c(12,17,24),1,prob=c(20,30,50)))    
        year &lt;-c(year,years)
    }
        i&lt;-i+1
}
Sys.time() - starttime
</code></pre>

<p>This takes about 8 minutes to run on my laptop. I end up with 4 vectors, each with 100,000 values, as expected. How can I do this faster using vector functions?</p>

<p>As a side note, if I limit the above code to 1000 loops on i it only takes 2 seconds, but 10,000 takes 8 minutes. Any idea why?</p>
"
445059,37751,2009-01-14T23:09:02Z,12,Vectorize my thinking: Vector Operations in R,"<p>So earlier I answered my own question on thinking in vectors in R. But now I have another problem which I can't 'vectorize.' I know vectors are faster and loops slower, but I can't figure out how to do this in a vector method:</p>

<p>I have a data frame (which for sentimental reasons I like to call my.data) which I want to do a full marginal analysis on. I need to remove certain elements one at a time and 'value' the data frame then I need to do the iterating again by removing only the next element. Then do again... and again... The idea is to do a full marginal analysis on a subset of my data. Anyhow, I can't conceive of how to do this in a vector efficient way. </p>

<p>I've shortened the looping part of the code down and it looks something like this:</p>

<pre><code>for (j in my.data$item[my.data$fixed==0]) { # &lt;-- selects the items I want to loop 
                                            #     through
    my.data.it &lt;- my.data[my.data$item!= j,] # &lt;-- this kicks item j out of the list
    sum.data &lt;-aggregate(my.data.it, by=list(year), FUN=sum, na.rm=TRUE) #&lt;-- do an
                                                                         # aggregation

    do(a.little.dance) &amp;&amp; make(a.little.love) -&gt; get.down(tonight) # &lt;-- a little
                                                                   #  song and dance

    delta &lt;- (get.love)                                         # &lt;-- get some love
    delta.list&lt;-append(delta.list, delta, after=length(delta.list)) #&lt;-- put my love
                                                                    #    in a vector 
}
</code></pre>

<p>So obviously I hacked out a bunch of stuff in the middle, just to make it less clumsy. The goal would be to remove the j loop using something more vector efficient. Any ideas?</p>
","Vectorize my thinking: Vector Operations in R <p>So earlier I answered my own question on thinking in vectors in R. But now I have another problem which I can't 'vectorize.' I know vectors are faster and loops slower, but I can't figure out how to do this in a vector method:</p>

<p>I have a data frame (which for sentimental reasons I like to call my.data) which I want to do a full marginal analysis on. I need to remove certain elements one at a time and 'value' the data frame then I need to do the iterating again by removing only the next element. Then do again... and again... The idea is to do a full marginal analysis on a subset of my data. Anyhow, I can't conceive of how to do this in a vector efficient way. </p>

<p>I've shortened the looping part of the code down and it looks something like this:</p>

<pre><code>for (j in my.data$item[my.data$fixed==0]) { # &lt;-- selects the items I want to loop 
                                            #     through
    my.data.it &lt;- my.data[my.data$item!= j,] # &lt;-- this kicks item j out of the list
    sum.data &lt;-aggregate(my.data.it, by=list(year), FUN=sum, na.rm=TRUE) #&lt;-- do an
                                                                         # aggregation

    do(a.little.dance) &amp;&amp; make(a.little.love) -&gt; get.down(tonight) # &lt;-- a little
                                                                   #  song and dance

    delta &lt;- (get.love)                                         # &lt;-- get some love
    delta.list&lt;-append(delta.list, delta, after=length(delta.list)) #&lt;-- put my love
                                                                    #    in a vector 
}
</code></pre>

<p>So obviously I hacked out a bunch of stuff in the middle, just to make it less clumsy. The goal would be to remove the j loop using something more vector efficient. Any ideas?</p>
"
467110,11301,2009-01-21T21:33:13Z,5,Is R a compiled language?,"<p>I can't find it anywhere on the web (and I don't want to install it). Is the <a href=""http://en.wikipedia.org/wiki/R_(programming_language)"" rel=""nofollow noreferrer"">R language</a> a compiled language? How fast does it run a pre-written script? Does it do any kind of compilation, or just execute instructions line by line?</p>
","Is R a compiled language? <p>I can't find it anywhere on the web (and I don't want to install it). Is the <a href=""http://en.wikipedia.org/wiki/R_(programming_language)"" rel=""nofollow noreferrer"">R language</a> a compiled language? How fast does it run a pre-written script? Does it do any kind of compilation, or just execute instructions line by line?</p>
"
476726,277,2009-01-24T21:56:23Z,10,Filtering data in R,"<p>I have a CSV of file of data that I can load in R using <code>read.csv()</code></p>

<p>Some of the data is missing, so I want to reduce the data frame down to set that consists entirely of non-missing data, i.e. if a <code>NULL</code> appears anywhere, I want to exclude that column and row from the filtered data set.</p>

<p>I know I can probably do this fairly simply with the inbuilt R vector operations, but I am not quite sure how to do this exactly?</p>

<p>To make my question a little more concrete, here is a quick sample of the data so you can see what I want to do.</p>

<pre><code>DocID       Anno1    Anno7  Anno8
1           7        NULL   8
2           8        NULL   3
44          10       2      3
45          6        6      6
46          1        3      4
49          3        8      5
62          4        NULL   9
63          2        NULL   4
67          11       NULL   3
91          NULL     9      7
92          NULL     7      5
93          NULL     8      8
</code></pre>

<p>So given this input, I need some code that will reduce the output to this.</p>

<pre><code>DocID       Anno8
44          3
45          6
46          4
49          5
</code></pre>

<p>As <code>Anno8</code> is the only column with non-NULL data, and there are only four rows with non-NULL data.</p>
","Filtering data in R <p>I have a CSV of file of data that I can load in R using <code>read.csv()</code></p>

<p>Some of the data is missing, so I want to reduce the data frame down to set that consists entirely of non-missing data, i.e. if a <code>NULL</code> appears anywhere, I want to exclude that column and row from the filtered data set.</p>

<p>I know I can probably do this fairly simply with the inbuilt R vector operations, but I am not quite sure how to do this exactly?</p>

<p>To make my question a little more concrete, here is a quick sample of the data so you can see what I want to do.</p>

<pre><code>DocID       Anno1    Anno7  Anno8
1           7        NULL   8
2           8        NULL   3
44          10       2      3
45          6        6      6
46          1        3      4
49          3        8      5
62          4        NULL   9
63          2        NULL   4
67          11       NULL   3
91          NULL     9      7
92          NULL     7      5
93          NULL     8      8
</code></pre>

<p>So given this input, I need some code that will reduce the output to this.</p>

<pre><code>DocID       Anno8
44          3
45          6
46          4
49          5
</code></pre>

<p>As <code>Anno8</code> is the only column with non-NULL data, and there are only four rows with non-NULL data.</p>
"
495744,12677,2009-01-30T14:48:19Z,2,Operating with time intervals like 08:00-08:15,"<p>I would like to import a time-series where the first field indicates a period:</p>

<pre><code>08:00-08:15
08:15-08:30
08:30-08:45
</code></pre>

<p>Does R have any features to do this neatly?</p>

<p>Thanks!</p>

<hr>

<p><strong>Update:</strong></p>

<p>The most promising solution I found, as suggested by Godeke was the cron package and using substring() to extract the start of the interval.</p>

<p>I'm still working on related issues, so I'll update with the solution when I get there.</p>
","Operating with time intervals like 08:00-08:15 <p>I would like to import a time-series where the first field indicates a period:</p>

<pre><code>08:00-08:15
08:15-08:30
08:30-08:45
</code></pre>

<p>Does R have any features to do this neatly?</p>

<p>Thanks!</p>

<hr>

<p><strong>Update:</strong></p>

<p>The most promising solution I found, as suggested by Godeke was the cron package and using substring() to extract the start of the interval.</p>

<p>I'm still working on related issues, so I'll update with the solution when I get there.</p>
"
498932,445,2009-01-31T14:50:28Z,3,What's the easiest way to install 100s of files in a Visual Studio setup project,"<p>I have a standard c# application that acts as a GUI front end for a an ""R"" statistics engine. ""R"" consists of approx 600 files in approx 50 different folders and can be ""installed"" on a machine through xcopy deployment.</p>

<p>I would like to package up both the R engine and my c# gui into one setup.exe so that the user doesn't need to go and install R first and then my c# application seperately.</p>

<p>I know that I can produce a setup project and then add in the R files one by one but adding all 600 files will be very tedious!</p>

<p>Is there an easier way of doing what I want? Can I add the single R folder and automatically add the subfolders and files to save me adding them in one by one? Or maybe do an unzip procedure in my setup project which will unzip the R engine in one go?</p>
","What's the easiest way to install 100s of files in a Visual Studio setup project <p>I have a standard c# application that acts as a GUI front end for a an ""R"" statistics engine. ""R"" consists of approx 600 files in approx 50 different folders and can be ""installed"" on a machine through xcopy deployment.</p>

<p>I would like to package up both the R engine and my c# gui into one setup.exe so that the user doesn't need to go and install R first and then my c# application seperately.</p>

<p>I know that I can produce a setup project and then add in the R files one by one but adding all 600 files will be very tedious!</p>

<p>Is there an easier way of doing what I want? Can I add the single R folder and automatically add the subfolders and files to save me adding them in one by one? Or maybe do an unzip procedure in my setup project which will unzip the R engine in one go?</p>
"
509595,12677,2009-02-04T00:23:09Z,2,csv file with multiple time-series,"<p>I've imported a csv file with lots of columns and sections of data.</p>

<pre><code>v &lt;- read.csv2(""200109.csv"", header=TRUE, sep="","", skip=""6"", na.strings=c(""""))
</code></pre>

<p>The layout of the file is something like this:</p>

<pre><code>Dataset1
time, data, .....
0       0
0       &lt;NA&gt;
0       0

Dataset2
time, data, .....
00:00   0
0       &lt;NA&gt;
0       0
</code></pre>

<p>(The headers of the different datasets is exactly the same.</p>

<p>Now, I can plot the first dataset with:</p>

<pre><code>plot(as.numeric(as.character(v$Calls.served.by.agent[1:30])), type=""l"")
</code></pre>

<p>I am curious if there is a better way to:</p>

<ol>
<li><p>Get all the numbers read as numbers, without having to convert.</p></li>
<li><p>Address the different datasets in the file, in some meaningfull way.</p></li>
</ol>

<p>Any hints would be appreciated. Thank you.</p>

<hr>

<p>Status update:</p>

<p>I haven't really found a good solution yet in R, but I've started writing a script in Lua to seperate each individual time-series into a seperate file. I'm leaving this open for now, because I'm curious how well R will deal with all these files. I'll get 8 files per day.</p>
","csv file with multiple time-series <p>I've imported a csv file with lots of columns and sections of data.</p>

<pre><code>v &lt;- read.csv2(""200109.csv"", header=TRUE, sep="","", skip=""6"", na.strings=c(""""))
</code></pre>

<p>The layout of the file is something like this:</p>

<pre><code>Dataset1
time, data, .....
0       0
0       &lt;NA&gt;
0       0

Dataset2
time, data, .....
00:00   0
0       &lt;NA&gt;
0       0
</code></pre>

<p>(The headers of the different datasets is exactly the same.</p>

<p>Now, I can plot the first dataset with:</p>

<pre><code>plot(as.numeric(as.character(v$Calls.served.by.agent[1:30])), type=""l"")
</code></pre>

<p>I am curious if there is a better way to:</p>

<ol>
<li><p>Get all the numbers read as numbers, without having to convert.</p></li>
<li><p>Address the different datasets in the file, in some meaningfull way.</p></li>
</ol>

<p>Any hints would be appreciated. Thank you.</p>

<hr>

<p>Status update:</p>

<p>I haven't really found a good solution yet in R, but I've started writing a script in Lua to seperate each individual time-series into a seperate file. I'm leaving this open for now, because I'm curious how well R will deal with all these files. I'll get 8 files per day.</p>
"
520810,63372,2009-02-06T15:49:48Z,20,Does R have quote-like operators like Perl's qw()?,"<p>Anyone know if R has quote-like operators like Perl's <code>qw()</code> for generating character vectors? </p>
","Does R have quote-like operators like Perl's qw()? <p>Anyone know if R has quote-like operators like Perl's <code>qw()</code> for generating character vectors? </p>
"
551113,2056,2009-02-15T16:05:33Z,3,Writing a GUI for the BRCAPRO Cancer Gene Risk Calculation Engine,"<p>I think this is a completely unique question on Stack Overflow.  First some background:</p>

<p>I've been asked to write a new GUI on top of a calculation engine called BRCAPRO (brack-a-pro).  BRCAPRO implements a Mendelian computational model based on a piece of software called BayesMendel.  BRCAPRO calculation are used by doctors and surgeons specializing in cancer treatment to show patients:</p>

<ul>
<li>The probability of being diagnosed with cancer based on their genetics and family history.</li>
<li>The change in life expectancy based on different forms of treatment and/or the age at which these treatments are started.</li>
</ul>

<p>I've done enough research to know that the BRCAPRO formulas are far too complicated to reasonably implement in my own code.</p>

<p>There is an existing well-known (to cancer doctors) software package called CancerGene: <a href=""http://www8.utsouthwestern.edu/utsw/cda/dept47829/files/65844.html"" rel=""nofollow noreferrer"">http://www8.utsouthwestern.edu/utsw/cda/dept47829/files/65844.html</a>.  This program is very old, runs on Windows 95 and includes calculating engines for several forms of cancer my client does not work with.  Ideally my client would like his application to run on the web so that he can share information with other doctors easily.</p>

<p>My task is take the CancerGene application, which is built on the BRCAPRO engine, and:</p>

<ol>
<li>Duplicate 90% of its functionality</li>
<li>Remove unnecessary functionality</li>
<li>Modify the output of reports</li>
<li>If possible, make it web-based</li>
</ol>

<p>Now my question:</p>

<p>Does anybody have any idea how to code against BRCAPRO?  I have Googled for two days and found no API documentation or development information of any kind.  Wikipedia says that the BayesMendel modeling software is written in R, but I don't have any idea what BRCAPRO is written in.  I know absolutely nothing about R.  </p>

<p>To be clear, I don't need to modify the behavior or calculating engine of BRCAPRO.  I just need to know how to feed it input so that it returns numbers to me.</p>

<p>--  Edit to add more information --</p>

<p>I downloaded the CancerGene application in the above link and installed it.  There was a small amount of documentation, including the data format that BRCAPRO expects to receive.  Without getting into an unnecessary level of detail, BRCAPRO expects matrix-formatted data where each column represents a genetic trait and each row represents a family member.  Now I just need to know how to pass this matrix to the BRCAPRO engine once I collect it from my Web/Windows form.</p>

<p>Here's hoping there are a couple of doctor/developers here on Stack Overflow!</p>

<p>KN</p>
","Writing a GUI for the BRCAPRO Cancer Gene Risk Calculation Engine <p>I think this is a completely unique question on Stack Overflow.  First some background:</p>

<p>I've been asked to write a new GUI on top of a calculation engine called BRCAPRO (brack-a-pro).  BRCAPRO implements a Mendelian computational model based on a piece of software called BayesMendel.  BRCAPRO calculation are used by doctors and surgeons specializing in cancer treatment to show patients:</p>

<ul>
<li>The probability of being diagnosed with cancer based on their genetics and family history.</li>
<li>The change in life expectancy based on different forms of treatment and/or the age at which these treatments are started.</li>
</ul>

<p>I've done enough research to know that the BRCAPRO formulas are far too complicated to reasonably implement in my own code.</p>

<p>There is an existing well-known (to cancer doctors) software package called CancerGene: <a href=""http://www8.utsouthwestern.edu/utsw/cda/dept47829/files/65844.html"" rel=""nofollow noreferrer"">http://www8.utsouthwestern.edu/utsw/cda/dept47829/files/65844.html</a>.  This program is very old, runs on Windows 95 and includes calculating engines for several forms of cancer my client does not work with.  Ideally my client would like his application to run on the web so that he can share information with other doctors easily.</p>

<p>My task is take the CancerGene application, which is built on the BRCAPRO engine, and:</p>

<ol>
<li>Duplicate 90% of its functionality</li>
<li>Remove unnecessary functionality</li>
<li>Modify the output of reports</li>
<li>If possible, make it web-based</li>
</ol>

<p>Now my question:</p>

<p>Does anybody have any idea how to code against BRCAPRO?  I have Googled for two days and found no API documentation or development information of any kind.  Wikipedia says that the BayesMendel modeling software is written in R, but I don't have any idea what BRCAPRO is written in.  I know absolutely nothing about R.  </p>

<p>To be clear, I don't need to modify the behavior or calculating engine of BRCAPRO.  I just need to know how to feed it input so that it returns numbers to me.</p>

<p>--  Edit to add more information --</p>

<p>I downloaded the CancerGene application in the above link and installed it.  There was a small amount of documentation, including the data format that BRCAPRO expects to receive.  Without getting into an unnecessary level of detail, BRCAPRO expects matrix-formatted data where each column represents a genetic trait and each row represents a family member.  Now I just need to know how to pass this matrix to the BRCAPRO engine once I collect it from my Web/Windows form.</p>

<p>Here's hoping there are a couple of doctor/developers here on Stack Overflow!</p>

<p>KN</p>
"
560329,67405,2009-02-18T09:08:38Z,2,Sort the X axis in a barplot,"<p>I have binned data that looks like this:</p>

<pre><code>  (8.048,18.05] (-21.95,-11.95] (-31.95,-21.95]   (18.05,28.05] (-41.95,-31.95]
             81              76              18              18             12
    (-132,-122]     (-122,-112]     (-112,-102]     (-162,-152]  (-102,-91.95]
              6               6               6               5              5
(-91.95,-81.95]     (-192,-182]   (28.05,38.05]   (38.05,48.05]  (58.05,68.05]
              5               4               4               4              4
  (78.05,88.05]     (98.05,108]     (-562,-552]     (-512,-502]    (-482,-472]
              4               4               3               3              3
    (-452,-442]     (-412,-402]     (-282,-272]     (-152,-142]  (48.05,58.05]
              3               3               3               3              3
  (68.05,78.05]       (118,128]       (128,138]     (-582,-572]    (-552,-542]
              3               3               3               2              2
    (-532,-522]     (-422,-412]     (-392,-382]     (-362,-352]    (-262,-252]
              2               2               2               2              2
    (-252,-242]     (-142,-132] (-81.95,-71.95]       (148,158]  (-1402,-1392]
              2               2               2               2              1
  (-1372,-1362]   (-1342,-1332]     (-942,-932]     (-862,-852]    (-822,-812]
              1               1               1               1              1
    (-712,-702]     (-682,-672]     (-672,-662]     (-632,-622]    (-542,-532]
              1               1               1               1              1
    (-502,-492]     (-492,-482]     (-472,-462]     (-462,-452]    (-442,-432]
              1               1               1               1              1
    (-432,-422]     (-352,-342]     (-332,-322]     (-312,-302]    (-302,-292]
              1               1               1               1              1
    (-202,-192]     (-182,-172]     (-172,-162] (-51.95,-41.95]  (88.05,98.05]
              1               1               1               1              1
      (108,118]       (158,168]       (168,178]       (178,188]      (298,308]
              1               1               1               1              1
      (318,328]       (328,338]       (338,348]       (368,378]      (458,468]
              1               1               1               1              1
</code></pre>

<p>How can I plot this data so that the bin is sorted from most negative on the left to most positive on the right? Currently my graph looks <a href=""http://docs.google.com/Doc?id=dcvdrfrh_5cm5qkchw"" rel=""nofollow noreferrer"">like this</a>.  Notice that it is not sorted at all.  In particular the second bar (<code>value = 76</code>) is placed to the right of the first:</p>

<pre><code> (8.048,18.05] (-21.95,-11.95]
            81              76
</code></pre>

<p>This is the command I use to plot:</p>

<pre><code>barplot(x,ylab=""Number of Unique Tags"", xlab=""Expected - Observed"")
</code></pre>
","Sort the X axis in a barplot <p>I have binned data that looks like this:</p>

<pre><code>  (8.048,18.05] (-21.95,-11.95] (-31.95,-21.95]   (18.05,28.05] (-41.95,-31.95]
             81              76              18              18             12
    (-132,-122]     (-122,-112]     (-112,-102]     (-162,-152]  (-102,-91.95]
              6               6               6               5              5
(-91.95,-81.95]     (-192,-182]   (28.05,38.05]   (38.05,48.05]  (58.05,68.05]
              5               4               4               4              4
  (78.05,88.05]     (98.05,108]     (-562,-552]     (-512,-502]    (-482,-472]
              4               4               3               3              3
    (-452,-442]     (-412,-402]     (-282,-272]     (-152,-142]  (48.05,58.05]
              3               3               3               3              3
  (68.05,78.05]       (118,128]       (128,138]     (-582,-572]    (-552,-542]
              3               3               3               2              2
    (-532,-522]     (-422,-412]     (-392,-382]     (-362,-352]    (-262,-252]
              2               2               2               2              2
    (-252,-242]     (-142,-132] (-81.95,-71.95]       (148,158]  (-1402,-1392]
              2               2               2               2              1
  (-1372,-1362]   (-1342,-1332]     (-942,-932]     (-862,-852]    (-822,-812]
              1               1               1               1              1
    (-712,-702]     (-682,-672]     (-672,-662]     (-632,-622]    (-542,-532]
              1               1               1               1              1
    (-502,-492]     (-492,-482]     (-472,-462]     (-462,-452]    (-442,-432]
              1               1               1               1              1
    (-432,-422]     (-352,-342]     (-332,-322]     (-312,-302]    (-302,-292]
              1               1               1               1              1
    (-202,-192]     (-182,-172]     (-172,-162] (-51.95,-41.95]  (88.05,98.05]
              1               1               1               1              1
      (108,118]       (158,168]       (168,178]       (178,188]      (298,308]
              1               1               1               1              1
      (318,328]       (328,338]       (338,348]       (368,378]      (458,468]
              1               1               1               1              1
</code></pre>

<p>How can I plot this data so that the bin is sorted from most negative on the left to most positive on the right? Currently my graph looks <a href=""http://docs.google.com/Doc?id=dcvdrfrh_5cm5qkchw"" rel=""nofollow noreferrer"">like this</a>.  Notice that it is not sorted at all.  In particular the second bar (<code>value = 76</code>) is placed to the right of the first:</p>

<pre><code> (8.048,18.05] (-21.95,-11.95]
            81              76
</code></pre>

<p>This is the command I use to plot:</p>

<pre><code>barplot(x,ylab=""Number of Unique Tags"", xlab=""Expected - Observed"")
</code></pre>
"
582653,69117,2009-02-24T17:21:30Z,13,what is the best practice of handling time in R?,"<p>I am working with a survey dataset. It has two string vectors, start and finish, indicating the time of the day when the interview was started, and finished, respectively.</p>

<p>They are character strings that look like: ""9:24 am"", ""12:35 pm"", and so forth. i am trying to calculate the duration of the interview based on these two. what is the best way of doing this?</p>

<p>i know that, for dates, there are lots of classes or functions like <code>as.date()</code>, <code>as.Date()</code>, <code>chron()</code>, or <code>as.POSIXct()</code>. So i was looking for something like <code>as.time()</code>, but could not find it. Should I just append a made-up date and convert the whole thing into a <code>POSIX()</code> date-time class, then use <code>difftime()</code>? </p>

<p>What is the best practice of handling time in R?</p>
","what is the best practice of handling time in R? <p>I am working with a survey dataset. It has two string vectors, start and finish, indicating the time of the day when the interview was started, and finished, respectively.</p>

<p>They are character strings that look like: ""9:24 am"", ""12:35 pm"", and so forth. i am trying to calculate the duration of the interview based on these two. what is the best way of doing this?</p>

<p>i know that, for dates, there are lots of classes or functions like <code>as.date()</code>, <code>as.Date()</code>, <code>chron()</code>, or <code>as.POSIXct()</code>. So i was looking for something like <code>as.time()</code>, but could not find it. Should I just append a made-up date and convert the whole thing into a <code>POSIX()</code> date-time class, then use <code>difftime()</code>? </p>

<p>What is the best practice of handling time in R?</p>
"
596819,69117,2009-02-27T21:49:17Z,11,What is the best way to avoid passing a data frame around?,"<p>I have 12 data frames to work with. They are similar and I have to do the same processing to each one, so I wrote a function that takes a data frame, processes it, and then returns a data frame. This works. But I am afraid that I am passing around a very big structure. I may be making temporary copies (am I?) This can't be efficient. What is the best way to avoid passing a data frame around? Thank you.</p>

<pre><code>doSomething &lt;- function(df) {
  // do something with the data frame, df
  return(df)
}
</code></pre>
","What is the best way to avoid passing a data frame around? <p>I have 12 data frames to work with. They are similar and I have to do the same processing to each one, so I wrote a function that takes a data frame, processes it, and then returns a data frame. This works. But I am afraid that I am passing around a very big structure. I may be making temporary copies (am I?) This can't be efficient. What is the best way to avoid passing a data frame around? Thank you.</p>

<pre><code>doSomething &lt;- function(df) {
  // do something with the data frame, df
  return(df)
}
</code></pre>
"
596976,69117,2009-02-27T22:45:59Z,0,What is the Y function?,"<p>A friend of mine asked me if I understood the Y function. I didn't even know what it was. <code>? Y</code> did not get me anywhere.</p>

<p>What is it?</p>
","What is the Y function? <p>A friend of mine asked me if I understood the Y function. I didn't even know what it was. <code>? Y</code> did not get me anywhere.</p>

<p>What is it?</p>
"
652136,1447,2009-03-16T20:59:36Z,159,How can I remove an element from a list?,"<p>I have a list and I want to remove a single element from it.  How can I do this?</p>

<p>I've tried looking up what I think the obvious names for this function would be in the reference manual and I haven't found anything appropriate.</p>
","How can I remove an element from a list? <p>I have a list and I want to remove a single element from it.  How can I do this?</p>

<p>I've tried looking up what I think the obvious names for this function would be in the reference manual and I haven't found anything appropriate.</p>
"
657440,67405,2009-03-18T08:59:04Z,7,Cumulative Plot with Given X-Axis,"<p>I have data that looks like this.
In which I want to plot accumulative value of dat1 with respect
to x-axis. Also plot it together with dat2.</p>

<pre><code>#x-axis dat1              dat2
-10     0.0140149       0.0140146
-9      0.00890835      0.00891768
-8      0.00672276      0.00672488
-7      0.00876399      0.00879401
-6      0.00806879      0.00808141
-5      0.0088366       0.00885121
-4      0.00856872      0.00857769
-3      0.0195384       0.0196094
-2      0.0160239       0.0161829
-1      0.0254455       0.0257845
0       0.0397413       0.0400913
1       0.0743316       0.0755453
2       0.0247501       0.0253324
3       0.0214285       0.021778
4       0.0241462       0.0244967
5       0.0150943       0.015241
6       0.0141398       0.0142373
7       0.0101515       0.0102948
8       0.0308843       0.031294
9       0.0095504       0.00960626
10      0.00729676      0.0073713
</code></pre>

<p>What's the common way to do it in R?</p>

<p>I looked at ECDF from Hmisc, it doesn't seem to do what I want.
In particular it doesn't allow us to give x-axis value.</p>
","Cumulative Plot with Given X-Axis <p>I have data that looks like this.
In which I want to plot accumulative value of dat1 with respect
to x-axis. Also plot it together with dat2.</p>

<pre><code>#x-axis dat1              dat2
-10     0.0140149       0.0140146
-9      0.00890835      0.00891768
-8      0.00672276      0.00672488
-7      0.00876399      0.00879401
-6      0.00806879      0.00808141
-5      0.0088366       0.00885121
-4      0.00856872      0.00857769
-3      0.0195384       0.0196094
-2      0.0160239       0.0161829
-1      0.0254455       0.0257845
0       0.0397413       0.0400913
1       0.0743316       0.0755453
2       0.0247501       0.0253324
3       0.0214285       0.021778
4       0.0241462       0.0244967
5       0.0150943       0.015241
6       0.0141398       0.0142373
7       0.0101515       0.0102948
8       0.0308843       0.031294
9       0.0095504       0.00960626
10      0.00729676      0.0073713
</code></pre>

<p>What's the common way to do it in R?</p>

<p>I looked at ECDF from Hmisc, it doesn't seem to do what I want.
In particular it doesn't allow us to give x-axis value.</p>
"
659725,37751,2009-03-18T19:21:41Z,5,Column Stores: Comparing Column Based Databases,"<p>I've really been struggling to make SQL Server into something that, quite frankly, it will never be. I need a database engine for my analytical work. The DB needs to be fast and does NOT need all the logging and other overhead found in typical databases (SQL Server, Oracle, DB2, etc.) </p>

<p>Yesterday I listened to <a href=""http://itc.conversationsnetwork.org/shows/detail4009.html"" rel=""noreferrer"">Michael Stonebraker speak at the Money:Tech conference</a> and I kept thinking, ""I'm not really crazy. There IS a better way!"" He talks about using <a href=""http://en.wikipedia.org/wiki/Column-oriented_DBMS"" rel=""noreferrer"">column stores</a> instead of row oriented databases. I went to the Wikipedia page for <a href=""http://en.wikipedia.org/wiki/Column-oriented_DBMS"" rel=""noreferrer"">column stores</a> and I see a few open source projects (which I like) and a few commercial/open source projects (which I don't fully understand). </p>

<p>My question is this: In an applied analytical environment, how do the different column based DB's differ? How should I be thinking about them? Anyone have practical experience with multiple column based systems? Can I leverage my SQL experience with these DBs or am I going to have to learn a new language?</p>

<p>I am ultimately going to be pulling data into R for analysis. </p>

<p><strong>EDIT:</strong> I was requested for some clarification in what exactly I am trying to do. So, here's an example of what I would like to do:
Create a table that has 4 million rows and 20 columns (5 dims, 15 facts). Create 5 aggregation tables that calculate max, min, and average for each of the facts. Join those 5 aggregations back to the starting table. Now calculate the percent deviation from mean, percent deviation of min, and percent deviation from max for each row and add it to the original table. This table data does not get new rows each day, it gets TOTALLY replaced and the process is repeated. Heaven forbid if the process must be stopped. And the logs... ohhhhh the logs! :)</p>
","Column Stores: Comparing Column Based Databases <p>I've really been struggling to make SQL Server into something that, quite frankly, it will never be. I need a database engine for my analytical work. The DB needs to be fast and does NOT need all the logging and other overhead found in typical databases (SQL Server, Oracle, DB2, etc.) </p>

<p>Yesterday I listened to <a href=""http://itc.conversationsnetwork.org/shows/detail4009.html"" rel=""noreferrer"">Michael Stonebraker speak at the Money:Tech conference</a> and I kept thinking, ""I'm not really crazy. There IS a better way!"" He talks about using <a href=""http://en.wikipedia.org/wiki/Column-oriented_DBMS"" rel=""noreferrer"">column stores</a> instead of row oriented databases. I went to the Wikipedia page for <a href=""http://en.wikipedia.org/wiki/Column-oriented_DBMS"" rel=""noreferrer"">column stores</a> and I see a few open source projects (which I like) and a few commercial/open source projects (which I don't fully understand). </p>

<p>My question is this: In an applied analytical environment, how do the different column based DB's differ? How should I be thinking about them? Anyone have practical experience with multiple column based systems? Can I leverage my SQL experience with these DBs or am I going to have to learn a new language?</p>

<p>I am ultimately going to be pulling data into R for analysis. </p>

<p><strong>EDIT:</strong> I was requested for some clarification in what exactly I am trying to do. So, here's an example of what I would like to do:
Create a table that has 4 million rows and 20 columns (5 dims, 15 facts). Create 5 aggregation tables that calculate max, min, and average for each of the facts. Join those 5 aggregations back to the starting table. Now calculate the percent deviation from mean, percent deviation of min, and percent deviation from max for each row and add it to the original table. This table data does not get new rows each day, it gets TOTALLY replaced and the process is repeated. Heaven forbid if the process must be stopped. And the logs... ohhhhh the logs! :)</p>
"
713878,NA,2009-04-03T13:23:03Z,25,How expensive is it to compute the eigenvalues of a matrix?,"<p>How expensive is it to compute the eigenvalues of a matrix? </p>

<p>What is the complexity of the best algorithms? </p>

<p>How long might it take in practice if I have a 1000 x 1000 matrix? I assume it helps if the matrix is sparse?</p>

<p>Are there any cases where the eigenvalue computation would not terminate? </p>

<p>In <code>R</code>, I can compute the eigenvalues as in the following toy example:</p>

<pre><code>m&lt;-matrix( c(13,2, 5,4), ncol=2, nrow=2 )
eigen(m, only.values=1)
$values
[1] 14  3
</code></pre>

<p>Does anyone know what algorithm it uses? </p>

<p>Are there any other (open-source) packages that compute the eigenvalue?</p>
","How expensive is it to compute the eigenvalues of a matrix? <p>How expensive is it to compute the eigenvalues of a matrix? </p>

<p>What is the complexity of the best algorithms? </p>

<p>How long might it take in practice if I have a 1000 x 1000 matrix? I assume it helps if the matrix is sparse?</p>

<p>Are there any cases where the eigenvalue computation would not terminate? </p>

<p>In <code>R</code>, I can compute the eigenvalues as in the following toy example:</p>

<pre><code>m&lt;-matrix( c(13,2, 5,4), ncol=2, nrow=2 )
eigen(m, only.values=1)
$values
[1] 14  3
</code></pre>

<p>Does anyone know what algorithm it uses? </p>

<p>Are there any other (open-source) packages that compute the eigenvalue?</p>
"
717747,19410,2009-04-04T20:21:37Z,8,How do I color edges or draw rects correctly in an R dendrogram?,"<p>I generated <a href=""http://farm4.static.flickr.com/3622/3411762935_b9429d9d68_o.png"" rel=""nofollow noreferrer"">this dendrogram</a> using R's <code>hclust()</code>, <code>as.dendrogram()</code> and <code>plot.dendrogram()</code> functions.</p>

<p>I used the <code>dendrapply()</code> function and a local function to color leaves, which is working fine.</p>

<p>I have results from a statistical test that indicate if a set of nodes (<em>e.g.</em> the cluster of ""<code>_+v\_stat5a\_01_</code>"" and ""<code>_+v\_stat5b\_01_</code>"" in the lower-right corner of the tree) are significant or important.</p>

<p>I also have a local function that I can use with <code>dendrapply()</code> that finds the exact node in my dendrogram which contains significant leaves.</p>

<p>I would like to either (following the example):</p>

<ol>
<li>Color the edges that join ""<code>_+v\_stat5a\_01_</code>"" and ""<code>_+v\_stat5b\_01_</code>""; or,</li>
<li>Draw a <code>rect()</code> around ""<code>_+v\_stat5a\_01_</code>"" and ""<code>_+v\_stat5b\_01_</code>""</li>
</ol>

<p>I have the following local function (the details of the ""nodes-in-leafList-match-nodes-in-clusterList"" condition aren't important, but that it highlights significant nodes):</p>

<pre><code>markSignificantClusters &lt;&lt;- function (n) {
  if (!is.leaf(n)) {
     a &lt;- attributes(n)
     leafList &lt;- unlist(dendrapply(n, listLabels))
     for (clusterIndex in 1:length(significantClustersList[[1]])) {
       clusterList &lt;- unlist(significantClustersList[[1]][clusterIndex])
       if (nodes-in-leafList-match-nodes-in-clusterList) {
          # I now have a node ""n"" that contains significant leaves, and
          # I'd like to use a dendrapply() call to another local function
          # which colors the edges that run down to the leaves; or, draw
          # a rect() around the leaves
       }
     }
  }
}
</code></pre>

<p>From within this <code>if</code> block, I have tried calling <code>dendrapply(n, markEdges)</code>, but this did not work:</p>

<pre><code>markEdges &lt;&lt;- function (n) {
  a &lt;- attributes(n)
  attr(n, ""edgePar"") &lt;- c(a$edgePar, list(lty=3, col=""red""))
}
</code></pre>

<p>In my ideal example, the edges connecting ""<code>_+v\_stat5a\_01_</code>"" and ""<code>_+v\_stat5b\_01_</code>"" would be dashed and of a red color.</p>

<p>I have also tried using <code>rect.hclust()</code> within this <code>if</code> block:</p>

<pre><code>ma &lt;- match(leafList, orderedLabels)  
rect.hclust(scoreClusterObj, h = a$height, x = c(min(ma), max(ma)), border = 2)
</code></pre>

<p>But the result does not work with horizontal dendrograms (<em>i.e.</em> dendrograms with horizontal labels). <a href=""http://farm4.static.flickr.com/3331/3410126060_f8f06c4498_o.png"" rel=""nofollow noreferrer"">Here is an example</a> (note the red stripe in the lower-right corner). Something is not correct about the dimensions of what <code>rect.hclust()</code> generates, and I don't know how it works, to be able to write my own version.</p>

<p>I appreciate any advice for getting <code>edgePar</code> or <code>rect.hclust()</code> to work properly, or to be able to write my own <code>rect.hclust()</code> equivalent.</p>

<p><strong>UPDATE</strong></p>

<p>Since asking this question, I used <code>getAnywhere(rect.hclust())</code> to get the functional code that calculates parameters and draws the <code>rect</code> object. I wrote a custom version of this function to handle horizontal and vertical leaves, and call it with <code>dendrapply()</code>.</p>

<p>However, there is some kind of clipping effect that removes part of the <code>rect</code>. For horizontal leaves (leaves that are drawn on the right side of the tree), the rightmost edge of the <code>rect</code> either disappears or is thinner than the border width of the other three sides of the <code>rect</code>. For vertical leaves (leaves that are drawn on the bottom of the tree), the bottommost edge of the <code>rect</code> suffers the same display problem.</p>

<p>What I had done as a means of marking significant clusters is to reduce the width of the <code>rect</code> such that I render a vertical red stripe between the tips of the cluster edges and the (horizontal) leaf labels. </p>

<p>This eliminates the clipping issue, but introduces another problem, in that the space between the cluster edge tips and the leaf labels is only six or so pixels wide, which I don't have much control over. This limits the width of the vertical stripe. </p>

<p>The worse problem is that the <code>x</code>-coordinate that marks where the vertical stripe can fit between the two elements will change based on the width of the larger tree (<code>par[""usr""]</code>), which in turn depends on how the tree hierarchy ends up being structured.</p>

<p>I wrote a ""correction"" or, better termed, a hack to adjust this <code>x</code> value and the <code>rect</code> width for horizontal trees. It doesn't always work consistently, but for the trees I am making, it seems to keep from getting too close to (or overlapping) edges and labels.</p>

<p>Ultimately, a better fix would be to find out how to draw the <code>rect</code> so that there is no clipping. Or a consistent way to calculate the specific <code>x</code> position in between tree edges and labels for any given tree, so as to center and size the stripe properly.</p>

<p>I would also be very interested in a method for annotating edges with colors or line styles.</p>
","How do I color edges or draw rects correctly in an R dendrogram? <p>I generated <a href=""http://farm4.static.flickr.com/3622/3411762935_b9429d9d68_o.png"" rel=""nofollow noreferrer"">this dendrogram</a> using R's <code>hclust()</code>, <code>as.dendrogram()</code> and <code>plot.dendrogram()</code> functions.</p>

<p>I used the <code>dendrapply()</code> function and a local function to color leaves, which is working fine.</p>

<p>I have results from a statistical test that indicate if a set of nodes (<em>e.g.</em> the cluster of ""<code>_+v\_stat5a\_01_</code>"" and ""<code>_+v\_stat5b\_01_</code>"" in the lower-right corner of the tree) are significant or important.</p>

<p>I also have a local function that I can use with <code>dendrapply()</code> that finds the exact node in my dendrogram which contains significant leaves.</p>

<p>I would like to either (following the example):</p>

<ol>
<li>Color the edges that join ""<code>_+v\_stat5a\_01_</code>"" and ""<code>_+v\_stat5b\_01_</code>""; or,</li>
<li>Draw a <code>rect()</code> around ""<code>_+v\_stat5a\_01_</code>"" and ""<code>_+v\_stat5b\_01_</code>""</li>
</ol>

<p>I have the following local function (the details of the ""nodes-in-leafList-match-nodes-in-clusterList"" condition aren't important, but that it highlights significant nodes):</p>

<pre><code>markSignificantClusters &lt;&lt;- function (n) {
  if (!is.leaf(n)) {
     a &lt;- attributes(n)
     leafList &lt;- unlist(dendrapply(n, listLabels))
     for (clusterIndex in 1:length(significantClustersList[[1]])) {
       clusterList &lt;- unlist(significantClustersList[[1]][clusterIndex])
       if (nodes-in-leafList-match-nodes-in-clusterList) {
          # I now have a node ""n"" that contains significant leaves, and
          # I'd like to use a dendrapply() call to another local function
          # which colors the edges that run down to the leaves; or, draw
          # a rect() around the leaves
       }
     }
  }
}
</code></pre>

<p>From within this <code>if</code> block, I have tried calling <code>dendrapply(n, markEdges)</code>, but this did not work:</p>

<pre><code>markEdges &lt;&lt;- function (n) {
  a &lt;- attributes(n)
  attr(n, ""edgePar"") &lt;- c(a$edgePar, list(lty=3, col=""red""))
}
</code></pre>

<p>In my ideal example, the edges connecting ""<code>_+v\_stat5a\_01_</code>"" and ""<code>_+v\_stat5b\_01_</code>"" would be dashed and of a red color.</p>

<p>I have also tried using <code>rect.hclust()</code> within this <code>if</code> block:</p>

<pre><code>ma &lt;- match(leafList, orderedLabels)  
rect.hclust(scoreClusterObj, h = a$height, x = c(min(ma), max(ma)), border = 2)
</code></pre>

<p>But the result does not work with horizontal dendrograms (<em>i.e.</em> dendrograms with horizontal labels). <a href=""http://farm4.static.flickr.com/3331/3410126060_f8f06c4498_o.png"" rel=""nofollow noreferrer"">Here is an example</a> (note the red stripe in the lower-right corner). Something is not correct about the dimensions of what <code>rect.hclust()</code> generates, and I don't know how it works, to be able to write my own version.</p>

<p>I appreciate any advice for getting <code>edgePar</code> or <code>rect.hclust()</code> to work properly, or to be able to write my own <code>rect.hclust()</code> equivalent.</p>

<p><strong>UPDATE</strong></p>

<p>Since asking this question, I used <code>getAnywhere(rect.hclust())</code> to get the functional code that calculates parameters and draws the <code>rect</code> object. I wrote a custom version of this function to handle horizontal and vertical leaves, and call it with <code>dendrapply()</code>.</p>

<p>However, there is some kind of clipping effect that removes part of the <code>rect</code>. For horizontal leaves (leaves that are drawn on the right side of the tree), the rightmost edge of the <code>rect</code> either disappears or is thinner than the border width of the other three sides of the <code>rect</code>. For vertical leaves (leaves that are drawn on the bottom of the tree), the bottommost edge of the <code>rect</code> suffers the same display problem.</p>

<p>What I had done as a means of marking significant clusters is to reduce the width of the <code>rect</code> such that I render a vertical red stripe between the tips of the cluster edges and the (horizontal) leaf labels. </p>

<p>This eliminates the clipping issue, but introduces another problem, in that the space between the cluster edge tips and the leaf labels is only six or so pixels wide, which I don't have much control over. This limits the width of the vertical stripe. </p>

<p>The worse problem is that the <code>x</code>-coordinate that marks where the vertical stripe can fit between the two elements will change based on the width of the larger tree (<code>par[""usr""]</code>), which in turn depends on how the tree hierarchy ends up being structured.</p>

<p>I wrote a ""correction"" or, better termed, a hack to adjust this <code>x</code> value and the <code>rect</code> width for horizontal trees. It doesn't always work consistently, but for the trees I am making, it seems to keep from getting too close to (or overlapping) edges and labels.</p>

<p>Ultimately, a better fix would be to find out how to draw the <code>rect</code> so that there is no clipping. Or a consistent way to calculate the specific <code>x</code> position in between tree edges and labels for any given tree, so as to center and size the stripe properly.</p>

<p>I would also be very interested in a method for annotating edges with colors or line styles.</p>
"
736514,20895,2009-04-10T02:18:38Z,41,R Random Forests Variable Importance,"<p>I am trying to use the random forests package for classification in R.</p>

<p>The Variable Importance Measures listed are:</p>

<ul>
<li>mean raw importance score of variable x for class 0</li>
<li>mean raw importance score of variable x for class 1</li>
<li><code>MeanDecreaseAccuracy</code></li>
<li><code>MeanDecreaseGini</code></li>
</ul>

<p>Now I know what these ""mean"" as in I know their definitions.  What I want to know is how to use them.</p>

<p>What I really want to know is what these values mean in only the context of how accurate they are, what is a good value, what is a bad value, what are the maximums and minimums, etc.</p>

<p>If a variable has a high <code>MeanDecreaseAccuracy</code> or <code>MeanDecreaseGini</code> does that mean it is important or unimportant?  Also any information on raw scores could be useful too.
I want to know everything there is to know about these numbers that is relevant to the application of them.  </p>

<p>An explanation that uses the words 'error', 'summation', or 'permutated' would be less helpful then a simpler explanation that didn't involve any discussion of how random forests works.</p>

<p>Like if I wanted someone to explain to me how to use a radio, I wouldn't expect the explanation to involve how a radio converts radio waves into sound.</p>
","R Random Forests Variable Importance <p>I am trying to use the random forests package for classification in R.</p>

<p>The Variable Importance Measures listed are:</p>

<ul>
<li>mean raw importance score of variable x for class 0</li>
<li>mean raw importance score of variable x for class 1</li>
<li><code>MeanDecreaseAccuracy</code></li>
<li><code>MeanDecreaseGini</code></li>
</ul>

<p>Now I know what these ""mean"" as in I know their definitions.  What I want to know is how to use them.</p>

<p>What I really want to know is what these values mean in only the context of how accurate they are, what is a good value, what is a bad value, what are the maximums and minimums, etc.</p>

<p>If a variable has a high <code>MeanDecreaseAccuracy</code> or <code>MeanDecreaseGini</code> does that mean it is important or unimportant?  Also any information on raw scores could be useful too.
I want to know everything there is to know about these numbers that is relevant to the application of them.  </p>

<p>An explanation that uses the words 'error', 'summation', or 'permutated' would be less helpful then a simpler explanation that didn't involve any discussion of how random forests works.</p>

<p>Like if I wanted someone to explain to me how to use a radio, I wouldn't expect the explanation to involve how a radio converts radio waves into sound.</p>
"
736541,85950,2009-04-10T02:32:21Z,12,Plots without titles/labels in R,"<p>In <a href=""http://www.r-project.org/"" rel=""nofollow noreferrer"">R</a> is there any way to produce plots which have no title and which use the space the title would otherwise have taken up?</p>

<p>In <code>plot()</code>, <code>main</code>, <code>sub</code>, <code>xlab</code>, and <code>ylab</code> all default to <code>NULL</code>, but this just leaves blank space where they would have been, ditto for setting them to ''.  It would be nice if not including them meant that the entire plot space was utilized rather than leaving extra empty space on the edges.  This is all especially relevant in printing plots to file devices like <code>pdf()</code>, <code>png()</code>, etc.</p>
","Plots without titles/labels in R <p>In <a href=""http://www.r-project.org/"" rel=""nofollow noreferrer"">R</a> is there any way to produce plots which have no title and which use the space the title would otherwise have taken up?</p>

<p>In <code>plot()</code>, <code>main</code>, <code>sub</code>, <code>xlab</code>, and <code>ylab</code> all default to <code>NULL</code>, but this just leaves blank space where they would have been, ditto for setting them to ''.  It would be nice if not including them meant that the entire plot space was utilized rather than leaving extra empty space on the edges.  This is all especially relevant in printing plots to file devices like <code>pdf()</code>, <code>png()</code>, etc.</p>
"
743622,14744,2009-04-13T11:13:51Z,106,Finding row index containing maximum value using R,"<p>Given the following matrix lets assume I want to find the maximum value in column two:</p>

<pre><code>mat &lt;- matrix(c(1:3,7:9,4:6), byrow = T, nc = 3)
mat
     [,1] [,2] [,3]
[1,]    1    2    3
[2,]    7    8    9
[3,]    4    5    6
</code></pre>

<p>I know <code>max(mat[,2])</code> will return 8. How can I return the row index, in this case row two?</p>
","Finding row index containing maximum value using R <p>Given the following matrix lets assume I want to find the maximum value in column two:</p>

<pre><code>mat &lt;- matrix(c(1:3,7:9,4:6), byrow = T, nc = 3)
mat
     [,1] [,2] [,3]
[1,]    1    2    3
[2,]    7    8    9
[3,]    4    5    6
</code></pre>

<p>I know <code>max(mat[,2])</code> will return 8. How can I return the row index, in this case row two?</p>
"
743812,14744,2009-04-13T12:52:51Z,125,Calculating moving average,"<p>I'm trying to use R to calculate the moving average over a series of values in a matrix. The normal R mailing list search hasn't been very helpful though. There doesn't seem to be a <a href=""http://www.statmethods.net/management/functions.html"" rel=""noreferrer"">built-in function</a> in R will allow me to calculate moving averages. Do any packages provide one? Or do I need to write my own?</p>
","Calculating moving average <p>I'm trying to use R to calculate the moving average over a series of values in a matrix. The normal R mailing list search hasn't been very helpful though. There doesn't seem to be a <a href=""http://www.statmethods.net/management/functions.html"" rel=""noreferrer"">built-in function</a> in R will allow me to calculate moving averages. Do any packages provide one? Or do I need to write my own?</p>
"
750703,85950,2009-04-15T07:55:21Z,28,"Suppressing ""null device"" output with R in batch mode","<p>I have a number of bash scripts which invoke R scripts for plotting things.  Something like:  </p>

<pre><code>#!/bin/bash
R --vanilla --slave &lt;&lt;RSCRIPT
cat(""Plotting $1 to $2\n"")
input &lt;- read.table(""$1"")
png(""$2"")
plot(as.numeric(input[1,]))
dev.off()
RSCRIPT
</code></pre>

<p>The problem is that despite <code>--slave</code>, the call to <code>dev.off()</code> prints the message <code>null device 1</code>.  Once there are a lot of plots being done, or for more complex scripts which plot to a number of files, this gets to be a real hassle.</p>

<p>Is there some way to suppress this message?</p>
","Suppressing ""null device"" output with R in batch mode <p>I have a number of bash scripts which invoke R scripts for plotting things.  Something like:  </p>

<pre><code>#!/bin/bash
R --vanilla --slave &lt;&lt;RSCRIPT
cat(""Plotting $1 to $2\n"")
input &lt;- read.table(""$1"")
png(""$2"")
plot(as.numeric(input[1,]))
dev.off()
RSCRIPT
</code></pre>

<p>The problem is that despite <code>--slave</code>, the call to <code>dev.off()</code> prints the message <code>null device 1</code>.  Once there are a lot of plots being done, or for more complex scripts which plot to a number of files, this gets to be a real hassle.</p>

<p>Is there some way to suppress this message?</p>
"
750786,85950,2009-04-15T08:31:35Z,94,What's the best way to use R scripts on the command line (terminal)?,"<p>It's very convenient to have R scripts for doing simple plots from the command line.  However, running R from bash scripts is not convenient at all.  The ideal might be something like</p>

<pre><code>#!/path/to/R
...
</code></pre>

<p>or</p>

<pre><code>#!/usr/bin/env R
...
</code></pre>

<p>but I haven't been able to make either of those work.</p>

<p>Another option is keeping the scripts purely in R, e.g. <code>script.R</code>, and invoking it with <code>R --file=script.R</code> or similar.  However, occasionally a script will rely on obscure command line switches at which point part of the code exists outside the script.  Example: sneaking things into R from bash via a local .Rprofile, the desired switches are then everything <code>--vanilla</code> implies except <code>--no-init-file</code>.</p>

<p>Another option is a bash script to store the R flags and be painlessly executable, which then calls the R script.  The problem is that this means a single program just got split into two files which now have to be keep in sync, transferred to new machines together, etc.</p>

<p>The option I currently despise least is embedding the R in a bash script:</p>

<pre><code>#!/bin/bash
... # usage message to catch bad input without invoking R
... # any bash pre-processing of input
... # etc
R --random-flags &lt;&lt;RSCRIPT
# R code goes here
RSCRIPT
</code></pre>

<p>Everything's in a single file.  It's executable and easily handles arguments.  The problem is that combining bash and R like this pretty much eliminates the possibility of any IDE not failing on one or the other, and makes my heart hurt real bad.</p>

<p>Is there some better way I'm missing?</p>
","What's the best way to use R scripts on the command line (terminal)? <p>It's very convenient to have R scripts for doing simple plots from the command line.  However, running R from bash scripts is not convenient at all.  The ideal might be something like</p>

<pre><code>#!/path/to/R
...
</code></pre>

<p>or</p>

<pre><code>#!/usr/bin/env R
...
</code></pre>

<p>but I haven't been able to make either of those work.</p>

<p>Another option is keeping the scripts purely in R, e.g. <code>script.R</code>, and invoking it with <code>R --file=script.R</code> or similar.  However, occasionally a script will rely on obscure command line switches at which point part of the code exists outside the script.  Example: sneaking things into R from bash via a local .Rprofile, the desired switches are then everything <code>--vanilla</code> implies except <code>--no-init-file</code>.</p>

<p>Another option is a bash script to store the R flags and be painlessly executable, which then calls the R script.  The problem is that this means a single program just got split into two files which now have to be keep in sync, transferred to new machines together, etc.</p>

<p>The option I currently despise least is embedding the R in a bash script:</p>

<pre><code>#!/bin/bash
... # usage message to catch bad input without invoking R
... # any bash pre-processing of input
... # etc
R --random-flags &lt;&lt;RSCRIPT
# R code goes here
RSCRIPT
</code></pre>

<p>Everything's in a single file.  It's executable and easily handles arguments.  The problem is that combining bash and R like this pretty much eliminates the possibility of any IDE not failing on one or the other, and makes my heart hurt real bad.</p>

<p>Is there some better way I'm missing?</p>
"
775116,1447,2009-04-21T23:30:47Z,7,How can a function parameter be used without mentioning it in the function body?,"<p>I've been trying to learn more about R (and writing C extensions) and I thought it might help to read the source for some well known packages.  I decided to start with rpart which is defined as:</p>

<pre><code>rpart &lt;- function(formula, data, weights, subset,
       na.action=na.rpart, method, model=FALSE, x=FALSE, y=TRUE,
       parms, control, cost, ...)
</code></pre>

<p>I did a quick search through the source and I don't see formula mentioned anywhere in the function body yet I know that somehow rpart is using that parameter.  How is it that rpart is using formula without its name being in the function body?</p>
","How can a function parameter be used without mentioning it in the function body? <p>I've been trying to learn more about R (and writing C extensions) and I thought it might help to read the source for some well known packages.  I decided to start with rpart which is defined as:</p>

<pre><code>rpart &lt;- function(formula, data, weights, subset,
       na.action=na.rpart, method, model=FALSE, x=FALSE, y=TRUE,
       parms, control, cost, ...)
</code></pre>

<p>I did a quick search through the source and I don't see formula mentioned anywhere in the function body yet I know that somehow rpart is using that parameter.  How is it that rpart is using formula without its name being in the function body?</p>
"
780796,84458,2009-04-23T08:29:19Z,39,Emacs ESS Mode - Tabbing for Comment Region,"<p>I am using the Emacs-Speaks-Statistics (ESS) mode for Emacs.  When editing R code, any comment lines (those starting with #) automatically get tabbed to the far right when I create a new line above it.  How should I change my .emacs.el file to fix this?</p>

<p>For example, I have:</p>

<pre><code># Comment
</code></pre>

<p>Now, after putting my cursor at the beginning of the line and pressing Enter, I get:</p>

<pre><code>                                # Comment
</code></pre>

<p>Thanks for any hints.</p>
","Emacs ESS Mode - Tabbing for Comment Region <p>I am using the Emacs-Speaks-Statistics (ESS) mode for Emacs.  When editing R code, any comment lines (those starting with #) automatically get tabbed to the far right when I create a new line above it.  How should I change my .emacs.el file to fix this?</p>

<p>For example, I have:</p>

<pre><code># Comment
</code></pre>

<p>Now, after putting my cursor at the beginning of the line and pressing Enter, I get:</p>

<pre><code>                                # Comment
</code></pre>

<p>Thanks for any hints.</p>
"
789602,94704,2009-04-25T19:51:45Z,2,What does %% mean?,"<p>From the question you can probably tell that I don't know much about code! My question is this:</p>

<p>What does this code mean?</p>

<pre><code>mnlong &lt;- 280.460 + .9856474 * time
mnlong &lt;- mnlong %% 360
mnlong[mnlong &lt; 0] &lt;- mnlong[mnlong &lt; 0] + 360
</code></pre>

<p>I understand that the <code>mnlong</code> and <code>time</code> are variables but the <code>%%</code> confuses me.</p>

<p>Could someone give me a basic description?</p>
","What does %% mean? <p>From the question you can probably tell that I don't know much about code! My question is this:</p>

<p>What does this code mean?</p>

<pre><code>mnlong &lt;- 280.460 + .9856474 * time
mnlong &lt;- mnlong %% 360
mnlong[mnlong &lt; 0] &lt;- mnlong[mnlong &lt; 0] + 360
</code></pre>

<p>I understand that the <code>mnlong</code> and <code>time</code> are variables but the <code>%%</code> confuses me.</p>

<p>Could someone give me a basic description?</p>
"
805027,85950,2009-04-30T01:32:43Z,4,Suppressing or setting CreationDate/ModDate in R pdf output,"<p>When R creates PDFs using pdf() it includes a CreationDate and a ModDate in the PDF.  I have a number of such generated PDFs in an svn repository and the effect is that when figures are remade by R, even with the same data, they appear as modified (rightly so) to svn.  What's the best way to get the two to play nicely together?</p>

<p>I could simply remove those lines from the PDFs outside of R, but this extra step is undesirable.<br>
I could set the system time to some fixed value as part of the running the scripts, but this is even less desirable.<br>
I could probably even convince svn to use a specialized diff which ignored changes on those lines, but that sounds like more trouble than it's worth.</p>

<p>A very pleasant solution would be if there were a way to prevent R putting those lines in the PDF file in the first place.  I have a file system to tell me when files were created and modified thank-you-very-much, I don't need that info stored within the file as well.</p>
","Suppressing or setting CreationDate/ModDate in R pdf output <p>When R creates PDFs using pdf() it includes a CreationDate and a ModDate in the PDF.  I have a number of such generated PDFs in an svn repository and the effect is that when figures are remade by R, even with the same data, they appear as modified (rightly so) to svn.  What's the best way to get the two to play nicely together?</p>

<p>I could simply remove those lines from the PDFs outside of R, but this extra step is undesirable.<br>
I could set the system time to some fixed value as part of the running the scripts, but this is even less desirable.<br>
I could probably even convince svn to use a specialized diff which ignored changes on those lines, but that sounds like more trouble than it's worth.</p>

<p>A very pleasant solution would be if there were a way to prevent R putting those lines in the PDF file in the first place.  I have a file system to tell me when files were created and modified thank-you-very-much, I don't need that info stored within the file as well.</p>
"
855798,1811,2009-05-13T02:34:55Z,0,"In R, what is a good way to aggregate String data","<p>In R (or S-PLUS), what is a good way to aggregate String data in a data frame?</p>

<p>Consider the following:</p>

<pre><code>myList &lt;- as.data.frame(c(""Bob"", ""Mary"", ""Bob"", ""Bob"", ""Joe""))
</code></pre>

<p>I would like the output to be:</p>

<pre><code> [Bob,  3
  Mary, 1
  Joe,  1]
</code></pre>

<p>Currently, the only way I know how to do this is with the summary function.</p>

<pre><code>&gt; summary(as.data.frame(myList))

 Bob :3                                
 Joe :1                                
 Mary:1      
</code></pre>

<p>This feels like a hack. Can anyone suggest a better way?</p>
","In R, what is a good way to aggregate String data <p>In R (or S-PLUS), what is a good way to aggregate String data in a data frame?</p>

<p>Consider the following:</p>

<pre><code>myList &lt;- as.data.frame(c(""Bob"", ""Mary"", ""Bob"", ""Bob"", ""Joe""))
</code></pre>

<p>I would like the output to be:</p>

<pre><code> [Bob,  3
  Mary, 1
  Joe,  1]
</code></pre>

<p>Currently, the only way I know how to do this is with the summary function.</p>

<pre><code>&gt; summary(as.data.frame(myList))

 Bob :3                                
 Joe :1                                
 Mary:1      
</code></pre>

<p>This feels like a hack. Can anyone suggest a better way?</p>
"
876711,422,2009-05-18T08:16:10Z,18,Plotting Simple Data in R,"<p>I have a comma separated file named <code>foo.csv</code> containing the following data:</p>

<pre><code>scale, serial, spawn, for, worker
5, 0.000178, 0.000288, 0.000292, 0.000300
10, 0.156986, 0.297926, 0.064509, 0.066297
12, 2.658998, 6.059502, 0.912733, 0.923606
15, 188.023411, 719.463264, 164.111459, 161.687982
</code></pre>

<p>I essentially have two questions:</p>

<p>1) How do I plot the first column (x-axis) versus the second column (y-axis)? I'm trying this (from reading <a href=""http://www.ats.ucla.edu/stat/R/gbe/scatter.htm"" rel=""noreferrer"">this site</a>):</p>

<pre><code>data &lt;- read.table(""foo.csv"", header=T,sep="","")
attach(data)
scale &lt;- data[1]
serial &lt;- data[2]
plot(scale,serial)
</code></pre>

<p>But I get this error back:</p>

<pre><code>Error in stripchart.default(x1, ...) : invalid plotting method
</code></pre>

<p>Any idea what I'm doing wrong? A <a href=""http://www.nabble.com/Problems-producing-a-simple-plot-td23347296.html"" rel=""noreferrer"">quick Google search</a> reveals someone else with the same problem but no relevant answer. UPDATE: It turns out it works fine if I skip the two assignment statements in the middle. Any idea why this is?</p>

<p>The second question follows pretty easily after the first:</p>

<p>2) How do I plot the first column (x-axis) versus all the other columns on the y-axis? I presume it's pretty easy once I get around the first problem I'm running into, but am just a bit new to R so I'm still wrapping my head around it.</p>
","Plotting Simple Data in R <p>I have a comma separated file named <code>foo.csv</code> containing the following data:</p>

<pre><code>scale, serial, spawn, for, worker
5, 0.000178, 0.000288, 0.000292, 0.000300
10, 0.156986, 0.297926, 0.064509, 0.066297
12, 2.658998, 6.059502, 0.912733, 0.923606
15, 188.023411, 719.463264, 164.111459, 161.687982
</code></pre>

<p>I essentially have two questions:</p>

<p>1) How do I plot the first column (x-axis) versus the second column (y-axis)? I'm trying this (from reading <a href=""http://www.ats.ucla.edu/stat/R/gbe/scatter.htm"" rel=""noreferrer"">this site</a>):</p>

<pre><code>data &lt;- read.table(""foo.csv"", header=T,sep="","")
attach(data)
scale &lt;- data[1]
serial &lt;- data[2]
plot(scale,serial)
</code></pre>

<p>But I get this error back:</p>

<pre><code>Error in stripchart.default(x1, ...) : invalid plotting method
</code></pre>

<p>Any idea what I'm doing wrong? A <a href=""http://www.nabble.com/Problems-producing-a-simple-plot-td23347296.html"" rel=""noreferrer"">quick Google search</a> reveals someone else with the same problem but no relevant answer. UPDATE: It turns out it works fine if I skip the two assignment statements in the middle. Any idea why this is?</p>

<p>The second question follows pretty easily after the first:</p>

<p>2) How do I plot the first column (x-axis) versus all the other columns on the y-axis? I presume it's pretty easy once I get around the first problem I'm running into, but am just a bit new to R so I'm still wrapping my head around it.</p>
"
936748,57458,2009-06-01T20:56:30Z,25,Declaring a Const Variable in R,"<p>I'm working in R, and I'd like to define some variables that I (or one of my collaborators) cannot change. In C++ I'd do this:</p>

<pre><code>const std::string path( ""/projects/current"" );
</code></pre>

<p>How do I do this in the R programming language?</p>

<p>Edit for clarity: I know that I can define strings like this in R:</p>

<pre><code>path = ""/projects/current""
</code></pre>

<p>What I really want is a language construct that guarantees that nobody can ever change the value associated with the variable named ""path.""</p>

<p>Edit to respond to comments:</p>

<p>It's technically true that const is a compile-time guarantee, but it would be valid in my mind that the R interpreter would throw stop execution with an error message. For example, look what happens when you try to assign values to a numeric constant:</p>

<pre><code>&gt; 7 = 3
Error in 7 = 3 : invalid (do_set) left-hand side to assignment
</code></pre>

<p>So what I really want is a language feature that allows you to assign values once and only once, and there should be some kind of error when you try to assign a new value to a variabled declared as const. I don't care if the error occurs at run-time, especially if there's no compilation phase. This might not technically be const by the Wikipedia definition, but it's very close. It also looks like this is not possible in the R programming language.</p>
","Declaring a Const Variable in R <p>I'm working in R, and I'd like to define some variables that I (or one of my collaborators) cannot change. In C++ I'd do this:</p>

<pre><code>const std::string path( ""/projects/current"" );
</code></pre>

<p>How do I do this in the R programming language?</p>

<p>Edit for clarity: I know that I can define strings like this in R:</p>

<pre><code>path = ""/projects/current""
</code></pre>

<p>What I really want is a language construct that guarantees that nobody can ever change the value associated with the variable named ""path.""</p>

<p>Edit to respond to comments:</p>

<p>It's technically true that const is a compile-time guarantee, but it would be valid in my mind that the R interpreter would throw stop execution with an error message. For example, look what happens when you try to assign values to a numeric constant:</p>

<pre><code>&gt; 7 = 3
Error in 7 = 3 : invalid (do_set) left-hand side to assignment
</code></pre>

<p>So what I really want is a language feature that allows you to assign values once and only once, and there should be some kind of error when you try to assign a new value to a variabled declared as const. I don't care if the error occurs at run-time, especially if there's no compilation phase. This might not technically be const by the Wikipedia definition, but it's very close. It also looks like this is not possible in the R programming language.</p>
"
937346,58434,2009-06-01T23:52:20Z,3,How to link with static libraries when building an R package,"<p>I'm creating a package that is going to be used by R (the statistical program), I'm not an expert using this application but I have managed to create a very simple package, using the following logic, I have some classes in C++, as the code has to be compiled using the R compiler and it only allows C code, I have a wrapper C code that call the C++ methods, and later I have an R script that call the methods exposed by the C code, so basically is a communication like R &lt;-> C&lt;->C++.</p>

<p>The full tutorial that I used to create this package is found <a href=""http://www.stat.columbia.edu/~gelman/stuff_for_blog/AlanRPackageTutorial.pdf"" rel=""nofollow noreferrer"">here</a>, I add it as a reference.</p>

<p>Now my problem is that I need to add some functionality to the package that I already created, what I need to do is to add code for late binding to a COM object which is another product that I created and that is registered using regasm tool.</p>

<p>This is the c++ code that I'm using to try to late bind to the COM object, I'm trying to use IDispatch to do so:</p>

<pre><code>{
...
CLSID clsid;    
HRESULT hr = CLSIDFromProgID((WCHAR*)""My Com object ProgId"", &clsid);
if(FAILED(hr))                      
  return;   
...     
}
</code></pre>

<p>I didn't paste the whole code because only with these lines the compiler is giving me troubles already, the command I use to compile is </p>

<pre><code>R CMD SHLIB Cclass.cc C++class.cc</code></pre>

<p>Where ""Cclass.cc"" has the C code that call the c++ methods and ""C++class.cc"" is actually the C++ code.</p>

<p>When I compile these classes the compiler says <pre><code>""undefined reference to `CLSIDFromProgID@8'collect2: ld returned 1 exit status""</pre></code></p>

<p>I""m sure I have added all the header files that I need, that's why I believe my problem is that I'm not including ole32.lib and oleaut32.lib which are static libraries.</p>

<p>So, my question is, how can I include this libraries in order to be able to use the methods for late binding, like CLSIDFromProgID(...) or QueryInterface(...). Also if anyone believes that my problem is not linking this libraries, but something else, it would be great if can point me to which my problem may be.</p>

<p>Also have in mind that I need to link with those statics libraries in a way that they can be compiled without problem by the R compiler, which if I'm not wrong is a merely c compiler.</p>
","How to link with static libraries when building an R package <p>I'm creating a package that is going to be used by R (the statistical program), I'm not an expert using this application but I have managed to create a very simple package, using the following logic, I have some classes in C++, as the code has to be compiled using the R compiler and it only allows C code, I have a wrapper C code that call the C++ methods, and later I have an R script that call the methods exposed by the C code, so basically is a communication like R &lt;-> C&lt;->C++.</p>

<p>The full tutorial that I used to create this package is found <a href=""http://www.stat.columbia.edu/~gelman/stuff_for_blog/AlanRPackageTutorial.pdf"" rel=""nofollow noreferrer"">here</a>, I add it as a reference.</p>

<p>Now my problem is that I need to add some functionality to the package that I already created, what I need to do is to add code for late binding to a COM object which is another product that I created and that is registered using regasm tool.</p>

<p>This is the c++ code that I'm using to try to late bind to the COM object, I'm trying to use IDispatch to do so:</p>

<pre><code>{
...
CLSID clsid;    
HRESULT hr = CLSIDFromProgID((WCHAR*)""My Com object ProgId"", &clsid);
if(FAILED(hr))                      
  return;   
...     
}
</code></pre>

<p>I didn't paste the whole code because only with these lines the compiler is giving me troubles already, the command I use to compile is </p>

<pre><code>R CMD SHLIB Cclass.cc C++class.cc</code></pre>

<p>Where ""Cclass.cc"" has the C code that call the c++ methods and ""C++class.cc"" is actually the C++ code.</p>

<p>When I compile these classes the compiler says <pre><code>""undefined reference to `CLSIDFromProgID@8'collect2: ld returned 1 exit status""</pre></code></p>

<p>I""m sure I have added all the header files that I need, that's why I believe my problem is that I'm not including ole32.lib and oleaut32.lib which are static libraries.</p>

<p>So, my question is, how can I include this libraries in order to be able to use the methods for late binding, like CLSIDFromProgID(...) or QueryInterface(...). Also if anyone believes that my problem is not linking this libraries, but something else, it would be great if can point me to which my problem may be.</p>

<p>Also have in mind that I need to link with those statics libraries in a way that they can be compiled without problem by the R compiler, which if I'm not wrong is a merely c compiler.</p>
"
952275,69749,2009-06-04T18:25:55Z,58,Regex group capture in R with multiple capture-groups,"<p>In R, is it possible to extract group capture from a regular expression match?  As far as I can tell, none of <code>grep</code>, <code>grepl</code>, <code>regexpr</code>, <code>gregexpr</code>, <code>sub</code>, or <code>gsub</code> return the group captures.</p>

<p>I need to extract key-value pairs from strings that are encoded thus:</p>

<pre><code>\((.*?) :: (0\.[0-9]+)\)
</code></pre>

<p>I can always just do multiple full-match greps, or do some outside (non-R) processing, but I was hoping I can do it all within R.  Is there's a function or a package that provides such a function to do this?</p>
","Regex group capture in R with multiple capture-groups <p>In R, is it possible to extract group capture from a regular expression match?  As far as I can tell, none of <code>grep</code>, <code>grepl</code>, <code>regexpr</code>, <code>gregexpr</code>, <code>sub</code>, or <code>gsub</code> return the group captures.</p>

<p>I need to extract key-value pairs from strings that are encoded thus:</p>

<pre><code>\((.*?) :: (0\.[0-9]+)\)
</code></pre>

<p>I can always just do multiple full-match greps, or do some outside (non-R) processing, but I was hoping I can do it all within R.  Is there's a function or a package that provides such a function to do this?</p>
"
1007495,23524,2009-06-17T14:44:04Z,3,Determining distribution so I can generate test data,"<p>I've got about 100M value/count pairs in a text file on my Linux machine.  I'd like to figure out what sort of formula I would use to generate more pairs that follow the same distribution.  </p>

<p>From a casual inspection, it looks power law-ish, but I need to be a bit more rigorous than that.  Can R do this easily?  If so, how?  Is there something else that works better?</p>
","Determining distribution so I can generate test data <p>I've got about 100M value/count pairs in a text file on my Linux machine.  I'd like to figure out what sort of formula I would use to generate more pairs that follow the same distribution.  </p>

<p>From a casual inspection, it looks power law-ish, but I need to be a bit more rigorous than that.  Can R do this easily?  If so, how?  Is there something else that works better?</p>
"
1022649,NA,2009-06-20T21:53:56Z,7,Weighted slope one algorithm? (porting from Python to R),"<p>I was reading about the <a href=""http://en.wikipedia.org/wiki/Slope_One#Slope_one_collaborative_filtering_for_rated_resources"" rel=""nofollow noreferrer"">Weighted slope one algorithm</a> ( and more
formally <a href=""http://www.daniel-lemire.com/fr/documents/publications/lemiremaclachlan_sdm05.pdf"" rel=""nofollow noreferrer"">here (PDF)</a>) which is supposed to take item ratings from different users and, given a user vector containing at least 1 rating and 1 missing value, predict the missing ratings.</p>

<p>I found a <a href=""http://www.serpentine.com/wordpress/wp-content/uploads/2006/12/slope_one.py.txt"" rel=""nofollow noreferrer"">Python implementation of the algorithm</a>, but I'm having a hard time porting it to <a href=""http://www.r-project.org/"" rel=""nofollow noreferrer"">R</a> (which I'm more comfortable with). Below is my attempt. Any suggestions on how to make it work?</p>

<p>Thanks in advance, folks.</p>

<pre><code># take a 'training' set, tr.set and a vector with some missing ratings, d
pred=function(tr.set,d) {
    tr.set=rbind(tr.set,d)
    n.items=ncol(tr.set)

    # tally frequencies to use as weights
    freqs=sapply(1:n.items, function(i) {
        unlist(lapply(1:n.items, function(j) {
            sum(!(i==j)&amp;!is.na(tr.set[,i])&amp;!is.na(tr.set[,j])) })) })

    # estimate product-by-product mean differences in ratings
    diffs=array(NA, dim=c(n.items,n.items))
    diffs=sapply(1:n.items, function(i) {
        unlist(lapply(1:n.items, function(j) {
            diffs[j,i]=mean(tr.set[,i]-tr.set[,j],na.rm=T) })) })

    # create an output vector with NAs for all the items the user has already rated
    pred.out=as.numeric(is.na(d))
    pred.out[!is.na(d)]=NA

    a=which(!is.na(pred.out))
    b=which(is.na(pred.out))

    # calculated the weighted slope one estimate
    pred.out[a]=sapply(a, function(i) {
        sum(unlist(lapply(b,function (j) {
            sum((d[j]+diffs[j,i])*freqs[j,i])/rowSums(freqs)[i] }))) })

    names(pred.out)=colnames(tr.set)
    return(pred.out) }
# end function

# test, using example from [3]
alice=c(squid=1.0, octopus=0.2, cuttlefish=0.5, nautilus=NA)
bob=c(squid=1.0, octopus=0.5, cuttlefish=NA, nautilus=0.2)
carole=c(squid=0.2, octopus=1.0, cuttlefish=0.4, nautilus=0.4)
dave=c(squid=NA, octopus=0.4, cuttlefish=0.9, nautilus=0.5)
tr.set2=rbind(alice,bob,carole,dave)
lucy2=c(squid=0.4, octopus=NA, cuttlefish=NA, nautilus=NA)
pred(tr.set2,lucy2)
# not correct
# correct(?): {'nautilus': 0.10, 'octopus': 0.23, 'cuttlefish': 0.25}
</code></pre>
","Weighted slope one algorithm? (porting from Python to R) <p>I was reading about the <a href=""http://en.wikipedia.org/wiki/Slope_One#Slope_one_collaborative_filtering_for_rated_resources"" rel=""nofollow noreferrer"">Weighted slope one algorithm</a> ( and more
formally <a href=""http://www.daniel-lemire.com/fr/documents/publications/lemiremaclachlan_sdm05.pdf"" rel=""nofollow noreferrer"">here (PDF)</a>) which is supposed to take item ratings from different users and, given a user vector containing at least 1 rating and 1 missing value, predict the missing ratings.</p>

<p>I found a <a href=""http://www.serpentine.com/wordpress/wp-content/uploads/2006/12/slope_one.py.txt"" rel=""nofollow noreferrer"">Python implementation of the algorithm</a>, but I'm having a hard time porting it to <a href=""http://www.r-project.org/"" rel=""nofollow noreferrer"">R</a> (which I'm more comfortable with). Below is my attempt. Any suggestions on how to make it work?</p>

<p>Thanks in advance, folks.</p>

<pre><code># take a 'training' set, tr.set and a vector with some missing ratings, d
pred=function(tr.set,d) {
    tr.set=rbind(tr.set,d)
    n.items=ncol(tr.set)

    # tally frequencies to use as weights
    freqs=sapply(1:n.items, function(i) {
        unlist(lapply(1:n.items, function(j) {
            sum(!(i==j)&amp;!is.na(tr.set[,i])&amp;!is.na(tr.set[,j])) })) })

    # estimate product-by-product mean differences in ratings
    diffs=array(NA, dim=c(n.items,n.items))
    diffs=sapply(1:n.items, function(i) {
        unlist(lapply(1:n.items, function(j) {
            diffs[j,i]=mean(tr.set[,i]-tr.set[,j],na.rm=T) })) })

    # create an output vector with NAs for all the items the user has already rated
    pred.out=as.numeric(is.na(d))
    pred.out[!is.na(d)]=NA

    a=which(!is.na(pred.out))
    b=which(is.na(pred.out))

    # calculated the weighted slope one estimate
    pred.out[a]=sapply(a, function(i) {
        sum(unlist(lapply(b,function (j) {
            sum((d[j]+diffs[j,i])*freqs[j,i])/rowSums(freqs)[i] }))) })

    names(pred.out)=colnames(tr.set)
    return(pred.out) }
# end function

# test, using example from [3]
alice=c(squid=1.0, octopus=0.2, cuttlefish=0.5, nautilus=NA)
bob=c(squid=1.0, octopus=0.5, cuttlefish=NA, nautilus=0.2)
carole=c(squid=0.2, octopus=1.0, cuttlefish=0.4, nautilus=0.4)
dave=c(squid=NA, octopus=0.4, cuttlefish=0.9, nautilus=0.5)
tr.set2=rbind(alice,bob,carole,dave)
lucy2=c(squid=0.4, octopus=NA, cuttlefish=NA, nautilus=NA)
pred(tr.set2,lucy2)
# not correct
# correct(?): {'nautilus': 0.10, 'octopus': 0.23, 'cuttlefish': 0.25}
</code></pre>
"
1088639,57458,2009-07-06T18:48:46Z,18,Static Variables in R,"<p>I have a function in R that I call multiple times. I want to keep track of the number of times that I've called it and use that to make decisions on what to do inside of the function. Here's what I have right now:</p>

<pre><code>f = function( x ) {
   count &lt;&lt;- count + 1
   return( mean(x) )
}

count = 1
numbers = rnorm( n = 100, mean = 0, sd = 1 )
for ( x in seq(1,100) ) {
   mean = f( numbers )
   print( count )
}
</code></pre>

<p>I don't like that I have to declare the variable count outside the scope of the function. In C or C++ I could just make a static variable. Can I do a similar thing in the R programming language?</p>
","Static Variables in R <p>I have a function in R that I call multiple times. I want to keep track of the number of times that I've called it and use that to make decisions on what to do inside of the function. Here's what I have right now:</p>

<pre><code>f = function( x ) {
   count &lt;&lt;- count + 1
   return( mean(x) )
}

count = 1
numbers = rnorm( n = 100, mean = 0, sd = 1 )
for ( x in seq(1,100) ) {
   mean = f( numbers )
   print( count )
}
</code></pre>

<p>I don't like that I have to declare the variable count outside the scope of the function. In C or C++ I could just make a static variable. Can I do a similar thing in the R programming language?</p>
"
1092506,130633,2009-07-07T13:58:31Z,2,Line functions in R,"<p>I was wondering if it was possible to graph three lines in R using functions. For instance, how could I get the functions:</p>

<pre><code>3x+1 
4x+2
x+1 
</code></pre>

<p>to show up on the same graph in r?</p>
","Line functions in R <p>I was wondering if it was possible to graph three lines in R using functions. For instance, how could I get the functions:</p>

<pre><code>3x+1 
4x+2
x+1 
</code></pre>

<p>to show up on the same graph in r?</p>
"
1098210,84458,2009-07-08T13:51:15Z,2,Emacs and ESS: Using the correct version of R,"<p>I have installed R-2.9.1 and I am using Emacs+ESS. When I start an R process, though, the version of R that gets used by Emacs is 2.6.  I thought maybe Emacs was running R from a weird starting directory.  However, if I select my home directory ESS still starts R 2.6. (Running R at the terminal correctly brings up version 2.9.1.)</p>

<p>How do I add a new ESS process, or change the properties of the current R process, so that I can run my newer version of R?</p>
","Emacs and ESS: Using the correct version of R <p>I have installed R-2.9.1 and I am using Emacs+ESS. When I start an R process, though, the version of R that gets used by Emacs is 2.6.  I thought maybe Emacs was running R from a weird starting directory.  However, if I select my home directory ESS still starts R 2.6. (Running R at the terminal correctly brings up version 2.9.1.)</p>

<p>How do I add a new ESS process, or change the properties of the current R process, so that I can run my newer version of R?</p>
"
1105659,60628,2009-07-09T18:20:00Z,41,How to add variable key/value pair to list object?,"<p>I have two variables, <code>key</code> and <code>value</code>, and I want to add them as a key/value pair to a list:</p>

<pre><code>key = ""width""
value = 32

mylist = list()
mylist$key = value
</code></pre>

<p>The result is this:</p>

<pre><code>mylist
# $key
# [1] 32
</code></pre>

<p>But I would like this instead:</p>

<pre><code>mylist
# $width
# [1] 32
</code></pre>

<p>How can I do this?</p>
","How to add variable key/value pair to list object? <p>I have two variables, <code>key</code> and <code>value</code>, and I want to add them as a key/value pair to a list:</p>

<pre><code>key = ""width""
value = 32

mylist = list()
mylist$key = value
</code></pre>

<p>The result is this:</p>

<pre><code>mylist
# $key
# [1] 32
</code></pre>

<p>But I would like this instead:</p>

<pre><code>mylist
# $width
# [1] 32
</code></pre>

<p>How can I do this?</p>
"
1107605,60628,2009-07-10T03:55:08Z,6,Is there an Emacs mode for Rscript?,"<p>Is there any usable emacs mode for <code>Rscript</code>? </p>

<p>(<code>Rscript</code> is the script front-end for the <a href=""http://www.r-project.org/"" rel=""nofollow noreferrer"">R</a> language.)</p>

<p>If I type this:</p>

<pre><code>#!/usr/bin/Rscript
print(commandArgs(TRUE))
</code></pre>

<p>and do <code>indent</code> in the <a href=""http://ess.r-project.org/"" rel=""nofollow noreferrer"">ESS</a> R-mode it indents the first line like crazy, since it sees it as a comment:</p>

<pre><code>                          #!/usr/bin/Rscript
print(commandArgs(TRUE))
</code></pre>
","Is there an Emacs mode for Rscript? <p>Is there any usable emacs mode for <code>Rscript</code>? </p>

<p>(<code>Rscript</code> is the script front-end for the <a href=""http://www.r-project.org/"" rel=""nofollow noreferrer"">R</a> language.)</p>

<p>If I type this:</p>

<pre><code>#!/usr/bin/Rscript
print(commandArgs(TRUE))
</code></pre>

<p>and do <code>indent</code> in the <a href=""http://ess.r-project.org/"" rel=""nofollow noreferrer"">ESS</a> R-mode it indents the first line like crazy, since it sees it as a comment:</p>

<pre><code>                          #!/usr/bin/Rscript
print(commandArgs(TRUE))
</code></pre>
"
1109017,60628,2009-07-10T11:25:47Z,39,How do you print to stderr in R?,"<p>How do you print to <code>stderr</code> in <code>R</code>?</p>

<p>This would especially useful for scripts written in <code>Rscript</code>.</p>
","How do you print to stderr in R? <p>How do you print to <code>stderr</code> in <code>R</code>?</p>

<p>This would especially useful for scripts written in <code>Rscript</code>.</p>
"
1110363,60628,2009-07-10T15:46:06Z,5,Is there a package to process command line options in R?,"<p>Is there a package to process command-line options in R? </p>

<p>I know <code>commandArgs</code>, but it's too basic. Its result is basically the equivalent to <code>argc</code> and <code>argv</code> in <code>C</code>, but I'd need something on top of that, just like <code>boost::program_options</code> in <code>C++</code>, or <code>GetOptions::Long</code> in <code>perl</code>.</p>

<p>In particular, I'd like to specify in advance what options are allowed and give an error message if the user specifies something else. </p>

<p>The call would be like this (with user options --width=32 --file=foo.txt):</p>

<pre><code>R --vanilla --args --width=32 --file=foo.txt &lt; myscript.R
</code></pre>

<p>or, if <code>Rscript</code> is used:</p>

<pre><code>myscript.R --width=32 --file=foo.txt 
</code></pre>

<p>(Please don't say, ""why don't you write it yourself, it's not that hard"". In other languages you don't have to write it yourself either. :)</p>
","Is there a package to process command line options in R? <p>Is there a package to process command-line options in R? </p>

<p>I know <code>commandArgs</code>, but it's too basic. Its result is basically the equivalent to <code>argc</code> and <code>argv</code> in <code>C</code>, but I'd need something on top of that, just like <code>boost::program_options</code> in <code>C++</code>, or <code>GetOptions::Long</code> in <code>perl</code>.</p>

<p>In particular, I'd like to specify in advance what options are allowed and give an error message if the user specifies something else. </p>

<p>The call would be like this (with user options --width=32 --file=foo.txt):</p>

<pre><code>R --vanilla --args --width=32 --file=foo.txt &lt; myscript.R
</code></pre>

<p>or, if <code>Rscript</code> is used:</p>

<pre><code>myscript.R --width=32 --file=foo.txt 
</code></pre>

<p>(Please don't say, ""why don't you write it yourself, it's not that hard"". In other languages you don't have to write it yourself either. :)</p>
"
1114699,136862,2009-07-11T21:36:42Z,6,Creating an adjacency list from a data.frame,"<p>I have a data.frame with 2 columns: Node A, Node B. Each entry in the frame implies an edge in a graph between node A and B. </p>

<p>There must be a nice one-liner to convert this data.frame into an adjacency list. Any hints?</p>
","Creating an adjacency list from a data.frame <p>I have a data.frame with 2 columns: Node A, Node B. Each entry in the frame implies an edge in a graph between node A and B. </p>

<p>There must be a nice one-liner to convert this data.frame into an adjacency list. Any hints?</p>
"
1125907,130633,2009-07-14T14:46:43Z,3,Moving an R Plot header,"<p>I was trying to create a graph in R Plot and was just wondering if there was any way to move the side header label closer to the graph.</p>

<p>I've made the font smaller and put the label into two lines, but when I put it into two lines the top line falls off the screen and the bottom line is rather far away from the numbered Y-Axis of the graph.  Is there anyway to move the label closer to the y-axis so the whole thing is visible?</p>
","Moving an R Plot header <p>I was trying to create a graph in R Plot and was just wondering if there was any way to move the side header label closer to the graph.</p>

<p>I've made the font smaller and put the label into two lines, but when I put it into two lines the top line falls off the screen and the bottom line is rather far away from the numbered Y-Axis of the graph.  Is there anyway to move the label closer to the y-axis so the whole thing is visible?</p>
"
1133172,130633,2009-07-15T18:41:34Z,5,Can you use R terminal commands on a Mac computer?,"<p>I wrote some code in school to basically bring up different graphs from R and I had wanted to use it on a Mac computer.  </p>

<p>Is there are way to use R terminal commands on a Mac computer and is there a place where I could get more information about these Mac R Terminal commands? Thanks so much!</p>
","Can you use R terminal commands on a Mac computer? <p>I wrote some code in school to basically bring up different graphs from R and I had wanted to use it on a Mac computer.  </p>

<p>Is there are way to use R terminal commands on a Mac computer and is there a place where I could get more information about these Mac R Terminal commands? Thanks so much!</p>
"
1136709,85148,2009-07-16T10:26:36Z,9,Extend my Java application with R?,"<p>I am building an application that I want to have extended with modules that does some nr crunching and I would like to have R for that. What are my best options for extending my Java application with R?</p>
","Extend my Java application with R? <p>I am building an application that I want to have extended with modules that does some nr crunching and I would like to have R for that. What are my best options for extending my Java application with R?</p>
"
1142294,140049,2009-07-17T09:35:57Z,11,How do I plot a classification graph of a SVM in R,"<p>I have an SVM in R and I would now like to plot the classification space for this machine. I have found some examples on the Internet, but I can't seem to make sense of them.</p>

<p>My R script is as follows:</p>

<pre><code>library(e1071)
day_of_week &lt;- c(0,1,2,3,4,5,6)
holiday &lt;- factor( c(T, F, F, F, F, F, T) )
model &lt;- svm(day_of_week, holiday)
plot(model, day_of_week, holiday)
</code></pre>

<p>I cannot get the plot command to work. I would like a graph something like this <a href=""http://bm2.genes.nig.ac.jp/RGM2/R_current/library/e1071/man/images/plot.svm_001.png"" rel=""noreferrer"">http://bm2.genes.nig.ac.jp/RGM2/R_current/library/e1071/man/images/plot.svm_001.png</a> </p>
","How do I plot a classification graph of a SVM in R <p>I have an SVM in R and I would now like to plot the classification space for this machine. I have found some examples on the Internet, but I can't seem to make sense of them.</p>

<p>My R script is as follows:</p>

<pre><code>library(e1071)
day_of_week &lt;- c(0,1,2,3,4,5,6)
holiday &lt;- factor( c(T, F, F, F, F, F, T) )
model &lt;- svm(day_of_week, holiday)
plot(model, day_of_week, holiday)
</code></pre>

<p>I cannot get the plot command to work. I would like a graph something like this <a href=""http://bm2.genes.nig.ac.jp/RGM2/R_current/library/e1071/man/images/plot.svm_001.png"" rel=""noreferrer"">http://bm2.genes.nig.ac.jp/RGM2/R_current/library/e1071/man/images/plot.svm_001.png</a> </p>
"
1154242,130633,2009-07-20T15:25:31Z,106,Getting rid of axis values in R Plot,"<p>I was just wondering if there is a way to get rid of axis values, either the x-axis or y-axis respectively, in an r-plot graph. I know that axes = false will get rid of the entire axis, but I would only like to get rid of the numbering.  Thanks so much!                 </p>
","Getting rid of axis values in R Plot <p>I was just wondering if there is a way to get rid of axis values, either the x-axis or y-axis respectively, in an r-plot graph. I know that axes = false will get rid of the entire axis, but I would only like to get rid of the numbering.  Thanks so much!                 </p>
"
1163640,80458,2009-07-22T07:34:10Z,4,How to reduce size of R plots in EPS format?,"<p>I have a histogram with several hundred items, for which I do a Q-Q plot. This results in EPS that is 2.5 megabytes large. This is too much for a figure that is only going to be included in a publication and is not going to be viewed at 100x magnification.</p>

<p>Is there any option in R to somehow output smaller EPS? I have searched docs to no avail. Or is my best option to, say, rasterize it afterwards at 300 dpi? If that's the case, any recommendations for the tool for this job?</p>

<p>The R code for the plot is nothing fancy:</p>

<pre><code>postscript(filename)
qqnorm(n, main=title))
qqline(n)
dev.off()
</code></pre>

<p>Thanks.</p>

<p>EDIT: Doh! My question mentioned outputting EPS, and then converting it to some raster format. When of course I could just generate PNG in the first place from R. Thanks for all the answers.</p>
","How to reduce size of R plots in EPS format? <p>I have a histogram with several hundred items, for which I do a Q-Q plot. This results in EPS that is 2.5 megabytes large. This is too much for a figure that is only going to be included in a publication and is not going to be viewed at 100x magnification.</p>

<p>Is there any option in R to somehow output smaller EPS? I have searched docs to no avail. Or is my best option to, say, rasterize it afterwards at 300 dpi? If that's the case, any recommendations for the tool for this job?</p>

<p>The R code for the plot is nothing fancy:</p>

<pre><code>postscript(filename)
qqnorm(n, main=title))
qqline(n)
dev.off()
</code></pre>

<p>Thanks.</p>

<p>EDIT: Doh! My question mentioned outputting EPS, and then converting it to some raster format. When of course I could just generate PNG in the first place from R. Thanks for all the answers.</p>
"
1166157,NA,2009-07-22T15:36:30Z,1,Tutorial Using R on an Amazon Ec2 using just browser for building a regression model,"<p>Assume I have huge huge data and no money for hardware for more RAM for R AND software like Windows or any non open source</p>

<p>. Just an internet connection. and an university Amazon ec2 account.</p>

<p>Could you please guide me to a step by step- copy and paste coding tutorial on building a model using any Package on Amazon ec2.</p>

<p>Note- I know BIOCEP can do this, and Robert Grossman gave a tutorial on using R on Amazon Ec2. I just need a tutorial that say uses a R GUI like Rattle to build model on Amazon Ec2.</p>

<p>Assume I am a statistican with no knowledge of Amazon ec2 or using R there</p>
","Tutorial Using R on an Amazon Ec2 using just browser for building a regression model <p>Assume I have huge huge data and no money for hardware for more RAM for R AND software like Windows or any non open source</p>

<p>. Just an internet connection. and an university Amazon ec2 account.</p>

<p>Could you please guide me to a step by step- copy and paste coding tutorial on building a model using any Package on Amazon ec2.</p>

<p>Note- I know BIOCEP can do this, and Robert Grossman gave a tutorial on using R on Amazon Ec2. I just need a tutorial that say uses a R GUI like Rattle to build model on Amazon Ec2.</p>

<p>Assume I am a statistican with no knowledge of Amazon ec2 or using R there</p>
"
1167448,86684,2009-07-22T19:00:09Z,29,Most mature sparse matrix package for R?,"<p>There are at least two sparse matrix packages for R.  I'm looking into these because I'm working with datasets that are too big and sparse to fit in memory with a dense representation.  I want basic linear algebra routines, plus the ability to easily write C code to operate on them.  Which library is the most mature and best to use?</p>

<p>So far I've found</p>

<ul>
<li><a href=""http://cran.r-project.org/web/packages/Matrix"" rel=""noreferrer"">Matrix</a> which has many reverse dependencies, implying it's the most used one.</li>
<li><a href=""http://cran.r-project.org/web/packages/SparseM/index.html"" rel=""noreferrer"">SparseM</a> which doesn't have as many reverse deps.</li>
<li>Various graph libraries probably have their own (implicit) versions of this; e.g. <a href=""http://cran.r-project.org/web/packages/igraph/index.html"" rel=""noreferrer"">igraph</a> and <a href=""http://cran.r-project.org/web/packages/network/index.html"" rel=""noreferrer"">network</a> (the latter is part of <a href=""http://statnetproject.org/"" rel=""noreferrer"">statnet</a>).  These are too specialized for my needs.</li>
</ul>

<p>Anyone have experience with this?</p>

<p>From searching around <a href=""http://rseek.org"" rel=""noreferrer"">RSeek.org</a> a little bit, the <a href=""http://cran.r-project.org/web/packages/Matrix"" rel=""noreferrer"">Matrix</a> package seems the most commonly mentioned one.  I often think of <a href=""http://cran.r-project.org/web/views/"" rel=""noreferrer"">CRAN Task Views</a> as fairly authoritative, and the <a href=""http://cran.r-project.org/web/views/Multivariate.html"" rel=""noreferrer"">Multivariate Task View</a> mentions Matrix and SparseM.</p>
","Most mature sparse matrix package for R? <p>There are at least two sparse matrix packages for R.  I'm looking into these because I'm working with datasets that are too big and sparse to fit in memory with a dense representation.  I want basic linear algebra routines, plus the ability to easily write C code to operate on them.  Which library is the most mature and best to use?</p>

<p>So far I've found</p>

<ul>
<li><a href=""http://cran.r-project.org/web/packages/Matrix"" rel=""noreferrer"">Matrix</a> which has many reverse dependencies, implying it's the most used one.</li>
<li><a href=""http://cran.r-project.org/web/packages/SparseM/index.html"" rel=""noreferrer"">SparseM</a> which doesn't have as many reverse deps.</li>
<li>Various graph libraries probably have their own (implicit) versions of this; e.g. <a href=""http://cran.r-project.org/web/packages/igraph/index.html"" rel=""noreferrer"">igraph</a> and <a href=""http://cran.r-project.org/web/packages/network/index.html"" rel=""noreferrer"">network</a> (the latter is part of <a href=""http://statnetproject.org/"" rel=""noreferrer"">statnet</a>).  These are too specialized for my needs.</li>
</ul>

<p>Anyone have experience with this?</p>

<p>From searching around <a href=""http://rseek.org"" rel=""noreferrer"">RSeek.org</a> a little bit, the <a href=""http://cran.r-project.org/web/packages/Matrix"" rel=""noreferrer"">Matrix</a> package seems the most commonly mentioned one.  I often think of <a href=""http://cran.r-project.org/web/views/"" rel=""noreferrer"">CRAN Task Views</a> as fairly authoritative, and the <a href=""http://cran.r-project.org/web/views/Multivariate.html"" rel=""noreferrer"">Multivariate Task View</a> mentions Matrix and SparseM.</p>
"
1169248,2002705,2009-07-23T02:20:53Z,338,R function for testing if a vector contains a given element,"<p>In R, how do you test a vector to see if it contains a given element?</p>
","R function for testing if a vector contains a given element <p>In R, how do you test a vector to see if it contains a given element?</p>
"
1169330,37751,2009-07-23T02:48:01Z,6,Native vs ODBC database connections with R,"<p>I understand that some databases have native support in R (e.g. MySQL) but you can connect to other DBs like MS SQL Server using RODBC. How much speed improvement does one gain for reading/writing with the native drivers vs. RODBC? What other DBs have native drivers in R? Is reading faster or slower than writing generally?</p>
","Native vs ODBC database connections with R <p>I understand that some databases have native support in R (e.g. MySQL) but you can connect to other DBs like MS SQL Server using RODBC. How much speed improvement does one gain for reading/writing with the native drivers vs. RODBC? What other DBs have native drivers in R? Is reading faster or slower than writing generally?</p>
"
1169373,84458,2009-07-23T03:03:09Z,24,Memory Usage in R,"<p>After creating large objects and running out of RAM, I will try and delete the objects in my current environment using</p>

<pre><code>rm(list=ls())
</code></pre>

<p>When I check my RAM usage, nothing has changed.  Even after calling <code>gc()</code> nothing has changed.  I can only replenish my RAM by quitting R.</p>

<p>Anybody have advice for dealing with memory-intensive objects within R?</p>
","Memory Usage in R <p>After creating large objects and running out of RAM, I will try and delete the objects in my current environment using</p>

<pre><code>rm(list=ls())
</code></pre>

<p>When I check my RAM usage, nothing has changed.  Even after calling <code>gc()</code> nothing has changed.  I can only replenish my RAM by quitting R.</p>

<p>Anybody have advice for dealing with memory-intensive objects within R?</p>
"
1169376,2002705,2009-07-23T03:03:55Z,7,"Cumulative sums, moving averages, and SQL ""group by"" equivalents in R","<p>What's the most efficient way to create a moving average or rolling sum in R? How do you do the rolling function along with a ""group by""?</p>
","Cumulative sums, moving averages, and SQL ""group by"" equivalents in R <p>What's the most efficient way to create a moving average or rolling sum in R? How do you do the rolling function along with a ""group by""?</p>
"
1169388,84458,2009-07-23T03:10:59Z,12,Finding Multiple Elements in a Vector,"<p>Suppose I have the following vector:</p>

<pre><code>&gt; x &lt;- sample(1:10,20,replace=TRUE)
&gt; x
 [1]  8  6  9  9  7  3  2  5  5  1  6  8  5  2  9  3  5 10  8  2
</code></pre>

<p>How can I find which elements are either 8 or 9?</p>
","Finding Multiple Elements in a Vector <p>Suppose I have the following vector:</p>

<pre><code>&gt; x &lt;- sample(1:10,20,replace=TRUE)
&gt; x
 [1]  8  6  9  9  7  3  2  5  5  1  6  8  5  2  9  3  5 10  8  2
</code></pre>

<p>How can I find which elements are either 8 or 9?</p>
"
1169426,84458,2009-07-23T03:24:25Z,10,Manipulating Network Data in R,"<p>I have a data frame detailing edge weights among N nodes.  Is there a package for working with this sort of data?</p>

<p>For example, I would like to plot the following information as a network:</p>

<pre><code>  p1 p2 counts
1  a  b    100
2  a  c    200
3  a  d    100
4  b  c     80
5  b  d     90
6  b  e    100
7  c  d    100
8  c  e     40
9  d  e     60
</code></pre>
","Manipulating Network Data in R <p>I have a data frame detailing edge weights among N nodes.  Is there a package for working with this sort of data?</p>

<p>For example, I would like to plot the following information as a network:</p>

<pre><code>  p1 p2 counts
1  a  b    100
2  a  c    200
3  a  d    100
4  b  c     80
5  b  d     90
6  b  e    100
7  c  d    100
8  c  e     40
9  d  e     60
</code></pre>
"
1169456,135870,2009-07-23T03:33:18Z,337,The difference between [] and [[]] notations for accessing the elements of a list or dataframe,"<p>R provides two different methods for accessing the elements of a list or data.frame- the <code>[]</code> and <code>[[]]</code> operators.</p>

<p>What is the difference between the two? In what situations should I use one over the other?</p>
","The difference between [] and [[]] notations for accessing the elements of a list or dataframe <p>R provides two different methods for accessing the elements of a list or data.frame- the <code>[]</code> and <code>[[]]</code> operators.</p>

<p>What is the difference between the two? In what situations should I use one over the other?</p>
"
1169534,84458,2009-07-23T03:58:10Z,28,"Writing functions in R, keeping scoping in mind","<p>I often write functions that need to see other objects in my environment.  For example:</p>

<pre><code>&gt; a &lt;- 3
&gt; b &lt;- 3
&gt; x &lt;- 1:5
&gt; fn1 &lt;- function(x,a,b) a+b+x
&gt; fn2 &lt;- function(x) a+b+x
&gt; fn1(x,a,b)
[1]  7  8  9 10 11
&gt; fn2(x)
[1]  7  8  9 10 11
</code></pre>

<p>As expected, both these functions are identical because <code>fn2</code> can ""see"" a and b when it executes.  But whenever I start to take advantage of this, within about 30 minutes I end up calling the function without one of the necessary variables (e.g. a or b).  If I don't take advantage of this, then I feel like I am passing around objects unnecessarily.</p>

<p>Is it better to be explicit about what a function requires?  Or should this be taken care of via inline comments or other documentation of the function?  Is there a better way?</p>
","Writing functions in R, keeping scoping in mind <p>I often write functions that need to see other objects in my environment.  For example:</p>

<pre><code>&gt; a &lt;- 3
&gt; b &lt;- 3
&gt; x &lt;- 1:5
&gt; fn1 &lt;- function(x,a,b) a+b+x
&gt; fn2 &lt;- function(x) a+b+x
&gt; fn1(x,a,b)
[1]  7  8  9 10 11
&gt; fn2(x)
[1]  7  8  9 10 11
</code></pre>

<p>As expected, both these functions are identical because <code>fn2</code> can ""see"" a and b when it executes.  But whenever I start to take advantage of this, within about 30 minutes I end up calling the function without one of the necessary variables (e.g. a or b).  If I don't take advantage of this, then I feel like I am passing around objects unnecessarily.</p>

<p>Is it better to be explicit about what a function requires?  Or should this be taken care of via inline comments or other documentation of the function?  Is there a better way?</p>
"
1169539,37751,2009-07-23T04:00:09Z,58,Linear Regression and group by in R,"<p>I want to do a linear regression in R using the <code>lm()</code> function. My data is an annual time series with one field for year (22 years) and another for state (50 states). I want to fit a regression for each state so that at the end I have a vector of lm responses. I can imagine doing for loop for each state then doing the regression inside the loop and adding the results of each regression to a vector. That does not seem very R-like, however. In SAS I would do a 'by' statement and in SQL I would do a 'group by'. What's the R way of doing this?</p>
","Linear Regression and group by in R <p>I want to do a linear regression in R using the <code>lm()</code> function. My data is an annual time series with one field for year (22 years) and another for state (50 states). I want to fit a regression for each state so that at the end I have a vector of lm responses. I can imagine doing for loop for each state then doing the regression inside the loop and adding the results of each regression to a vector. That does not seem very R-like, however. In SAS I would do a 'by' statement and in SQL I would do a 'group by'. What's the R way of doing this?</p>
"
1169551,2002705,2009-07-23T04:04:21Z,12,SQL-like functionality in R,"<p>I am used to writing data manipulation logic in SQL and now that I am learning R I find myself sometimes just wanting to do something that would be simple in SQL but I have to learn a bunch of stuff with R to do the same manipulation on an R data frame. Is there a simple work around? </p>
","SQL-like functionality in R <p>I am used to writing data manipulation logic in SQL and now that I am learning R I find myself sometimes just wanting to do something that would be simple in SQL but I have to learn a bunch of stuff with R to do the same manipulation on an R data frame. Is there a simple work around? </p>
"
1169573,84458,2009-07-23T04:15:08Z,7,Large loops hang in R?,"<p>Suppose I want perform a simulation using the following function:</p>

<pre><code>fn1 &lt;- function(N) {
  res &lt;- c()
  for (i in 1:N) {
    x &lt;- rnorm(2)
    res &lt;- c(res,x[2]-x[1])
  }
  res
}
</code></pre>

<p>For very large <code>N</code>, computation appears to hang.  Are there better ways of doing this?</p>

<p>(Inspired by: <a href=""https://stat.ethz.ch/pipermail/r-help/2008-February/155591.html"" rel=""noreferrer"">https://stat.ethz.ch/pipermail/r-help/2008-February/155591.html</a>)</p>
","Large loops hang in R? <p>Suppose I want perform a simulation using the following function:</p>

<pre><code>fn1 &lt;- function(N) {
  res &lt;- c()
  for (i in 1:N) {
    x &lt;- rnorm(2)
    res &lt;- c(res,x[2]-x[1])
  }
  res
}
</code></pre>

<p>For very large <code>N</code>, computation appears to hang.  Are there better ways of doing this?</p>

<p>(Inspired by: <a href=""https://stat.ethz.ch/pipermail/r-help/2008-February/155591.html"" rel=""noreferrer"">https://stat.ethz.ch/pipermail/r-help/2008-February/155591.html</a>)</p>
"
1172485,143813,2009-07-23T15:15:37Z,51,How to increase the number of columns using R in Linux,"<p>This may seem menial, but it affects my productivity. I am using R in terminal mode on Linux. Unlike the Windows IDE, Linux limits the number of columns to 80, thus making harder the inspection of data sets. Is there a way to set the max number of columns?</p>
","How to increase the number of columns using R in Linux <p>This may seem menial, but it affects my productivity. I am using R in terminal mode on Linux. Unlike the Windows IDE, Linux limits the number of columns to 80, thus making harder the inspection of data sets. Is there a way to set the max number of columns?</p>
"
1174799,23929,2009-07-23T22:17:24Z,86,"How to make execution pause, sleep, wait for X seconds in R?","<p>How do you pause an R script for a specified number of seconds or miliseconds? In many languages, there is a <code>sleep</code> function, but <code>?sleep</code> references a data set. And <code>?pause</code> and <code>?wait</code> don't exist.</p>

<p>The intended purpose is for self-timed animations. The desired solution works without asking for user input.</p>
","How to make execution pause, sleep, wait for X seconds in R? <p>How do you pause an R script for a specified number of seconds or miliseconds? In many languages, there is a <code>sleep</code> function, but <code>?sleep</code> references a data set. And <code>?pause</code> and <code>?wait</code> don't exist.</p>

<p>The intended purpose is for self-timed animations. The desired solution works without asking for user input.</p>
"
1176455,4907,2009-07-24T08:44:49Z,2,Portable use of dyn.load to call a C function in an R package,"<p>I am creating an R package that I intend to submit to CRAN that has a function calling a routine written in C.  How do I load the compiled C routine in the R function in platform-independent way?  I am able to make my package work on my intel-based Mac with:</p>

<pre><code>function(mydata)
{
dyn.load(file.path(.Library,""mypkg/libs/i386"",paste(""mypkg"", .Platform$dynlib.ext, sep=""""))) 
try(
    output &lt;- .C(""myfunc_cversion"",
                 in_data    = as.double(mydata),
                 res_data   = as.double(res),
                 PACKAGE    = ""mypkg"")
    )
    result &lt;- as.matrix(output$res_data)
    return(result)
}
</code></pre>

<p>The problem is the call to dyn.load where I cannot figure out how to specify the full path to the shared library for my installed package in a portable way.</p>

<p>Is there another variable in R besides .Library that I should use, or is there a better function than dyn.load for this case?</p>
","Portable use of dyn.load to call a C function in an R package <p>I am creating an R package that I intend to submit to CRAN that has a function calling a routine written in C.  How do I load the compiled C routine in the R function in platform-independent way?  I am able to make my package work on my intel-based Mac with:</p>

<pre><code>function(mydata)
{
dyn.load(file.path(.Library,""mypkg/libs/i386"",paste(""mypkg"", .Platform$dynlib.ext, sep=""""))) 
try(
    output &lt;- .C(""myfunc_cversion"",
                 in_data    = as.double(mydata),
                 res_data   = as.double(res),
                 PACKAGE    = ""mypkg"")
    )
    result &lt;- as.matrix(output$res_data)
    return(result)
}
</code></pre>

<p>The problem is the call to dyn.load where I cannot figure out how to specify the full path to the shared library for my installed package in a portable way.</p>

<p>Is there another variable in R besides .Library that I should use, or is there a better function than dyn.load for this case?</p>
"
1177919,37751,2009-07-24T14:06:05Z,22,Does column exist and how to rearrange columns in R data frame,"<p>How do I add a column in the middle of an R data frame? I want to see if I have a column named ""LastName"" and then add it as the third column if it does not already exist. </p>
","Does column exist and how to rearrange columns in R data frame <p>How do I add a column in the middle of an R data frame? I want to see if I have a column named ""LastName"" and then add it as the third column if it does not already exist. </p>
"
1177926,37751,2009-07-24T14:07:07Z,86,R object identification,"<p>I am often ending up with a function producing output for which I don't understand the output data type. I'm expecting a list and it ends up being a list of lists or a data frame or something else. What's a good method or workflow for figuring out the output data type when first using a function?</p>
","R object identification <p>I am often ending up with a function producing output for which I don't understand the output data type. I'm expecting a list and it ends up being a list of lists or a data frame or something else. What's a good method or workflow for figuring out the output data type when first using a function?</p>
"
1181021,2002705,2009-07-25T02:32:27Z,6,Determining if a matrix is diagonalizable in the R Programming Language,"<p>I have a matrix and I would like to know if it is diagonalizable. How do I do this in the R programming language? </p>
","Determining if a matrix is diagonalizable in the R Programming Language <p>I have a matrix and I would like to know if it is diagonalizable. How do I do this in the R programming language? </p>
"
1181025,2002705,2009-07-25T02:36:06Z,22,Goodness of fit functions in R,"<p>What functions do you use in R to fit a curve to your data and test how well that curve fits?  What results are considered good?</p>
","Goodness of fit functions in R <p>What functions do you use in R to fit a curve to your data and test how well that curve fits?  What results are considered good?</p>
"
1182932,37751,2009-07-25T20:10:59Z,3,unexpected agrep() results related to max.distance in R,"<p><strong>EDIT:</strong> This bug was found in 32-bit versions of R was fixed in R version 2.9.2.</p>

<hr>

<p>This was tweeted to me by @leoniedu today and I don't have an answer for him so I thought I would post it here. </p>

<p>I have read the documentation for agrep() (fuzzy string matching) and it appears that I don't fully understand the max.distance parameter. Here's an example:</p>

<pre><code>pattern &lt;- ""Staatssekretar im Bundeskanzleramt""
x &lt;- ""Bundeskanzleramt""
agrep(pattern,x,max.distance=18) 
agrep(pattern,x,max.distance=19)
</code></pre>

<p>That behaves exactly like I would expect. There are 18 characters different between the strings so I would expect that to be the threshold of a match. Here's what's confusing me:</p>

<pre><code>agrep(pattern,x,max.distance=30) 
agrep(pattern,x,max.distance=31)
agrep(pattern,x,max.distance=32) 
agrep(pattern,x,max.distance=33)
</code></pre>

<p>Why are 30 and 33 matches, but not 31 and 32? To save you some counting, </p>

<pre><code>&gt; nchar(""Staatssekretar im Bundeskanzleramt"")
[1] 34
&gt; nchar(""Bundeskanzleramt"")
[1] 16
</code></pre>
","unexpected agrep() results related to max.distance in R <p><strong>EDIT:</strong> This bug was found in 32-bit versions of R was fixed in R version 2.9.2.</p>

<hr>

<p>This was tweeted to me by @leoniedu today and I don't have an answer for him so I thought I would post it here. </p>

<p>I have read the documentation for agrep() (fuzzy string matching) and it appears that I don't fully understand the max.distance parameter. Here's an example:</p>

<pre><code>pattern &lt;- ""Staatssekretar im Bundeskanzleramt""
x &lt;- ""Bundeskanzleramt""
agrep(pattern,x,max.distance=18) 
agrep(pattern,x,max.distance=19)
</code></pre>

<p>That behaves exactly like I would expect. There are 18 characters different between the strings so I would expect that to be the threshold of a match. Here's what's confusing me:</p>

<pre><code>agrep(pattern,x,max.distance=30) 
agrep(pattern,x,max.distance=31)
agrep(pattern,x,max.distance=32) 
agrep(pattern,x,max.distance=33)
</code></pre>

<p>Why are 30 and 33 matches, but not 31 and 32? To save you some counting, </p>

<pre><code>&gt; nchar(""Staatssekretar im Bundeskanzleramt"")
[1] 34
&gt; nchar(""Bundeskanzleramt"")
[1] 16
</code></pre>
"
1188544,37751,2009-07-27T14:36:31Z,3,Getting windows to start R in batch mode using the Start command,"<p>I know I must be making a simple syntax mistake, but I want to have a windows batch file that fires up 9 instances of R and runs a different routine in each one. I want these to run simultaneously (i.e. asynchronously). I can fire up 9 command prompt windows and type a command in each one, but it seems like with the START command I should be able to make them start from a single batch file. </p>

<p>Here's an example of how I start one of the instances of R:</p>

<pre><code>""C:\Program Files (x86)\R\R-2.8.1\bin\R"" CMD BATCH ""C:\Users\jd\Documents\mexico\Estado\getdata1.r"" 
</code></pre>

<p>Reading this <a href=""https://stackoverflow.com/questions/72671/how-to-create-batch-file-in-windows-using-start-with-a-path-and-command-with-sp"">previous stackoverflow question</a> along with <a href=""https://stackoverflow.com/questions/154075/using-the-dos-start-command-with-parameters-passed-to-the-started-program"">this previous question</a> makes me think I should be able to do this:</p>

<pre><code>START """" ""C:\Program Files (x86)\R\R-2.8.1\bin\R"" CMD BATCH ""C:\Users\jd\Documents\mexico\Estado\getdata1.r"" /b
</code></pre>

<p>That does not return an error, it just returns a prompt and R never starts. What am I missing?</p>
","Getting windows to start R in batch mode using the Start command <p>I know I must be making a simple syntax mistake, but I want to have a windows batch file that fires up 9 instances of R and runs a different routine in each one. I want these to run simultaneously (i.e. asynchronously). I can fire up 9 command prompt windows and type a command in each one, but it seems like with the START command I should be able to make them start from a single batch file. </p>

<p>Here's an example of how I start one of the instances of R:</p>

<pre><code>""C:\Program Files (x86)\R\R-2.8.1\bin\R"" CMD BATCH ""C:\Users\jd\Documents\mexico\Estado\getdata1.r"" 
</code></pre>

<p>Reading this <a href=""https://stackoverflow.com/questions/72671/how-to-create-batch-file-in-windows-using-start-with-a-path-and-command-with-sp"">previous stackoverflow question</a> along with <a href=""https://stackoverflow.com/questions/154075/using-the-dos-start-command-with-parameters-passed-to-the-started-program"">this previous question</a> makes me think I should be able to do this:</p>

<pre><code>START """" ""C:\Program Files (x86)\R\R-2.8.1\bin\R"" CMD BATCH ""C:\Users\jd\Documents\mexico\Estado\getdata1.r"" /b
</code></pre>

<p>That does not return an error, it just returns a prompt and R never starts. What am I missing?</p>
"
1191689,143813,2009-07-28T02:43:03Z,11,Hierarchical Bayes for R or Python,"<p>Hierarchical Bayes models are commonly used in Marketing, Political Science, and Econometrics. Yet, the only package I know of is <code>bayesm</code>, which is really a companion to a book (<em>Bayesian Statistics and Marketing</em>, by Rossi, et al.) Am I missing something? Is there a software package for R or Python doing the job out there, and/or a worked-out example in the associated language? </p>
","Hierarchical Bayes for R or Python <p>Hierarchical Bayes models are commonly used in Marketing, Political Science, and Econometrics. Yet, the only package I know of is <code>bayesm</code>, which is really a companion to a book (<em>Bayesian Statistics and Marketing</em>, by Rossi, et al.) Am I missing something? Is there a software package for R or Python doing the job out there, and/or a worked-out example in the associated language? </p>
"
1195826,2002705,2009-07-28T18:21:47Z,378,Drop factor levels in a subsetted data frame,"<p>I have a data frame containing a factor.  When I create a subset of this data frame using <code>subset()</code> or another indexing function, a new data frame is created.  However, the factor variable retains all of its original levels -- even when they do not exist in the new data frame.</p>

<p>This creates headaches when doing faceted plotting or using functions that rely on factor levels.</p>

<p>What is the most succinct way to remove levels from a factor in my new data frame?</p>

<p>Here's my example:</p>

<pre><code>df &lt;- data.frame(letters=letters[1:5],
                    numbers=seq(1:5))

levels(df$letters)
## [1] ""a"" ""b"" ""c"" ""d"" ""e""

subdf &lt;- subset(df, numbers &lt;= 3)
##   letters numbers
## 1       a       1
## 2       b       2
## 3       c       3    

## but the levels are still there!
levels(subdf$letters)
## [1] ""a"" ""b"" ""c"" ""d"" ""e""
</code></pre>
","Drop factor levels in a subsetted data frame <p>I have a data frame containing a factor.  When I create a subset of this data frame using <code>subset()</code> or another indexing function, a new data frame is created.  However, the factor variable retains all of its original levels -- even when they do not exist in the new data frame.</p>

<p>This creates headaches when doing faceted plotting or using functions that rely on factor levels.</p>

<p>What is the most succinct way to remove levels from a factor in my new data frame?</p>

<p>Here's my example:</p>

<pre><code>df &lt;- data.frame(letters=letters[1:5],
                    numbers=seq(1:5))

levels(df$letters)
## [1] ""a"" ""b"" ""c"" ""d"" ""e""

subdf &lt;- subset(df, numbers &lt;= 3)
##   letters numbers
## 1       a       1
## 2       b       2
## 3       c       3    

## but the levels are still there!
levels(subdf$letters)
## [1] ""a"" ""b"" ""c"" ""d"" ""e""
</code></pre>
"
1197434,70702,2009-07-29T00:11:37Z,5,Loading data from Excel file into R or Octave,"<p>I have an Excel file with a large set of data. The built-in graphs available in Excel are <em>not</em> enough to analyze these data, so I am thinking about using some tool like octave or R.</p>

<p>I was thinking about some method to load an Excel file directly into octave or R. I searched the web and found that many people have succeeded using by exporting data from Excel into a CSV file.</p>

<p>The question:
Is there a direct way to load an Excel file in R or Octave?</p>
","Loading data from Excel file into R or Octave <p>I have an Excel file with a large set of data. The built-in graphs available in Excel are <em>not</em> enough to analyze these data, so I am thinking about using some tool like octave or R.</p>

<p>I was thinking about some method to load an Excel file directly into octave or R. I searched the web and found that many people have succeeded using by exporting data from Excel into a CSV file.</p>

<p>The question:
Is there a direct way to load an Excel file in R or Octave?</p>
"
1198116,70702,2009-07-29T04:57:48Z,3,"sql command for reading a particular sheet, column ","<p>This is probably a very stupid question for SQL stalwarts, but I just want one SQL command.</p>

<p>Details,</p>

<p>I am using a data analysis tool called R, this tool uses ODBC to read data from XLS. I am now trying to read data from an XLS file. The ODBC tool in R accepts SQL commands.</p>

<p>Question,</p>

<p>Can someone give me an SQL command that will read data from an XLS file's
- Specified sheet
- Specified column [by name]
- Specified row [Specified just by Row Index]</p>

<p>Thanks ... </p>
","sql command for reading a particular sheet, column  <p>This is probably a very stupid question for SQL stalwarts, but I just want one SQL command.</p>

<p>Details,</p>

<p>I am using a data analysis tool called R, this tool uses ODBC to read data from XLS. I am now trying to read data from an XLS file. The ODBC tool in R accepts SQL commands.</p>

<p>Question,</p>

<p>Can someone give me an SQL command that will read data from an XLS file's
- Specified sheet
- Specified column [by name]
- Specified row [Specified just by Row Index]</p>

<p>Thanks ... </p>
"
1203662,NA,2009-07-29T23:36:11Z,2,How to connect to R with Java (using Eclipse),"<p>Very newbie (to Java) question:</p>

<p>I opened an Rserve connection (<a href=""http://www.rforge.net/Rserve/"" rel=""nofollow noreferrer"">http://www.rforge.net/Rserve/</a>) on localhost, and I would like to use the REngine client (src/client/java-new in the Rserve package) to connect to it.</p>

<p>What do I need to do to get the ""RTest.java"" (located in src/client/java-new/Rserve; pasted below) to compile?</p>

<p>I gather that I need to compile the org.rosuda.* libraries. How can I do this using Eclipse 3.5? I tried copying the ""src/client/java-new"" folder into my Java project's ""src"" directory, right clicking in Eclipse -> Build path -> Use as source folder.  But I don't think this is enough to create the ""org.rosuda"" package, because I don't see an ""org/rosuda"" directory structure created anywhere (and those ominous red lines in Eclipse don't disappear). </p>

<p>Anyone done this recently, care to offer a pointer? Thanks plenty.</p>

<pre><code>import org.rosuda.REngine.*;
import org.rosuda.REngine.Rserve.*;

class TestException extends Exception {
    public TestException(String msg) { super(msg); }
}

public class test {
    public static void main(String[] args) {
    try {
        RConnection c = new RConnection();

        System.out.println(""&gt;&gt;""+c.eval(""R.version$version.string"").asString()+""&lt;&lt;"");

        {
            System.out.println(""* Test string and list retrieval"");
            RList l = c.eval(""{d=data.frame(\""huhu\"",c(11:20)); lapply(d,as.character)}"").asList();
            int cols = l.size();
            int rows = l.at(0).length();
            String[][] s = new String[cols][];
            for (int i=0; i&lt;cols; i++) s[i]=l.at(i).asStrings();
            System.out.println(""PASSED"");
        }

        {
        System.out.println(""* Test NA/NaN support in double vectors..."");
        double R_NA = Double.longBitsToDouble(0x7ff00000000007a2L);
        // int R_NA_int = -2147483648; // just for completeness
        double x[] = { 1.0, 0.5, R_NA, Double.NaN, 3.5 };
        c.assign(""x"",x);
        String nas = c.eval(""paste(capture.output(print(x)),collapse='\\n')"").asString();
        System.out.println(nas);
        if (!nas.equals(""[1] 1.0 0.5  NA NaN 3.5""))
            throw new TestException(""NA/NaN assign+retrieve test failed"");
        System.out.println(""PASSED"");
        }

        {
            System.out.println(""* Test assigning of lists and vectors ..."");
            RList l = new RList();
            l.put(""a"",new REXPInteger(new int[] { 0,1,2,3}));
            l.put(""b"",new REXPDouble(new double[] { 0.5,1.2,2.3,3.0}));
            System.out.println(""  assign x=pairlist"");
            c.assign(""x"", new REXPList(l));
            System.out.println(""  assign y=vector"");
            c.assign(""y"", new REXPGenericVector(l));
            System.out.println(""  assign z=data.frame"");
            c.assign(""z"", REXP.createDataFrame(l));
            System.out.println(""  pull all three back to Java"");
            REXP x = c.parseAndEval(""x"");
            System.out.println(""  x = ""+x);
            x = c.eval(""y"");
            System.out.println(""  y = ""+x);
            x = c.eval(""z"");
            System.out.println(""  z = ""+x);
            System.out.println(""PASSED"");
        }
        {
            System.out.println(""* Test support for logicals ... "");
            System.out.println(""  assign b={true,false,true}"");
            c.assign(""b"", new REXPLogical(new boolean[] { true, false, true }));
            REXP x = c.parseAndEval(""b"");
            System.out.println(""  "" + ((x != null) ? x.toDebugString() : ""NULL""));
            if (!x.isLogical() || x.length() != 3)
                throw new TestException(""boolean array assign+retrieve test failed"");
            boolean q[] = ((REXPLogical)x).isTRUE();
            if (q[0] != true || q[1] != false || q[2] != true)
                throw new TestException(""boolean array assign+retrieve test failed (value mismatch)"");
            System.out.println(""  get c(TRUE,FLASE,NA)"");
            x = c.parseAndEval(""c(TRUE,FALSE,NA)"");
            System.out.println(""  "" + ((x != null) ? x.toDebugString() : ""NULL""));
            if (!x.isLogical() || x.length() != 3)
                throw new TestException(""boolean array NA test failed"");
            boolean q1[] = ((REXPLogical)x).isTRUE();
            boolean q2[] = ((REXPLogical)x).isFALSE();
            boolean q3[] = ((REXPLogical)x).isNA();
            if (q1[0] != true || q1[1] != false || q1[2] != false ||
                q2[0] != false || q2[1] != true || q2[2] != false ||
                q3[0] != false || q3[1] != false || q3[2] != true)
                throw new TestException(""boolean array NA test failed (value mismatch)"");
        }

        { // regression: object bit was not set for Java-side generated objects before 0.5-3
            System.out.println(""* Testing functionality of assembled S3 objects ..."");
            // we have already assigned the data.frame in previous test, so we jsut re-use it
            REXP x = c.parseAndEval(""z[2,2]"");
            System.out.println(""  z[2,2] = "" + x);
            if (x == null || x.length() != 1 || x.asDouble() != 1.2)
                throw new TestException(""S3 object bit regression test failed"");
            System.out.println(""PASSED"");
        }

        { // this test does a pull and push of a data frame. It will fail when the S3 test above failed.
            System.out.println(""* Testing pass-though capability for data.frames ..."");
            REXP df = c.parseAndEval(""{data(iris); iris}"");
            c.assign(""df"", df);
            REXP x = c.eval(""identical(df, iris)"");
            System.out.println(""  identical(df, iris) = ""+x);
            if (x == null || !x.isLogical() || x.length() != 1 || !((REXPLogical)x).isTrue()[0])
                throw new TestException(""Pass-through test for a data.frame failed"");
            System.out.println(""PASSED"");
        }

            { // factors
                System.out.println(""* Test support of factors"");
                REXP f = c.parseAndEval(""factor(paste('F',as.integer(runif(20)*5),sep=''))"");
                System.out.println(""  f=""+f);
                System.out.println(""  isFactor: ""+f.isFactor()+"", asFactor: ""+f.asFactor());
                if (!f.isFactor() || f.asFactor() == null) throw new TestException(""factor test failed"");
                System.out.println(""  singe-level factor used to degenerate:"");
                f = c.parseAndEval(""factor('foo')"");
                System.out.println(""  isFactor: ""+f.isFactor()+"", asFactor: ""+f.asFactor());
                if (!f.isFactor() || f.asFactor() == null) throw new TestException(""single factor test failed (not a factor)"");
                if (!f.asFactor().at(0).equals(""foo"")) throw new TestException(""single factor test failed (wrong value)"");
                System.out.println(""  test factors with null elements contents:"");
                c.assign(""f"", new REXPFactor(new RFactor(new String[] { ""foo"", ""bar"", ""foo"", ""foo"", null, ""bar"" })));
                f = c.parseAndEval(""f"");
                if (!f.isFactor() || f.asFactor() == null) throw new TestException(""factor assign-eval test failed (not a factor)"");
                System.out.println(""  f = ""+f.asFactor());
                f = c.parseAndEval(""as.factor(c(1,'a','b',1,'b'))"");
                System.out.println(""  f = ""+f);
                if (!f.isFactor() || f.asFactor() == null) throw new TestException(""factor test failed (not a factor)"");
                System.out.println(""PASSED"");
            }


        {
            System.out.println(""* Lowess test"");
            double x[] = c.eval(""rnorm(100)"").asDoubles();
            double y[] = c.eval(""rnorm(100)"").asDoubles();
            c.assign(""x"", x);
            c.assign(""y"", y);
            RList l = c.parseAndEval(""lowess(x,y)"").asList();
            System.out.println(""  ""+l);
            x = l.at(""x"").asDoubles();
            y = l.at(""y"").asDoubles();
            System.out.println(""PASSED"");
        }

        {
            // multi-line expressions
            System.out.println(""* Test multi-line expressions"");
            if (c.eval(""{ a=1:10\nb=11:20\nmean(b-a) }\n"").asInteger()!=10)
                throw new TestException(""multi-line test failed."");
            System.out.println(""PASSED"");
        }
        {
            System.out.println(""* Matrix tests\n  matrix: create a matrix"");
            int m=100, n=100;
            double[] mat=new double[m*n];
            int i=0;
            while (i&lt;m*n) mat[i++]=i/100;
            System.out.println(""  matrix: assign a matrix"");
            c.assign(""m"", mat);
            c.voidEval(""m&lt;-matrix(m,""+m+"",""+n+"")"");
            System.out.println(""matrix: cross-product"");
            double[][] mr=c.parseAndEval(""crossprod(m,m)"").asDoubleMatrix();
            System.out.println(""PASSED"");
        }

        {
            System.out.println(""* Test serialization and raw vectors"");
            byte[] b = c.eval(""serialize(ls, NULL, ascii=FALSE)"").asBytes();
            System.out.println(""  serialized ls is ""+b.length+"" bytes long"");
            c.assign(""r"", new REXPRaw(b));
            String[] s = c.eval(""unserialize(r)()"").asStrings();
            System.out.println(""  we have ""+s.length+"" items in the workspace"");
            System.out.println(""PASSED"");
        }


        { // string encoding test (will work with Rserve 0.5-3 and higher only)
            System.out.println(""* Test string encoding support ..."");
            String t = ""ã²ã‚‰ãŒãª""; // hiragana (literally, in hiragana ;))
            c.setStringEncoding(""utf8"");
            // -- Just in case the console is not UTF-8 don't display it
            //System.out.println(""  unicode text: ""+t);
            c.assign(""s"", t);
            REXP x = c.parseAndEval(""nchar(s)"");
            System.out.println(""  nchar = "" + x);
            if (x == null || !x.isInteger() || x.asInteger() != 4)
                throw new TestException(""UTF-8 encoding string length test failed"");
            // we cannot really test any other encoding ..
            System.out.println(""PASSED"");
        }

        } catch (RserveException rse) {
        System.out.println(rse);
    } catch (REXPMismatchException mme) {
        System.out.println(mme);
        mme.printStackTrace();
        } catch(TestException te) {
            System.err.println(""** Test failed: ""+te.getMessage());
            te.printStackTrace();
    } catch (Exception e) {
        e.printStackTrace();
    }
    }
}
</code></pre>
","How to connect to R with Java (using Eclipse) <p>Very newbie (to Java) question:</p>

<p>I opened an Rserve connection (<a href=""http://www.rforge.net/Rserve/"" rel=""nofollow noreferrer"">http://www.rforge.net/Rserve/</a>) on localhost, and I would like to use the REngine client (src/client/java-new in the Rserve package) to connect to it.</p>

<p>What do I need to do to get the ""RTest.java"" (located in src/client/java-new/Rserve; pasted below) to compile?</p>

<p>I gather that I need to compile the org.rosuda.* libraries. How can I do this using Eclipse 3.5? I tried copying the ""src/client/java-new"" folder into my Java project's ""src"" directory, right clicking in Eclipse -> Build path -> Use as source folder.  But I don't think this is enough to create the ""org.rosuda"" package, because I don't see an ""org/rosuda"" directory structure created anywhere (and those ominous red lines in Eclipse don't disappear). </p>

<p>Anyone done this recently, care to offer a pointer? Thanks plenty.</p>

<pre><code>import org.rosuda.REngine.*;
import org.rosuda.REngine.Rserve.*;

class TestException extends Exception {
    public TestException(String msg) { super(msg); }
}

public class test {
    public static void main(String[] args) {
    try {
        RConnection c = new RConnection();

        System.out.println(""&gt;&gt;""+c.eval(""R.version$version.string"").asString()+""&lt;&lt;"");

        {
            System.out.println(""* Test string and list retrieval"");
            RList l = c.eval(""{d=data.frame(\""huhu\"",c(11:20)); lapply(d,as.character)}"").asList();
            int cols = l.size();
            int rows = l.at(0).length();
            String[][] s = new String[cols][];
            for (int i=0; i&lt;cols; i++) s[i]=l.at(i).asStrings();
            System.out.println(""PASSED"");
        }

        {
        System.out.println(""* Test NA/NaN support in double vectors..."");
        double R_NA = Double.longBitsToDouble(0x7ff00000000007a2L);
        // int R_NA_int = -2147483648; // just for completeness
        double x[] = { 1.0, 0.5, R_NA, Double.NaN, 3.5 };
        c.assign(""x"",x);
        String nas = c.eval(""paste(capture.output(print(x)),collapse='\\n')"").asString();
        System.out.println(nas);
        if (!nas.equals(""[1] 1.0 0.5  NA NaN 3.5""))
            throw new TestException(""NA/NaN assign+retrieve test failed"");
        System.out.println(""PASSED"");
        }

        {
            System.out.println(""* Test assigning of lists and vectors ..."");
            RList l = new RList();
            l.put(""a"",new REXPInteger(new int[] { 0,1,2,3}));
            l.put(""b"",new REXPDouble(new double[] { 0.5,1.2,2.3,3.0}));
            System.out.println(""  assign x=pairlist"");
            c.assign(""x"", new REXPList(l));
            System.out.println(""  assign y=vector"");
            c.assign(""y"", new REXPGenericVector(l));
            System.out.println(""  assign z=data.frame"");
            c.assign(""z"", REXP.createDataFrame(l));
            System.out.println(""  pull all three back to Java"");
            REXP x = c.parseAndEval(""x"");
            System.out.println(""  x = ""+x);
            x = c.eval(""y"");
            System.out.println(""  y = ""+x);
            x = c.eval(""z"");
            System.out.println(""  z = ""+x);
            System.out.println(""PASSED"");
        }
        {
            System.out.println(""* Test support for logicals ... "");
            System.out.println(""  assign b={true,false,true}"");
            c.assign(""b"", new REXPLogical(new boolean[] { true, false, true }));
            REXP x = c.parseAndEval(""b"");
            System.out.println(""  "" + ((x != null) ? x.toDebugString() : ""NULL""));
            if (!x.isLogical() || x.length() != 3)
                throw new TestException(""boolean array assign+retrieve test failed"");
            boolean q[] = ((REXPLogical)x).isTRUE();
            if (q[0] != true || q[1] != false || q[2] != true)
                throw new TestException(""boolean array assign+retrieve test failed (value mismatch)"");
            System.out.println(""  get c(TRUE,FLASE,NA)"");
            x = c.parseAndEval(""c(TRUE,FALSE,NA)"");
            System.out.println(""  "" + ((x != null) ? x.toDebugString() : ""NULL""));
            if (!x.isLogical() || x.length() != 3)
                throw new TestException(""boolean array NA test failed"");
            boolean q1[] = ((REXPLogical)x).isTRUE();
            boolean q2[] = ((REXPLogical)x).isFALSE();
            boolean q3[] = ((REXPLogical)x).isNA();
            if (q1[0] != true || q1[1] != false || q1[2] != false ||
                q2[0] != false || q2[1] != true || q2[2] != false ||
                q3[0] != false || q3[1] != false || q3[2] != true)
                throw new TestException(""boolean array NA test failed (value mismatch)"");
        }

        { // regression: object bit was not set for Java-side generated objects before 0.5-3
            System.out.println(""* Testing functionality of assembled S3 objects ..."");
            // we have already assigned the data.frame in previous test, so we jsut re-use it
            REXP x = c.parseAndEval(""z[2,2]"");
            System.out.println(""  z[2,2] = "" + x);
            if (x == null || x.length() != 1 || x.asDouble() != 1.2)
                throw new TestException(""S3 object bit regression test failed"");
            System.out.println(""PASSED"");
        }

        { // this test does a pull and push of a data frame. It will fail when the S3 test above failed.
            System.out.println(""* Testing pass-though capability for data.frames ..."");
            REXP df = c.parseAndEval(""{data(iris); iris}"");
            c.assign(""df"", df);
            REXP x = c.eval(""identical(df, iris)"");
            System.out.println(""  identical(df, iris) = ""+x);
            if (x == null || !x.isLogical() || x.length() != 1 || !((REXPLogical)x).isTrue()[0])
                throw new TestException(""Pass-through test for a data.frame failed"");
            System.out.println(""PASSED"");
        }

            { // factors
                System.out.println(""* Test support of factors"");
                REXP f = c.parseAndEval(""factor(paste('F',as.integer(runif(20)*5),sep=''))"");
                System.out.println(""  f=""+f);
                System.out.println(""  isFactor: ""+f.isFactor()+"", asFactor: ""+f.asFactor());
                if (!f.isFactor() || f.asFactor() == null) throw new TestException(""factor test failed"");
                System.out.println(""  singe-level factor used to degenerate:"");
                f = c.parseAndEval(""factor('foo')"");
                System.out.println(""  isFactor: ""+f.isFactor()+"", asFactor: ""+f.asFactor());
                if (!f.isFactor() || f.asFactor() == null) throw new TestException(""single factor test failed (not a factor)"");
                if (!f.asFactor().at(0).equals(""foo"")) throw new TestException(""single factor test failed (wrong value)"");
                System.out.println(""  test factors with null elements contents:"");
                c.assign(""f"", new REXPFactor(new RFactor(new String[] { ""foo"", ""bar"", ""foo"", ""foo"", null, ""bar"" })));
                f = c.parseAndEval(""f"");
                if (!f.isFactor() || f.asFactor() == null) throw new TestException(""factor assign-eval test failed (not a factor)"");
                System.out.println(""  f = ""+f.asFactor());
                f = c.parseAndEval(""as.factor(c(1,'a','b',1,'b'))"");
                System.out.println(""  f = ""+f);
                if (!f.isFactor() || f.asFactor() == null) throw new TestException(""factor test failed (not a factor)"");
                System.out.println(""PASSED"");
            }


        {
            System.out.println(""* Lowess test"");
            double x[] = c.eval(""rnorm(100)"").asDoubles();
            double y[] = c.eval(""rnorm(100)"").asDoubles();
            c.assign(""x"", x);
            c.assign(""y"", y);
            RList l = c.parseAndEval(""lowess(x,y)"").asList();
            System.out.println(""  ""+l);
            x = l.at(""x"").asDoubles();
            y = l.at(""y"").asDoubles();
            System.out.println(""PASSED"");
        }

        {
            // multi-line expressions
            System.out.println(""* Test multi-line expressions"");
            if (c.eval(""{ a=1:10\nb=11:20\nmean(b-a) }\n"").asInteger()!=10)
                throw new TestException(""multi-line test failed."");
            System.out.println(""PASSED"");
        }
        {
            System.out.println(""* Matrix tests\n  matrix: create a matrix"");
            int m=100, n=100;
            double[] mat=new double[m*n];
            int i=0;
            while (i&lt;m*n) mat[i++]=i/100;
            System.out.println(""  matrix: assign a matrix"");
            c.assign(""m"", mat);
            c.voidEval(""m&lt;-matrix(m,""+m+"",""+n+"")"");
            System.out.println(""matrix: cross-product"");
            double[][] mr=c.parseAndEval(""crossprod(m,m)"").asDoubleMatrix();
            System.out.println(""PASSED"");
        }

        {
            System.out.println(""* Test serialization and raw vectors"");
            byte[] b = c.eval(""serialize(ls, NULL, ascii=FALSE)"").asBytes();
            System.out.println(""  serialized ls is ""+b.length+"" bytes long"");
            c.assign(""r"", new REXPRaw(b));
            String[] s = c.eval(""unserialize(r)()"").asStrings();
            System.out.println(""  we have ""+s.length+"" items in the workspace"");
            System.out.println(""PASSED"");
        }


        { // string encoding test (will work with Rserve 0.5-3 and higher only)
            System.out.println(""* Test string encoding support ..."");
            String t = ""ã²ã‚‰ãŒãª""; // hiragana (literally, in hiragana ;))
            c.setStringEncoding(""utf8"");
            // -- Just in case the console is not UTF-8 don't display it
            //System.out.println(""  unicode text: ""+t);
            c.assign(""s"", t);
            REXP x = c.parseAndEval(""nchar(s)"");
            System.out.println(""  nchar = "" + x);
            if (x == null || !x.isInteger() || x.asInteger() != 4)
                throw new TestException(""UTF-8 encoding string length test failed"");
            // we cannot really test any other encoding ..
            System.out.println(""PASSED"");
        }

        } catch (RserveException rse) {
        System.out.println(rse);
    } catch (REXPMismatchException mme) {
        System.out.println(mme);
        mme.printStackTrace();
        } catch(TestException te) {
            System.err.println(""** Test failed: ""+te.getMessage());
            te.printStackTrace();
    } catch (Exception e) {
        e.printStackTrace();
    }
    }
}
</code></pre>
"
1208627,142405,2009-07-30T18:59:05Z,4,Visualizing Data in Java,"<p>is there a good library on the market to visualize big datas in Java. Maybe a library for statistical outputs. I know the programming language R to visualize statistical data in R. I also have seen a solution to connect Java and R. It would be better if a have a pure Java solution. </p>
","Visualizing Data in Java <p>is there a good library on the market to visualize big datas in Java. Maybe a library for statistical outputs. I know the programming language R to visualize statistical data in R. I also have seen a solution to connect Java and R. It would be better if a have a pure Java solution. </p>
"
1213783,143383,2009-07-31T17:17:08Z,5,Using function arguments in update.formula,"<p>I am writing a function that takes two variables and separately regresses each of them on a set of controls expressed as a one-sided formula. Right now I'm using the following to make the formula for one of the regressions, but it feels a bit hacked-up:</p>

<pre><code>foo &lt;- function(x, y, controls) {
    cl &lt;- match.call()
    xn &lt;- cl[[""x""]]
    xf &lt;- as.formula(paste(xn, deparse(controls)))
}
</code></pre>

<p>I'd prefer to do this using <code>update.formula()</code>, but of course <code>update.formula(controls, x ~ .)</code> and <code>update.formula(controls, as.name(x) ~ .)</code> don't work. What should I be doing?</p>
","Using function arguments in update.formula <p>I am writing a function that takes two variables and separately regresses each of them on a set of controls expressed as a one-sided formula. Right now I'm using the following to make the formula for one of the regressions, but it feels a bit hacked-up:</p>

<pre><code>foo &lt;- function(x, y, controls) {
    cl &lt;- match.call()
    xn &lt;- cl[[""x""]]
    xf &lt;- as.formula(paste(xn, deparse(controls)))
}
</code></pre>

<p>I'd prefer to do this using <code>update.formula()</code>, but of course <code>update.formula(controls, x ~ .)</code> and <code>update.formula(controls, as.name(x) ~ .)</code> don't work. What should I be doing?</p>
"
1219480,64253,2009-08-02T18:25:39Z,2,Step-by-Step How-to on Mediation Analysis in R,"<p>I'd like to know if anybody can provide a step-by-step how to on how to use mediation analysis using <a href=""http://imai.princeton.edu/software/mediation.html"" rel=""nofollow noreferrer"">Keele, Tingley, Yamamoto and Imai's mediation package</a>. I think there are two approaches to this - <a href=""http://www.public.asu.edu/~davidpm/classes/psy536/Baron.pdf"" rel=""nofollow noreferrer"">the classic Baron and Kenny (1986)</a> and the new one by <a href=""http://kuscholarworks.ku.edu/dspace/bitstream/1808/1658/1/preacher_rucker_hayes_2007.pdf"" rel=""nofollow noreferrer"">Preacher, Rucker and Hayes (2007)</a> - I'd like to know how to do both approaches in R</p>
","Step-by-Step How-to on Mediation Analysis in R <p>I'd like to know if anybody can provide a step-by-step how to on how to use mediation analysis using <a href=""http://imai.princeton.edu/software/mediation.html"" rel=""nofollow noreferrer"">Keele, Tingley, Yamamoto and Imai's mediation package</a>. I think there are two approaches to this - <a href=""http://www.public.asu.edu/~davidpm/classes/psy536/Baron.pdf"" rel=""nofollow noreferrer"">the classic Baron and Kenny (1986)</a> and the new one by <a href=""http://kuscholarworks.ku.edu/dspace/bitstream/1808/1658/1/preacher_rucker_hayes_2007.pdf"" rel=""nofollow noreferrer"">Preacher, Rucker and Hayes (2007)</a> - I'd like to know how to do both approaches in R</p>
"
1223904,37751,2009-08-03T18:32:05Z,3,Hooking R from within Excel - DCOM? R add in for Excel?,"<p>In the past I have used a DCOM connection to call R functions from Excel and from VBA inside of Excel. I just got a new laptop and have been looking for the install files for the R add in for Excel. I find references to it all over the place but they all point to R (D)COM Server project's home page at <a href=""http://sunsite.univie.ac.at/rcom"" rel=""nofollow noreferrer"">http://sunsite.univie.ac.at/rcom</a>. That URL has been down now for some time. Is there another way to get the same functionality with another method? Is there a new project page? </p>

<p>I've never tried to use the DCOM server without the Excel Add-in. Is that a possibility?</p>
","Hooking R from within Excel - DCOM? R add in for Excel? <p>In the past I have used a DCOM connection to call R functions from Excel and from VBA inside of Excel. I just got a new laptop and have been looking for the install files for the R add in for Excel. I find references to it all over the place but they all point to R (D)COM Server project's home page at <a href=""http://sunsite.univie.ac.at/rcom"" rel=""nofollow noreferrer"">http://sunsite.univie.ac.at/rcom</a>. That URL has been down now for some time. Is there another way to get the same functionality with another method? Is there a new project page? </p>

<p>I've never tried to use the DCOM server without the Excel Add-in. Is that a possibility?</p>
"
1231195,144601,2009-08-05T04:30:49Z,83,Multiline Comment Workarounds?,"<p>I (sort of) already know the answer to this question.  But I figured it is one that gets asked so frequently on the R Users list, that there should be one solid good answer.  <strong>To the best of my knowledge there is no multiline comment functionality in R.  So, does anyone have any good workarounds?</strong></p>

<p>While quite a bit of work in R usually involves interactive sessions (which casts doubt on the need for multiline comments), there are times when I've had to send scripts to colleagues and classmates, much of which involves nontrivial blocks of code.  And for people coming from other languages it is a fairly natural question.  </p>

<p>In the past I've used quotes. Since strings support linebreaks, running an R script with</p>

<pre><code>""
Here's my multiline comment.

""
a &lt;- 10
rocknroll.lm &lt;- lm(blah blah blah)
 ...
</code></pre>

<p>works fine.  Does anyone have a better solution?</p>
","Multiline Comment Workarounds? <p>I (sort of) already know the answer to this question.  But I figured it is one that gets asked so frequently on the R Users list, that there should be one solid good answer.  <strong>To the best of my knowledge there is no multiline comment functionality in R.  So, does anyone have any good workarounds?</strong></p>

<p>While quite a bit of work in R usually involves interactive sessions (which casts doubt on the need for multiline comments), there are times when I've had to send scripts to colleagues and classmates, much of which involves nontrivial blocks of code.  And for people coming from other languages it is a fairly natural question.  </p>

<p>In the past I've used quotes. Since strings support linebreaks, running an R script with</p>

<pre><code>""
Here's my multiline comment.

""
a &lt;- 10
rocknroll.lm &lt;- lm(blah blah blah)
 ...
</code></pre>

<p>works fine.  Does anyone have a better solution?</p>
"
1233948,112882,2009-08-05T15:18:21Z,0,How to set alpha in R?,"<p>I have <a href=""http://rss.acs.unt.edu/Rdoc/library/coin/html/LocationTests.html"" rel=""nofollow noreferrer"">this example</a> from the coin package of R:</p>

<pre><code>  library(coin)
  library(multcomp)
  ### Length of YOY Gizzard Shad from Kokosing Lake, Ohio,
  ### sampled in Summer 1984, Hollander &amp; Wolfe (1999), Table 6.3, page 200
  YOY &lt;- data.frame(length = c(46, 28, 46, 37, 32, 41, 42, 45, 38, 44, 
                               42, 60, 32, 42, 45, 58, 27, 51, 42, 52, 
                               38, 33, 26, 25, 28, 28, 26, 27, 27, 27, 
                               31, 30, 27, 29, 30, 25, 25, 24, 27, 30),
                    site = factor(c(rep(""I"", 10), rep(""II"", 10),
                                    rep(""III"", 10), rep(""IV"", 10))))

  ### Nemenyi-Damico-Wolfe-Dunn test (joint ranking)
  ### Hollander &amp; Wolfe (1999), page 244 
  ### (where Steel-Dwass results are given)
  NDWD &lt;- oneway_test(length ~ site, data = YOY,
      ytrafo = function(data) trafo(data, numeric_trafo = rank),
      xtrafo = function(data) trafo(data, factor_trafo = function(x)
          model.matrix(~x - 1) %*% t(contrMat(table(x), ""Tukey""))),
      teststat = ""max"", distribution = approximate(B = 90000))

  ### global p-value
  print(pvalue(NDWD))

  ### sites (I = II) != (III = IV) at alpha = 0.01 (page 244)
  print(pvalue(NDWD, method = ""single-step""))
</code></pre>

<p>I want to assign alpha a different value, how can I do this??</p>

<p>This doesn't work!</p>

<pre><code>  library(coin)
  library(multcomp)
  ### Length of YOY Gizzard Shad from Kokosing Lake, Ohio,
  ### sampled in Summer 1984, Hollander &amp; Wolfe (1999), Table 6.3, page 200
  YOY &lt;- data.frame(length = c(46, 28, 46, 37, 32, 41, 42, 45, 38, 44, 
                               42, 60, 32, 42, 45, 58, 27, 51, 42, 52, 
                               38, 33, 26, 25, 28, 28, 26, 27, 27, 27, 
                               31, 30, 27, 29, 30, 25, 25, 24, 27, 30),
                    site = factor(c(rep(""I"", 10), rep(""II"", 10),
                                    rep(""III"", 10), rep(""IV"", 10))))

  ### Nemenyi-Damico-Wolfe-Dunn test (joint ranking)
  ### Hollander &amp; Wolfe (1999), page 244 
  ### (where Steel-Dwass results are given)
  NDWD &lt;- oneway_test(length ~ site, data = YOY,
      ytrafo = function(data) trafo(data, numeric_trafo = rank),
      xtrafo = function(data) trafo(data, factor_trafo = function(x)
          model.matrix(~x - 1) %*% t(contrMat(table(x), ""Tukey""))),
      teststat = ""max"", distribution = approximate(B = 90000),
      alpha = 0.05)

  ### global p-value
  print(pvalue(NDWD))

  ### sites (I = II) != (III = IV) at alpha = 0.05 (default was 0.01) (page 244)
  print(pvalue(NDWD, method = ""single-step""))
</code></pre>
","How to set alpha in R? <p>I have <a href=""http://rss.acs.unt.edu/Rdoc/library/coin/html/LocationTests.html"" rel=""nofollow noreferrer"">this example</a> from the coin package of R:</p>

<pre><code>  library(coin)
  library(multcomp)
  ### Length of YOY Gizzard Shad from Kokosing Lake, Ohio,
  ### sampled in Summer 1984, Hollander &amp; Wolfe (1999), Table 6.3, page 200
  YOY &lt;- data.frame(length = c(46, 28, 46, 37, 32, 41, 42, 45, 38, 44, 
                               42, 60, 32, 42, 45, 58, 27, 51, 42, 52, 
                               38, 33, 26, 25, 28, 28, 26, 27, 27, 27, 
                               31, 30, 27, 29, 30, 25, 25, 24, 27, 30),
                    site = factor(c(rep(""I"", 10), rep(""II"", 10),
                                    rep(""III"", 10), rep(""IV"", 10))))

  ### Nemenyi-Damico-Wolfe-Dunn test (joint ranking)
  ### Hollander &amp; Wolfe (1999), page 244 
  ### (where Steel-Dwass results are given)
  NDWD &lt;- oneway_test(length ~ site, data = YOY,
      ytrafo = function(data) trafo(data, numeric_trafo = rank),
      xtrafo = function(data) trafo(data, factor_trafo = function(x)
          model.matrix(~x - 1) %*% t(contrMat(table(x), ""Tukey""))),
      teststat = ""max"", distribution = approximate(B = 90000))

  ### global p-value
  print(pvalue(NDWD))

  ### sites (I = II) != (III = IV) at alpha = 0.01 (page 244)
  print(pvalue(NDWD, method = ""single-step""))
</code></pre>

<p>I want to assign alpha a different value, how can I do this??</p>

<p>This doesn't work!</p>

<pre><code>  library(coin)
  library(multcomp)
  ### Length of YOY Gizzard Shad from Kokosing Lake, Ohio,
  ### sampled in Summer 1984, Hollander &amp; Wolfe (1999), Table 6.3, page 200
  YOY &lt;- data.frame(length = c(46, 28, 46, 37, 32, 41, 42, 45, 38, 44, 
                               42, 60, 32, 42, 45, 58, 27, 51, 42, 52, 
                               38, 33, 26, 25, 28, 28, 26, 27, 27, 27, 
                               31, 30, 27, 29, 30, 25, 25, 24, 27, 30),
                    site = factor(c(rep(""I"", 10), rep(""II"", 10),
                                    rep(""III"", 10), rep(""IV"", 10))))

  ### Nemenyi-Damico-Wolfe-Dunn test (joint ranking)
  ### Hollander &amp; Wolfe (1999), page 244 
  ### (where Steel-Dwass results are given)
  NDWD &lt;- oneway_test(length ~ site, data = YOY,
      ytrafo = function(data) trafo(data, numeric_trafo = rank),
      xtrafo = function(data) trafo(data, factor_trafo = function(x)
          model.matrix(~x - 1) %*% t(contrMat(table(x), ""Tukey""))),
      teststat = ""max"", distribution = approximate(B = 90000),
      alpha = 0.05)

  ### global p-value
  print(pvalue(NDWD))

  ### sites (I = II) != (III = IV) at alpha = 0.05 (default was 0.01) (page 244)
  print(pvalue(NDWD, method = ""single-step""))
</code></pre>
"
1236620,70702,2009-08-06T02:03:00Z,77,Global variables in R,"<p>I am a newbie in R programming. Though I am poking into the manuals, I also wanted to ask the community <strong>""How can we set global variables inside a function?""</strong></p>

<p>Any pointers will help.</p>

<p>Question-2: Regarding plotting,</p>

<p>I am using plotting multiple graphs in a single sheet, and to differentiate each one of them, I want to add title for each one of them. Can anyone tell me how I can achieve this?</p>
","Global variables in R <p>I am a newbie in R programming. Though I am poking into the manuals, I also wanted to ask the community <strong>""How can we set global variables inside a function?""</strong></p>

<p>Any pointers will help.</p>

<p>Question-2: Regarding plotting,</p>

<p>I am using plotting multiple graphs in a single sheet, and to differentiate each one of them, I want to add title for each one of them. Can anyone tell me how I can achieve this?</p>
"
1238250,64253,2009-08-06T11:13:22Z,0,How do you implement Velicer's MAP criterion in R,"<p>I'm looking at the <a href=""http://bm2.genes.nig.ac.jp/RGM2/R_current/library/psych/man/00.psych-package.html"" rel=""nofollow noreferrer"">psych package</a> and the <a href=""http://www.personality-project.org/R/html/VSS.html"" rel=""nofollow noreferrer"">VSS tutorial</a>, do I simply replace VSS with MAP? Like this:</p>

<pre><code>MAP(x, n = 8, rotate = ""varimax"", diagonal = FALSE, fm = ""pa"", n.obs=NULL,plot=TRUE,title=""Very Simple Structure"",...)
</code></pre>

<p>or is there another way to do this?
I've doing factor analysis right now and I'm using the elbow method on a scree plot. I'm trying to see if I can try to use Velicer's MAP criterion also</p>
","How do you implement Velicer's MAP criterion in R <p>I'm looking at the <a href=""http://bm2.genes.nig.ac.jp/RGM2/R_current/library/psych/man/00.psych-package.html"" rel=""nofollow noreferrer"">psych package</a> and the <a href=""http://www.personality-project.org/R/html/VSS.html"" rel=""nofollow noreferrer"">VSS tutorial</a>, do I simply replace VSS with MAP? Like this:</p>

<pre><code>MAP(x, n = 8, rotate = ""varimax"", diagonal = FALSE, fm = ""pa"", n.obs=NULL,plot=TRUE,title=""Very Simple Structure"",...)
</code></pre>

<p>or is there another way to do this?
I've doing factor analysis right now and I'm using the elbow method on a scree plot. I'm trying to see if I can try to use Velicer's MAP criterion also</p>
"
1238933,23929,2009-08-06T13:35:24Z,6,"Should ""while loops"" be preferred to ""for loops"" for large, necessary loops in R?","<p>Realizing that loops are usually not ideal in R, sometimes they are necessary.</p>

<p>When writing large loops, doesn't </p>

<pre><code>for (i in 1:large_number) 
</code></pre>

<p>waste memory, since a vector of size large_number must be created?</p>

<p>Would this make while loops the best choice for large, necessary loops?</p>
","Should ""while loops"" be preferred to ""for loops"" for large, necessary loops in R? <p>Realizing that loops are usually not ideal in R, sometimes they are necessary.</p>

<p>When writing large loops, doesn't </p>

<pre><code>for (i in 1:large_number) 
</code></pre>

<p>waste memory, since a vector of size large_number must be created?</p>

<p>Would this make while loops the best choice for large, necessary loops?</p>
"
1241184,144278,2009-08-06T20:23:56Z,6,Overall Title for Plotting Window,"<p>If I create a plotting window in R with m rows and n columns, how can I give the ""overall"" graphic a main title?</p>

<p>For example, I might have three scatterplots showing the relationship between GPA and SAT score for 3 different schools. How could I give one master title to all three plots, such as, ""SAT score vs. GPA for 3 schools in CA""?</p>
","Overall Title for Plotting Window <p>If I create a plotting window in R with m rows and n columns, how can I give the ""overall"" graphic a main title?</p>

<p>For example, I might have three scatterplots showing the relationship between GPA and SAT score for 3 different schools. How could I give one master title to all three plots, such as, ""SAT score vs. GPA for 3 schools in CA""?</p>
"
1245273,101927,2009-08-07T15:02:34Z,62,Histogram with Logarithmic Scale and custom breaks,"<p>I'm trying to generate a histogram in R with a logarithmic scale for y. Currently I do:</p>

<pre><code>hist(mydata$V3, breaks=c(0,1,2,3,4,5,25))
</code></pre>

<p>This gives me a histogram, but the density between 0 to 1 is so great (about a million values difference) that you can barely make out any of the other bars.</p>

<p>Then I've tried doing:</p>

<pre><code>mydata_hist &lt;- hist(mydata$V3, breaks=c(0,1,2,3,4,5,25), plot=FALSE)
plot(rpd_hist$counts, log=""xy"", pch=20, col=""blue"")
</code></pre>

<p>It gives me sorta what I want, but the bottom shows me the values 1-6 rather than 0, 1, 2, 3, 4, 5, 25.  It's also showing the data as points rather than bars. <code>barplot</code> works but then I don't get any bottom axis.</p>
","Histogram with Logarithmic Scale and custom breaks <p>I'm trying to generate a histogram in R with a logarithmic scale for y. Currently I do:</p>

<pre><code>hist(mydata$V3, breaks=c(0,1,2,3,4,5,25))
</code></pre>

<p>This gives me a histogram, but the density between 0 to 1 is so great (about a million values difference) that you can barely make out any of the other bars.</p>

<p>Then I've tried doing:</p>

<pre><code>mydata_hist &lt;- hist(mydata$V3, breaks=c(0,1,2,3,4,5,25), plot=FALSE)
plot(rpd_hist$counts, log=""xy"", pch=20, col=""blue"")
</code></pre>

<p>It gives me sorta what I want, but the bottom shows me the values 1-6 rather than 0, 1, 2, 3, 4, 5, 25.  It's also showing the data as points rather than bars. <code>barplot</code> works but then I don't get any bottom axis.</p>
"
1246244,37751,2009-08-07T18:14:19Z,9,Applying pnorm to columns of a data frame,"<p>I'm trying to normalize some data which I have in a data frame. I want to take each value and run it through the pnorm function along with the mean and standard deviation of the column the value lives in. Using loops, here's how I would write out what I want to do:</p>

<pre><code>#example data
hist_data &lt;- data.frame( matrix( rnorm( 200,mean=5,sd=.5 ),nrow=20 ) )

n &lt;- dim( hist_data )[2] #columns=10
k &lt;- dim( hist_data )[1] #rows   =20

#set up the data frame which we will populate with a loop
normalized &lt;- data.frame( matrix( nrow = nrow( hist_data ), ncol = ncol( hist_data ) ) )

#hot loop in loop action
for ( i in 1:n ){
   for ( j in 1:k ){
      normalized[j,i] &lt;- pnorm( hist_data[j,i], 
                                mean = mean( hist_data[,i] ), 
                                sd = sd( hist_data[,i] ) )
   }  
}
normalized
</code></pre>

<p>It seems that in R there should be a handy dandy vector way of doing this. I thought I was smart so tried using the apply function:</p>

<pre><code>#trouble ahead
hist_data &lt;- data.frame( matrix( rnorm( 200, mean = 5,sd = .5 ), nrow=10 ) )
normalized &lt;- apply( hist_data, 2, pnorm, mean = mean( hist_data ), sd = sd( hist_data ) )
normalized
</code></pre>

<p>Much to my chagrin, that does NOT produce what I expected. The upper left and bottom right elements of the output are correct, but that's it. So how can I de-loopify my life? </p>

<p>Bonus points if you can tell me what my second code block is actually doing. Kind of a mystery to me still. :)</p>
","Applying pnorm to columns of a data frame <p>I'm trying to normalize some data which I have in a data frame. I want to take each value and run it through the pnorm function along with the mean and standard deviation of the column the value lives in. Using loops, here's how I would write out what I want to do:</p>

<pre><code>#example data
hist_data &lt;- data.frame( matrix( rnorm( 200,mean=5,sd=.5 ),nrow=20 ) )

n &lt;- dim( hist_data )[2] #columns=10
k &lt;- dim( hist_data )[1] #rows   =20

#set up the data frame which we will populate with a loop
normalized &lt;- data.frame( matrix( nrow = nrow( hist_data ), ncol = ncol( hist_data ) ) )

#hot loop in loop action
for ( i in 1:n ){
   for ( j in 1:k ){
      normalized[j,i] &lt;- pnorm( hist_data[j,i], 
                                mean = mean( hist_data[,i] ), 
                                sd = sd( hist_data[,i] ) )
   }  
}
normalized
</code></pre>

<p>It seems that in R there should be a handy dandy vector way of doing this. I thought I was smart so tried using the apply function:</p>

<pre><code>#trouble ahead
hist_data &lt;- data.frame( matrix( rnorm( 200, mean = 5,sd = .5 ), nrow=10 ) )
normalized &lt;- apply( hist_data, 2, pnorm, mean = mean( hist_data ), sd = sd( hist_data ) )
normalized
</code></pre>

<p>Much to my chagrin, that does NOT produce what I expected. The upper left and bottom right elements of the output are correct, but that's it. So how can I de-loopify my life? </p>

<p>Bonus points if you can tell me what my second code block is actually doing. Kind of a mystery to me still. :)</p>
"
1249548,84458,2009-08-08T18:16:43Z,194,Side-by-side plots with ggplot2,"<p>I would like to place two plots side by side using the <a href=""http://crantastic.org/packages/ggplot2"" rel=""noreferrer"">ggplot2 package</a>, i.e. do the equivalent of <code>par(mfrow=c(1,2))</code>.</p>

<p>For example, I would like to have the following two plots show side-by-side with the same scale.</p>

<pre><code>x &lt;- rnorm(100)
eps &lt;- rnorm(100,0,.2)
qplot(x,3*x+eps)
qplot(x,2*x+eps)
</code></pre>

<p>Do I need to put them in the same data.frame?</p>

<pre><code>qplot(displ, hwy, data=mpg, facets = . ~ year) + geom_smooth()
</code></pre>
","Side-by-side plots with ggplot2 <p>I would like to place two plots side by side using the <a href=""http://crantastic.org/packages/ggplot2"" rel=""noreferrer"">ggplot2 package</a>, i.e. do the equivalent of <code>par(mfrow=c(1,2))</code>.</p>

<p>For example, I would like to have the following two plots show side-by-side with the same scale.</p>

<pre><code>x &lt;- rnorm(100)
eps &lt;- rnorm(100,0,.2)
qplot(x,3*x+eps)
qplot(x,2*x+eps)
</code></pre>

<p>Do I need to put them in the same data.frame?</p>

<pre><code>qplot(displ, hwy, data=mpg, facets = . ~ year) + geom_smooth()
</code></pre>
"
1252546,153440,2009-08-09T23:00:23Z,16,How to replace NA (missing values) in a data frame with neighbouring values,"<pre><code>862 2006-05-19 6.241603 5.774208     
863 2006-05-20 NA       NA      
864 2006-05-21 NA       NA      
865 2006-05-22 6.383929 5.906426      
866 2006-05-23 6.782068 6.268758      
867 2006-05-24 6.534616 6.013767      
868 2006-05-25 6.370312 5.856366      
869 2006-05-26 6.225175 5.781617      
870 2006-05-27 NA       NA     
</code></pre>

<p>I have a data frame x like above with some NA, which i want to fill using neighboring non-NA values like for 2006-05-20 it will be avg of 19&amp;22 </p>

<p>How do it is the question?</p>
","How to replace NA (missing values) in a data frame with neighbouring values <pre><code>862 2006-05-19 6.241603 5.774208     
863 2006-05-20 NA       NA      
864 2006-05-21 NA       NA      
865 2006-05-22 6.383929 5.906426      
866 2006-05-23 6.782068 6.268758      
867 2006-05-24 6.534616 6.013767      
868 2006-05-25 6.370312 5.856366      
869 2006-05-26 6.225175 5.781617      
870 2006-05-27 NA       NA     
</code></pre>

<p>I have a data frame x like above with some NA, which i want to fill using neighboring non-NA values like for 2006-05-20 it will be avg of 19&amp;22 </p>

<p>How do it is the question?</p>
"
1256347,138470,2009-08-10T18:08:30Z,9,"Plot time data in R to various resolutions (to the minute, to the hour, to the second, etc.)","<p>I have some data in CSV like:</p>

<pre><code>""Timestamp"", ""Count""
""2009-07-20 16:30:45"", 10
""2009-07-20 16:30:45"", 15
""2009-07-20 16:30:46"", 8
""2009-07-20 16:30:46"", 6
""2009-07-20 16:30:46"", 8
""2009-07-20 16:30:47"", 20
</code></pre>

<p>I can read it into R using read.cvs. I'd like to plot:</p>

<ol>
<li>Number of entries per second, so:

<pre>
""2009-07-20 16:30:45"", 2
""2009-07-20 16:30:46"", 3
""2009-07-20 16:30:47"", 1
</pre></li>
<li>Average value per second:

<pre>
""2009-07-20 16:30:45"", 12.5
""2009-07-20 16:30:46"", 7.333
""2009-07-20 16:30:47"", 20
</pre></li>
<li>Same as 1 &amp; 2 but then by Minute and then by Hour.</li>
</ol>

<p>Is there some way to do this (collect by second/min/etc &amp; plot) in R? </p>
","Plot time data in R to various resolutions (to the minute, to the hour, to the second, etc.) <p>I have some data in CSV like:</p>

<pre><code>""Timestamp"", ""Count""
""2009-07-20 16:30:45"", 10
""2009-07-20 16:30:45"", 15
""2009-07-20 16:30:46"", 8
""2009-07-20 16:30:46"", 6
""2009-07-20 16:30:46"", 8
""2009-07-20 16:30:47"", 20
</code></pre>

<p>I can read it into R using read.cvs. I'd like to plot:</p>

<ol>
<li>Number of entries per second, so:

<pre>
""2009-07-20 16:30:45"", 2
""2009-07-20 16:30:46"", 3
""2009-07-20 16:30:47"", 1
</pre></li>
<li>Average value per second:

<pre>
""2009-07-20 16:30:45"", 12.5
""2009-07-20 16:30:46"", 7.333
""2009-07-20 16:30:47"", 20
</pre></li>
<li>Same as 1 &amp; 2 but then by Minute and then by Hour.</li>
</ol>

<p>Is there some way to do this (collect by second/min/etc &amp; plot) in R? </p>
"
1259867,23929,2009-08-11T11:45:35Z,8,How to do median splits within factor levels in R?,"<p>Here I make a new column to indicate whether myData is above or below its median</p>

<pre><code>### MedianSplits based on Whole Data
#create some test data
myDataFrame=data.frame(myData=runif(15),myFactor=rep(c(""A"",""B"",""C""),5)) 

#create column showing median split
myBreaks= quantile(myDataFrame$myData,c(0,.5,1))
myDataFrame$MedianSplitWholeData = cut(
    myDataFrame$myData,
    breaks=myBreaks, 
    include.lowest=TRUE,
    labels=c(""Below"",""Above""))

#Check if it's correct
myDataFrame$AboveWholeMedian = myDataFrame$myData &gt; median(myDataFrame$myData)
myDataFrame
</code></pre>

<p>Works fine. Now I want to do the same thing, but compute the median splits within each level of myFactor.</p>

<p>I've come up with this:</p>

<pre><code>#Median splits within factor levels
byOutput=by(myDataFrame$myData,myDataFrame$myFactor, function (x) {
     myBreaks= quantile(x,c(0,.5,1))
     MedianSplitByGroup=cut(x,
       breaks=myBreaks, 
       include.lowest=TRUE,
       labels=c(""Below"",""Above""))
     MedianSplitByGroup
     })
</code></pre>

<p>byOutput contains what I want. It categorizes each element of factors A, B, and C correctly. However I'd like to create a new column, myDataFrame$FactorLevelMedianSplit, that shows the newly-computed median split.</p>

<p>How do you convert the output of the ""by"" command into a useful data-frame column?</p>

<p>I think perhaps the ""by"" command is not R-like way to do this ... </p>

<p><strong>Update</strong>:</p>

<p>With Thierry's example of how to use factor() cleverly, and upon discovering the ""ave"" function in Spector's book, I've found this solution, which requires no additional packages.</p>

<pre><code>myDataFrame$MediansByFactor=ave(
    myDataFrame$myData,
    myDataFrame$myFactor,
    FUN=median)

myDataFrame$FactorLevelMedianSplit = factor(
    myDataFrame$myData&gt;myDataFrame$MediansByFactor, 
    levels = c(TRUE, FALSE), 
    labels = c(""Above"", ""Below""))
</code></pre>
","How to do median splits within factor levels in R? <p>Here I make a new column to indicate whether myData is above or below its median</p>

<pre><code>### MedianSplits based on Whole Data
#create some test data
myDataFrame=data.frame(myData=runif(15),myFactor=rep(c(""A"",""B"",""C""),5)) 

#create column showing median split
myBreaks= quantile(myDataFrame$myData,c(0,.5,1))
myDataFrame$MedianSplitWholeData = cut(
    myDataFrame$myData,
    breaks=myBreaks, 
    include.lowest=TRUE,
    labels=c(""Below"",""Above""))

#Check if it's correct
myDataFrame$AboveWholeMedian = myDataFrame$myData &gt; median(myDataFrame$myData)
myDataFrame
</code></pre>

<p>Works fine. Now I want to do the same thing, but compute the median splits within each level of myFactor.</p>

<p>I've come up with this:</p>

<pre><code>#Median splits within factor levels
byOutput=by(myDataFrame$myData,myDataFrame$myFactor, function (x) {
     myBreaks= quantile(x,c(0,.5,1))
     MedianSplitByGroup=cut(x,
       breaks=myBreaks, 
       include.lowest=TRUE,
       labels=c(""Below"",""Above""))
     MedianSplitByGroup
     })
</code></pre>

<p>byOutput contains what I want. It categorizes each element of factors A, B, and C correctly. However I'd like to create a new column, myDataFrame$FactorLevelMedianSplit, that shows the newly-computed median split.</p>

<p>How do you convert the output of the ""by"" command into a useful data-frame column?</p>

<p>I think perhaps the ""by"" command is not R-like way to do this ... </p>

<p><strong>Update</strong>:</p>

<p>With Thierry's example of how to use factor() cleverly, and upon discovering the ""ave"" function in Spector's book, I've found this solution, which requires no additional packages.</p>

<pre><code>myDataFrame$MediansByFactor=ave(
    myDataFrame$myData,
    myDataFrame$myFactor,
    FUN=median)

myDataFrame$FactorLevelMedianSplit = factor(
    myDataFrame$myData&gt;myDataFrame$MediansByFactor, 
    levels = c(TRUE, FALSE), 
    labels = c(""Above"", ""Below""))
</code></pre>
"
1260965,37751,2009-08-11T15:06:53Z,58,Developing Geographic Thematic Maps with R,"<p>There are clearly a number of packages in R for all sorts of spatial analysis. That can by seen in the <a href=""http://cran.r-project.org/web/views/Spatial.html"" rel=""noreferrer"">CRAN Task View: Analysis of Spatial Data</a>. These packages are numerous and diverse, but all I want to do is some simple <a href=""http://images.google.com/images?q=thematic+map&amp;oe=utf-8&amp;rls=org.mozilla:en-US:official&amp;client=firefox-a&amp;um=1&amp;ie=UTF-8&amp;ei=EYiBSqywF5TYNZW8sJ0L&amp;sa=X&amp;oi=image_result_group&amp;ct=title&amp;resnum=4"" rel=""noreferrer"">thematic maps</a>. I have data with county and state FIPS codes and I have ESRI shape files of county and state boundaries and the accompanying FIPS codes which allows joining with the data. The shape files could be easily converted to other formats, if needed. </p>

<p>So what's the most straight forward way to create thematic maps with R? </p>

<p>This map looks like it was created with an ESRI Arc product, but this is the type of thing I would like to do with R:</p>

<p><a href=""http://www.infousagov.com/images/choro.jpg"" rel=""noreferrer"">alt text http://www.infousagov.com/images/choro.jpg</a> Map <a href=""http://www.infousagov.com/thematicmap.asp"" rel=""noreferrer"">copied from here</a>. </p>
","Developing Geographic Thematic Maps with R <p>There are clearly a number of packages in R for all sorts of spatial analysis. That can by seen in the <a href=""http://cran.r-project.org/web/views/Spatial.html"" rel=""noreferrer"">CRAN Task View: Analysis of Spatial Data</a>. These packages are numerous and diverse, but all I want to do is some simple <a href=""http://images.google.com/images?q=thematic+map&amp;oe=utf-8&amp;rls=org.mozilla:en-US:official&amp;client=firefox-a&amp;um=1&amp;ie=UTF-8&amp;ei=EYiBSqywF5TYNZW8sJ0L&amp;sa=X&amp;oi=image_result_group&amp;ct=title&amp;resnum=4"" rel=""noreferrer"">thematic maps</a>. I have data with county and state FIPS codes and I have ESRI shape files of county and state boundaries and the accompanying FIPS codes which allows joining with the data. The shape files could be easily converted to other formats, if needed. </p>

<p>So what's the most straight forward way to create thematic maps with R? </p>

<p>This map looks like it was created with an ESRI Arc product, but this is the type of thing I would like to do with R:</p>

<p><a href=""http://www.infousagov.com/images/choro.jpg"" rel=""noreferrer"">alt text http://www.infousagov.com/images/choro.jpg</a> Map <a href=""http://www.infousagov.com/thematicmap.asp"" rel=""noreferrer"">copied from here</a>. </p>
"
1262911,NA,2009-08-11T21:04:53Z,2,Rows being dropped in R with read.table?,"<p>I am loading a table in which the first column is a URL and reading it into R using <code>read.table()</code>.  </p>

<p>It seems that R is dropping about 1/3 of the columns and does not return any errors.  </p>

<p>The URLs do not contain any <code>#</code> characters or tabs (my separator field), which I understand could be an issue.  If I convert the URLs to integer IDs first, the problem goes away.</p>

<p>Is there something about the field that might be causing R to drop the rows?</p>
","Rows being dropped in R with read.table? <p>I am loading a table in which the first column is a URL and reading it into R using <code>read.table()</code>.  </p>

<p>It seems that R is dropping about 1/3 of the columns and does not return any errors.  </p>

<p>The URLs do not contain any <code>#</code> characters or tabs (my separator field), which I understand could be an issue.  If I convert the URLs to integer IDs first, the problem goes away.</p>

<p>Is there something about the field that might be causing R to drop the rows?</p>
"
1265129,23929,2009-08-12T09:22:08Z,13,How to export the definition of an R object to plain text so that others can recreate it?,"<p>Let's say you have this data in R, and you want to post a question on stackoverflow. For others to best help you, it would be nice if they could have a copy of your object (dataframe, vector, etc) to work with.</p>

<p>Let's say your data is in a data frame called site.data</p>

<pre><code>&gt; site.data
    site year     peak
1  ALBEN    5 101529.6
2  ALBEN   10 117483.4
3  ALBEN   20 132960.9
8  ALDER    5   6561.3
9  ALDER   10   7897.1
10 ALDER   20   9208.1
15 AMERI    5  43656.5
16 AMERI   10  51475.3
17 AMERI   20  58854.4
</code></pre>

<p>How do you package it up so that the users can recreate the data exactly as you have it? </p>

<p>You want to do this without having people download a text file and import it.  </p>

<p>(Note: These data subsetted from an example of the REvolutions blog)</p>
","How to export the definition of an R object to plain text so that others can recreate it? <p>Let's say you have this data in R, and you want to post a question on stackoverflow. For others to best help you, it would be nice if they could have a copy of your object (dataframe, vector, etc) to work with.</p>

<p>Let's say your data is in a data frame called site.data</p>

<pre><code>&gt; site.data
    site year     peak
1  ALBEN    5 101529.6
2  ALBEN   10 117483.4
3  ALBEN   20 132960.9
8  ALDER    5   6561.3
9  ALDER   10   7897.1
10 ALDER   20   9208.1
15 AMERI    5  43656.5
16 AMERI   10  51475.3
17 AMERI   20  58854.4
</code></pre>

<p>How do you package it up so that the users can recreate the data exactly as you have it? </p>

<p>You want to do this without having people download a text file and import it.  </p>

<p>(Note: These data subsetted from an example of the REvolutions blog)</p>
"
1266279,23929,2009-08-12T13:50:45Z,138,How to organize large R programs?,"<p>When I undertake an R project of any complexity, my scripts quickly get long and confusing. </p>

<p>What are some practices I can adopt so that my code will always be a pleasure to work with? I'm thinking about things like</p>

<ul>
<li>Placement of functions in source files</li>
<li>When to break something out to another source file</li>
<li>What should be in the master file</li>
<li>Using functions as organizational units (whether this is worthwhile given that R makes it hard to access global state)</li>
<li>Indentation / line break practices. 

<ul>
<li>Treat ( like {? </li>
<li>Put things like )} on 1 or 2 lines?</li>
</ul></li>
</ul>

<p>Basically, what are your rules of thumb for organizing large R scripts?</p>
","How to organize large R programs? <p>When I undertake an R project of any complexity, my scripts quickly get long and confusing. </p>

<p>What are some practices I can adopt so that my code will always be a pleasure to work with? I'm thinking about things like</p>

<ul>
<li>Placement of functions in source files</li>
<li>When to break something out to another source file</li>
<li>What should be in the master file</li>
<li>Using functions as organizational units (whether this is worthwhile given that R makes it hard to access global state)</li>
<li>Indentation / line break practices. 

<ul>
<li>Treat ( like {? </li>
<li>Put things like )} on 1 or 2 lines?</li>
</ul></li>
</ul>

<p>Basically, what are your rules of thumb for organizing large R scripts?</p>
"
1269624,32978,2009-08-13T01:44:56Z,76,How to get row from R data.frame,"<p>I have a data.frame with column headers. </p>

<p>How can I get a specific row from the data.frame as a list (with the column headers as keys for the list)?</p>

<p>Specifically, my data.frame is </p>

<pre>
      A    B    C
    1 5    4.25 4.5
    2 3.5  4    2.5
    3 3.25 4    4
    4 4.25 4.5  2.25
    5 1.5  4.5  3
</pre>

<p>And I want to get a row that's the equivalent of</p>

<pre><code>&gt; c(a=5, b=4.25, c=4.5)
  a   b   c 
5.0 4.25 4.5 
</code></pre>
","How to get row from R data.frame <p>I have a data.frame with column headers. </p>

<p>How can I get a specific row from the data.frame as a list (with the column headers as keys for the list)?</p>

<p>Specifically, my data.frame is </p>

<pre>
      A    B    C
    1 5    4.25 4.5
    2 3.5  4    2.5
    3 3.25 4    4
    4 4.25 4.5  2.25
    5 1.5  4.5  3
</pre>

<p>And I want to get a row that's the equivalent of</p>

<pre><code>&gt; c(a=5, b=4.25, c=4.5)
  a   b   c 
5.0 4.25 4.5 
</code></pre>
"
1274171,84458,2009-08-13T19:46:34Z,11,Creating (and Accessing) a Sparse Matrix with NA default entries,"<p>After learning about the <a href=""https://stackoverflow.com/questions/1167448/most-mature-sparse-matrix-package-for-r"">options for working with sparse matrices in R</a>, I want to use the <a href=""http://cran.r-project.org/web/packages/Matrix/index.html"" rel=""nofollow noreferrer"">Matrix</a> package to create a sparse matrix from the following data frame and have all other elements be <code>NA</code>.</p>

<pre><code>     s    r d
1 1089 3772 1
2 1109  190 1
3 1109 2460 1
4 1109 3071 2
5 1109 3618 1
6 1109   38 7
</code></pre>

<p>I know I can create a sparse matrix with the following, accessing elements as usual:</p>

<pre><code>&gt; library(Matrix)
&gt; Y &lt;- sparseMatrix(s,r,x=d)
&gt; Y[1089,3772]
[1] 1
&gt; Y[1,1]
[1] 0
</code></pre>

<p>but if I want to have the default value to be NA, I tried the following:</p>

<pre><code>  M &lt;- Matrix(NA,max(s),max(r),sparse=TRUE)
  for (i in 1:nrow(X))
    M[s[i],r[i]] &lt;- d[i]
</code></pre>

<p>and got this error</p>

<pre><code>Error in checkSlotAssignment(object, name, value) : 
  assignment of an object of class ""numeric"" is not valid for slot ""x"" in an object of class ""lgCMatrix""; is(value, ""logical"") is not TRUE
</code></pre>

<p>Not only that, I find that one takes much longer to access to elements.</p>

<pre><code>&gt; system.time(Y[3,3])
   user  system elapsed 
  0.000   0.000   0.003 
&gt; system.time(M[3,3])
   user  system elapsed 
  0.660   0.032   0.995 
</code></pre>

<p>How should I be creating this matrix?  Why is one matrix so much slower to work with?</p>

<p>Here's the code snippet for the above data:</p>

<pre><code>X &lt;- structure(list(s = c(1089, 1109, 1109, 1109, 1109, 1109), r = c(3772, 
190, 2460, 3071, 3618, 38), d = c(1, 1, 1, 2, 1, 7)), .Names = c(""s"", 
""r"", ""d""), row.names = c(NA, 6L), class = ""data.frame"")
</code></pre>
","Creating (and Accessing) a Sparse Matrix with NA default entries <p>After learning about the <a href=""https://stackoverflow.com/questions/1167448/most-mature-sparse-matrix-package-for-r"">options for working with sparse matrices in R</a>, I want to use the <a href=""http://cran.r-project.org/web/packages/Matrix/index.html"" rel=""nofollow noreferrer"">Matrix</a> package to create a sparse matrix from the following data frame and have all other elements be <code>NA</code>.</p>

<pre><code>     s    r d
1 1089 3772 1
2 1109  190 1
3 1109 2460 1
4 1109 3071 2
5 1109 3618 1
6 1109   38 7
</code></pre>

<p>I know I can create a sparse matrix with the following, accessing elements as usual:</p>

<pre><code>&gt; library(Matrix)
&gt; Y &lt;- sparseMatrix(s,r,x=d)
&gt; Y[1089,3772]
[1] 1
&gt; Y[1,1]
[1] 0
</code></pre>

<p>but if I want to have the default value to be NA, I tried the following:</p>

<pre><code>  M &lt;- Matrix(NA,max(s),max(r),sparse=TRUE)
  for (i in 1:nrow(X))
    M[s[i],r[i]] &lt;- d[i]
</code></pre>

<p>and got this error</p>

<pre><code>Error in checkSlotAssignment(object, name, value) : 
  assignment of an object of class ""numeric"" is not valid for slot ""x"" in an object of class ""lgCMatrix""; is(value, ""logical"") is not TRUE
</code></pre>

<p>Not only that, I find that one takes much longer to access to elements.</p>

<pre><code>&gt; system.time(Y[3,3])
   user  system elapsed 
  0.000   0.000   0.003 
&gt; system.time(M[3,3])
   user  system elapsed 
  0.660   0.032   0.995 
</code></pre>

<p>How should I be creating this matrix?  Why is one matrix so much slower to work with?</p>

<p>Here's the code snippet for the above data:</p>

<pre><code>X &lt;- structure(list(s = c(1089, 1109, 1109, 1109, 1109, 1109), r = c(3772, 
190, 2460, 3071, 3618, 38), d = c(1, 1, 1, 2, 1, 7)), .Names = c(""s"", 
""r"", ""d""), row.names = c(NA, 6L), class = ""data.frame"")
</code></pre>
"
1279003,144278,2009-08-14T17:06:15Z,13,Specify Width and Height of Plot,"<p>I have a panel containing three plots. How can I use <code>par</code> to specify the width and height of the main panel so it is always at a fixed size?</p>
","Specify Width and Height of Plot <p>I have a panel containing three plots. How can I use <code>par</code> to specify the width and height of the main panel so it is always at a fixed size?</p>
"
1296646,84458,2009-08-18T21:33:18Z,956,How to sort a dataframe by column(s)?,"<p>I want to sort a data.frame by multiple columns. For example, with the data.frame below I would like to sort by column <code>z</code> (descending) then by column <code>b</code> (ascending): </p>

<pre><code>dd &lt;- data.frame(b = factor(c(""Hi"", ""Med"", ""Hi"", ""Low""), 
      levels = c(""Low"", ""Med"", ""Hi""), ordered = TRUE),
      x = c(""A"", ""D"", ""A"", ""C""), y = c(8, 3, 9, 9),
      z = c(1, 1, 1, 2))
dd
    b x y z
1  Hi A 8 1
2 Med D 3 1
3  Hi A 9 1
4 Low C 9 2
</code></pre>
","How to sort a dataframe by column(s)? <p>I want to sort a data.frame by multiple columns. For example, with the data.frame below I would like to sort by column <code>z</code> (descending) then by column <code>b</code> (ascending): </p>

<pre><code>dd &lt;- data.frame(b = factor(c(""Hi"", ""Med"", ""Hi"", ""Low""), 
      levels = c(""Low"", ""Med"", ""Hi""), ordered = TRUE),
      x = c(""A"", ""D"", ""A"", ""C""), y = c(8, 3, 9, 9),
      z = c(1, 1, 1, 2))
dd
    b x y z
1  Hi A 8 1
2 Med D 3 1
3  Hi A 9 1
4 Low C 9 2
</code></pre>
"
1297698,37751,2009-08-19T03:35:02Z,2,Plotting Regression results from lme4 in R using Lattice (or something else),"<p>I have fit a regression using lme4 thanks to a <a href=""https://stackoverflow.com/questions/1169539/linear-regression-and-group-by-in-r"">previous answer</a>. Now that I have a regression fit for each state I'd like to use lattice to plot QQ plots for each state. I would also like to plot error plots for each state in a lattice format. How do I make a lattice plot using the results of a lme4 regression? </p>

<p>Below is a simple sample (yeah, I like a good alliteration) using two states. I would like to make a two panel lattice made from the object fits. </p>

<pre><code>library(lme4)
d &lt;- data.frame(state=rep(c('NY', 'CA'), c(10, 10)), year=rep(1:10, 2), response=c(rnorm(10), rnorm(10)))
fits &lt;- lmList(response ~ year | state, data=d)
</code></pre>
","Plotting Regression results from lme4 in R using Lattice (or something else) <p>I have fit a regression using lme4 thanks to a <a href=""https://stackoverflow.com/questions/1169539/linear-regression-and-group-by-in-r"">previous answer</a>. Now that I have a regression fit for each state I'd like to use lattice to plot QQ plots for each state. I would also like to plot error plots for each state in a lattice format. How do I make a lattice plot using the results of a lme4 regression? </p>

<p>Below is a simple sample (yeah, I like a good alliteration) using two states. I would like to make a two panel lattice made from the object fits. </p>

<pre><code>library(lme4)
d &lt;- data.frame(state=rep(c('NY', 'CA'), c(10, 10)), year=rep(1:10, 2), response=c(rnorm(10), rnorm(10)))
fits &lt;- lmList(response ~ year | state, data=d)
</code></pre>
"
1299871,23929,2009-08-19T13:18:11Z,771,"How to join (merge) data frames (inner, outer, left, right)?","<p>Given two data frames:</p>

<pre><code>df1 = data.frame(CustomerId = c(1:6), Product = c(rep(""Toaster"", 3), rep(""Radio"", 3)))
df2 = data.frame(CustomerId = c(2, 4, 6), State = c(rep(""Alabama"", 2), rep(""Ohio"", 1)))

df1
#  CustomerId Product
#           1 Toaster
#           2 Toaster
#           3 Toaster
#           4   Radio
#           5   Radio
#           6   Radio

df2
#  CustomerId   State
#           2 Alabama
#           4 Alabama
#           6    Ohio
</code></pre>

<p>How can I do database style, i.e., <a href=""http://en.wikipedia.org/wiki/Join_%28SQL%29"" rel=""noreferrer"">sql style, joins</a>? That is, how do I get:</p>

<ul>
<li>An <a href=""http://en.wikipedia.org/wiki/Join_%28SQL%29#Inner_join"" rel=""noreferrer"">inner join</a> of <code>df1</code> and <code>df2</code>:<br>
Return only the rows in which the left table have matching keys in the right table.</li>
<li>An <a href=""http://en.wikipedia.org/wiki/Join_%28SQL%29#Outer_join"" rel=""noreferrer"">outer join</a> of <code>df1</code> and <code>df2</code>:<br>
Returns all rows from both tables, join records from the left which have matching keys in the right table.</li>
<li>A <a href=""http://en.wikipedia.org/wiki/Join_%28SQL%29#Left_outer_join"" rel=""noreferrer"">left outer join (or simply left join)</a> of <code>df1</code> and <code>df2</code><br>
Return all rows from the left table, and any rows with matching keys from the right table.</li>
<li>A <a href=""http://en.wikipedia.org/wiki/Join_%28SQL%29#Right_outer_join"" rel=""noreferrer"">right outer join</a> of <code>df1</code> and <code>df2</code><br>
Return all rows from the right table, and any rows with matching keys from the left table.</li>
</ul>

<p>Extra credit:</p>

<p>How can I do a SQL style select statement?</p>
","How to join (merge) data frames (inner, outer, left, right)? <p>Given two data frames:</p>

<pre><code>df1 = data.frame(CustomerId = c(1:6), Product = c(rep(""Toaster"", 3), rep(""Radio"", 3)))
df2 = data.frame(CustomerId = c(2, 4, 6), State = c(rep(""Alabama"", 2), rep(""Ohio"", 1)))

df1
#  CustomerId Product
#           1 Toaster
#           2 Toaster
#           3 Toaster
#           4   Radio
#           5   Radio
#           6   Radio

df2
#  CustomerId   State
#           2 Alabama
#           4 Alabama
#           6    Ohio
</code></pre>

<p>How can I do database style, i.e., <a href=""http://en.wikipedia.org/wiki/Join_%28SQL%29"" rel=""noreferrer"">sql style, joins</a>? That is, how do I get:</p>

<ul>
<li>An <a href=""http://en.wikipedia.org/wiki/Join_%28SQL%29#Inner_join"" rel=""noreferrer"">inner join</a> of <code>df1</code> and <code>df2</code>:<br>
Return only the rows in which the left table have matching keys in the right table.</li>
<li>An <a href=""http://en.wikipedia.org/wiki/Join_%28SQL%29#Outer_join"" rel=""noreferrer"">outer join</a> of <code>df1</code> and <code>df2</code>:<br>
Returns all rows from both tables, join records from the left which have matching keys in the right table.</li>
<li>A <a href=""http://en.wikipedia.org/wiki/Join_%28SQL%29#Left_outer_join"" rel=""noreferrer"">left outer join (or simply left join)</a> of <code>df1</code> and <code>df2</code><br>
Return all rows from the left table, and any rows with matching keys from the right table.</li>
<li>A <a href=""http://en.wikipedia.org/wiki/Join_%28SQL%29#Right_outer_join"" rel=""noreferrer"">right outer join</a> of <code>df1</code> and <code>df2</code><br>
Return all rows from the right table, and any rows with matching keys from the left table.</li>
</ul>

<p>Extra credit:</p>

<p>How can I do a SQL style select statement?</p>
"

----------------------------104617940851235207681121
Content-Disposition: form-data; name="file"; filename="Questions-short2.csv"
Content-Type: text/csv

﻿id,OwnerUserId,timestamp,Score,Title,Body,text
77434,14008,2008-09-16T21:40:29Z,171,How to access the last value in a vector?,"<p>Suppose I have a vector that is nested in a dataframe one or two levels.  Is there a quick and dirty way to access the last value, without using the <code>length()</code> function?  Something ala PERL's <code>$#</code> special var?</p>

<p>So I would like something like:</p>

<pre><code>dat$vec1$vec2[$#]
</code></pre>

<p>instead of</p>

<pre><code>dat$vec1$vec2[length(dat$vec1$vec2)]
</code></pre>
","How to access the last value in a vector? <p>Suppose I have a vector that is nested in a dataframe one or two levels.  Is there a quick and dirty way to access the last value, without using the <code>length()</code> function?  Something ala PERL's <code>$#</code> special var?</p>

<p>So I would like something like:</p>

<pre><code>dat$vec1$vec2[$#]
</code></pre>

<p>instead of</p>

<pre><code>dat$vec1$vec2[length(dat$vec1$vec2)]
</code></pre>
"
79709,NA,2008-09-17T03:39:16Z,3,Worse sin: side effects or passing massive objects?,"<p>I have a function inside a loop inside a function. The inner function acquires and stores a large vector of data in memory (as a global variable... I'm using ""R"" which is like ""S-Plus""). The loop loops through a long list of data to be acquired. The outer function starts the process and passes in the list of datasets to be acquired.</p>

<pre><code>for (dataset in list_of_datasets) {
  for (datachunk in dataset) {
    &lt;process datachunk&gt;
    &lt;store result? as vector? where?&gt;
  }
}
</code></pre>

<p>I programmed the inner function to store each dataset before moving to the next, so all the work of the outer function occurs as side effects on global variables... a big no-no. Is this better or worse than collecting and returning a giant, memory-hogging vector of vectors? Is there a superior third approach?</p>

<p>Would the answer change if I were storing the data vectors in a database rather than in memory? Ideally, I'd like to be able to terminate the function (or have it fail due to network timeouts) without losing all the information processed prior to termination.</p>
","Worse sin: side effects or passing massive objects? <p>I have a function inside a loop inside a function. The inner function acquires and stores a large vector of data in memory (as a global variable... I'm using ""R"" which is like ""S-Plus""). The loop loops through a long list of data to be acquired. The outer function starts the process and passes in the list of datasets to be acquired.</p>

<pre><code>for (dataset in list_of_datasets) {
  for (datachunk in dataset) {
    &lt;process datachunk&gt;
    &lt;store result? as vector? where?&gt;
  }
}
</code></pre>

<p>I programmed the inner function to store each dataset before moving to the next, so all the work of the outer function occurs as side effects on global variables... a big no-no. Is this better or worse than collecting and returning a giant, memory-hogging vector of vectors? Is there a superior third approach?</p>

<p>Would the answer change if I were storing the data vectors in a database rather than in memory? Ideally, I'd like to be able to terminate the function (or have it fail due to network timeouts) without losing all the information processed prior to termination.</p>
"
95007,15842,2008-09-18T17:59:19Z,56,Explain the quantile() function in R,"<p>I've been mystified by the R quantile function all day.  </p>

<p>I have an intuitive notion of how quantiles work, and an M.S. in stats, but boy oh boy, the documentation for it is confusing to me.  </p>

<p>From the docs:</p>

<blockquote>
  <p>Q[i](p) = (1 - gamma) x[j] + gamma
  x[j+1],</p>
</blockquote>

<p>I'm with it so far.  For a type <em>i</em> quantile, it's an interpolation between x[j] and x [j+1], based on some mysterious constant <em>gamma</em></p>

<blockquote>
  <p>where 1 &lt;= i &lt;= 9, (j-m)/n &lt;= p &lt;
  (j-m+1)/ n, x[j] is the jth order
  statistic, n is the sample size, and m
  is a constant determined by the sample
  quantile type. Here gamma depends on
  the fractional part of g = np+m-j. </p>
</blockquote>

<p>So, how calculate j?   m?</p>

<blockquote>
  <p>For the continuous sample quantile
  types (4 through 9), the sample
  quantiles can be obtained by linear
  interpolation between the kth order
  statistic and p(k): </p>
  
  <p>p(k) = (k - alpha) / (n - alpha - beta
  + 1),
  where Î± and Î² are constants determined
  by the type. Further, m = alpha + p(1
  - alpha - beta), and gamma = g.</p>
</blockquote>

<p>Now I'm really lost.  p, which was a constant before, is now apparently a function.  </p>

<p>So for Type 7 quantiles, the default...</p>

<blockquote>
  <p>Type 7</p>
  
  <p>p(k) = (k - 1) / (n - 1). In this case, p(k) = mode[F(x[k])]. This is used by S. </p>
</blockquote>

<p>Anyone want to help me out?  In particular I'm confused by the notation of p being a function and a constant, what the heck <em>m</em> is, and now to calculate j for some particular <em>p</em>.  </p>

<p>I hope that based on the answers here, we can submit some revised documentation that better explains what is going on here.  </p>

<p><a href=""https://svn.r-project.org/R/trunk/src/library/stats/R/quantile.R"" rel=""noreferrer"">quantile.R source code</a>
or type:  quantile.default</p>
","Explain the quantile() function in R <p>I've been mystified by the R quantile function all day.  </p>

<p>I have an intuitive notion of how quantiles work, and an M.S. in stats, but boy oh boy, the documentation for it is confusing to me.  </p>

<p>From the docs:</p>

<blockquote>
  <p>Q[i](p) = (1 - gamma) x[j] + gamma
  x[j+1],</p>
</blockquote>

<p>I'm with it so far.  For a type <em>i</em> quantile, it's an interpolation between x[j] and x [j+1], based on some mysterious constant <em>gamma</em></p>

<blockquote>
  <p>where 1 &lt;= i &lt;= 9, (j-m)/n &lt;= p &lt;
  (j-m+1)/ n, x[j] is the jth order
  statistic, n is the sample size, and m
  is a constant determined by the sample
  quantile type. Here gamma depends on
  the fractional part of g = np+m-j. </p>
</blockquote>

<p>So, how calculate j?   m?</p>

<blockquote>
  <p>For the continuous sample quantile
  types (4 through 9), the sample
  quantiles can be obtained by linear
  interpolation between the kth order
  statistic and p(k): </p>
  
  <p>p(k) = (k - alpha) / (n - alpha - beta
  + 1),
  where Î± and Î² are constants determined
  by the type. Further, m = alpha + p(1
  - alpha - beta), and gamma = g.</p>
</blockquote>

<p>Now I'm really lost.  p, which was a constant before, is now apparently a function.  </p>

<p>So for Type 7 quantiles, the default...</p>

<blockquote>
  <p>Type 7</p>
  
  <p>p(k) = (k - 1) / (n - 1). In this case, p(k) = mode[F(x[k])]. This is used by S. </p>
</blockquote>

<p>Anyone want to help me out?  In particular I'm confused by the notation of p being a function and a constant, what the heck <em>m</em> is, and now to calculate j for some particular <em>p</em>.  </p>

<p>I hope that based on the answers here, we can submit some revised documentation that better explains what is going on here.  </p>

<p><a href=""https://svn.r-project.org/R/trunk/src/library/stats/R/quantile.R"" rel=""noreferrer"">quantile.R source code</a>
or type:  quantile.default</p>
"
103312,NA,2008-09-19T16:09:26Z,4,How to test for the EOF flag in R?,"<p>How can I test for the <code>EOF</code> flag in R? </p>

<p>For example:</p>

<pre><code>f &lt;- file(fname, ""rb"")
while (???) {
    a &lt;- readBin(f, ""int"", n=1)
}
</code></pre>
","How to test for the EOF flag in R? <p>How can I test for the <code>EOF</code> flag in R? </p>

<p>For example:</p>

<pre><code>f &lt;- file(fname, ""rb"")
while (???) {
    a &lt;- readBin(f, ""int"", n=1)
}
</code></pre>
"
255697,1941213,2008-11-01T15:48:30Z,4,Is there an R package for learning a Dirichlet prior from counts data,"<p>I'm looking for a an <code>R</code> package which can be used to train a Dirichlet prior from counts data.  I'm asking for a colleague who's using <code>R</code>, and don't use it myself, so I'm not too sure how to look for packages.  It's a bit hard to search for, because ""R"" is such a nonspecific search string.  There doesn't seem to be anything on <a href=""http://cran.r-project.org/web/packages/index.html"" rel=""nofollow noreferrer"">CRAN</a>, but are there any other places to look?</p>
","Is there an R package for learning a Dirichlet prior from counts data <p>I'm looking for a an <code>R</code> package which can be used to train a Dirichlet prior from counts data.  I'm asking for a colleague who's using <code>R</code>, and don't use it myself, so I'm not too sure how to look for packages.  It's a bit hard to search for, because ""R"" is such a nonspecific search string.  There doesn't seem to be anything on <a href=""http://cran.r-project.org/web/packages/index.html"" rel=""nofollow noreferrer"">CRAN</a>, but are there any other places to look?</p>
"
359438,2173,2008-12-11T14:02:06Z,4,Optimization packages for R,"<p>Does anyone know of any optimization packages out there for R (similar to NUOPT for S+)?</p>
","Optimization packages for R <p>Does anyone know of any optimization packages out there for R (similar to NUOPT for S+)?</p>
"
439526,37751,2009-01-13T15:58:48Z,23,Thinking in Vectors with R,"<p>I know that R works most efficiently with vectors and looping should be avoided. I am having a hard time teaching myself to actually write code this way. I would like some ideas on how to 'vectorize' my code. Here's an example of creating 10 years of sample data for 10,000 non unique combinations of state (<code>st</code>), plan1 (<code>p1</code>) and plan2 (<code>p2</code>):</p>

<pre><code>st&lt;-NULL
p1&lt;-NULL
p2&lt;-NULL
year&lt;-NULL
i&lt;-0
starttime &lt;- Sys.time()

while (i&lt;10000) {
    for (years in seq(1991,2000)) {
        st&lt;-c(st,sample(c(12,17,24),1,prob=c(20,30,50)))
        p1&lt;-c(p1,sample(c(12,17,24),1,prob=c(20,30,50)))
        p2&lt;-c(p2,sample(c(12,17,24),1,prob=c(20,30,50)))    
        year &lt;-c(year,years)
    }
        i&lt;-i+1
}
Sys.time() - starttime
</code></pre>

<p>This takes about 8 minutes to run on my laptop. I end up with 4 vectors, each with 100,000 values, as expected. How can I do this faster using vector functions?</p>

<p>As a side note, if I limit the above code to 1000 loops on i it only takes 2 seconds, but 10,000 takes 8 minutes. Any idea why?</p>
","Thinking in Vectors with R <p>I know that R works most efficiently with vectors and looping should be avoided. I am having a hard time teaching myself to actually write code this way. I would like some ideas on how to 'vectorize' my code. Here's an example of creating 10 years of sample data for 10,000 non unique combinations of state (<code>st</code>), plan1 (<code>p1</code>) and plan2 (<code>p2</code>):</p>

<pre><code>st&lt;-NULL
p1&lt;-NULL
p2&lt;-NULL
year&lt;-NULL
i&lt;-0
starttime &lt;- Sys.time()

while (i&lt;10000) {
    for (years in seq(1991,2000)) {
        st&lt;-c(st,sample(c(12,17,24),1,prob=c(20,30,50)))
        p1&lt;-c(p1,sample(c(12,17,24),1,prob=c(20,30,50)))
        p2&lt;-c(p2,sample(c(12,17,24),1,prob=c(20,30,50)))    
        year &lt;-c(year,years)
    }
        i&lt;-i+1
}
Sys.time() - starttime
</code></pre>

<p>This takes about 8 minutes to run on my laptop. I end up with 4 vectors, each with 100,000 values, as expected. How can I do this faster using vector functions?</p>

<p>As a side note, if I limit the above code to 1000 loops on i it only takes 2 seconds, but 10,000 takes 8 minutes. Any idea why?</p>
"
445059,37751,2009-01-14T23:09:02Z,12,Vectorize my thinking: Vector Operations in R,"<p>So earlier I answered my own question on thinking in vectors in R. But now I have another problem which I can't 'vectorize.' I know vectors are faster and loops slower, but I can't figure out how to do this in a vector method:</p>

<p>I have a data frame (which for sentimental reasons I like to call my.data) which I want to do a full marginal analysis on. I need to remove certain elements one at a time and 'value' the data frame then I need to do the iterating again by removing only the next element. Then do again... and again... The idea is to do a full marginal analysis on a subset of my data. Anyhow, I can't conceive of how to do this in a vector efficient way. </p>

<p>I've shortened the looping part of the code down and it looks something like this:</p>

<pre><code>for (j in my.data$item[my.data$fixed==0]) { # &lt;-- selects the items I want to loop 
                                            #     through
    my.data.it &lt;- my.data[my.data$item!= j,] # &lt;-- this kicks item j out of the list
    sum.data &lt;-aggregate(my.data.it, by=list(year), FUN=sum, na.rm=TRUE) #&lt;-- do an
                                                                         # aggregation

    do(a.little.dance) &amp;&amp; make(a.little.love) -&gt; get.down(tonight) # &lt;-- a little
                                                                   #  song and dance

    delta &lt;- (get.love)                                         # &lt;-- get some love
    delta.list&lt;-append(delta.list, delta, after=length(delta.list)) #&lt;-- put my love
                                                                    #    in a vector 
}
</code></pre>

<p>So obviously I hacked out a bunch of stuff in the middle, just to make it less clumsy. The goal would be to remove the j loop using something more vector efficient. Any ideas?</p>
","Vectorize my thinking: Vector Operations in R <p>So earlier I answered my own question on thinking in vectors in R. But now I have another problem which I can't 'vectorize.' I know vectors are faster and loops slower, but I can't figure out how to do this in a vector method:</p>

<p>I have a data frame (which for sentimental reasons I like to call my.data) which I want to do a full marginal analysis on. I need to remove certain elements one at a time and 'value' the data frame then I need to do the iterating again by removing only the next element. Then do again... and again... The idea is to do a full marginal analysis on a subset of my data. Anyhow, I can't conceive of how to do this in a vector efficient way. </p>

<p>I've shortened the looping part of the code down and it looks something like this:</p>

<pre><code>for (j in my.data$item[my.data$fixed==0]) { # &lt;-- selects the items I want to loop 
                                            #     through
    my.data.it &lt;- my.data[my.data$item!= j,] # &lt;-- this kicks item j out of the list
    sum.data &lt;-aggregate(my.data.it, by=list(year), FUN=sum, na.rm=TRUE) #&lt;-- do an
                                                                         # aggregation

    do(a.little.dance) &amp;&amp; make(a.little.love) -&gt; get.down(tonight) # &lt;-- a little
                                                                   #  song and dance

    delta &lt;- (get.love)                                         # &lt;-- get some love
    delta.list&lt;-append(delta.list, delta, after=length(delta.list)) #&lt;-- put my love
                                                                    #    in a vector 
}
</code></pre>

<p>So obviously I hacked out a bunch of stuff in the middle, just to make it less clumsy. The goal would be to remove the j loop using something more vector efficient. Any ideas?</p>
"
467110,11301,2009-01-21T21:33:13Z,5,Is R a compiled language?,"<p>I can't find it anywhere on the web (and I don't want to install it). Is the <a href=""http://en.wikipedia.org/wiki/R_(programming_language)"" rel=""nofollow noreferrer"">R language</a> a compiled language? How fast does it run a pre-written script? Does it do any kind of compilation, or just execute instructions line by line?</p>
","Is R a compiled language? <p>I can't find it anywhere on the web (and I don't want to install it). Is the <a href=""http://en.wikipedia.org/wiki/R_(programming_language)"" rel=""nofollow noreferrer"">R language</a> a compiled language? How fast does it run a pre-written script? Does it do any kind of compilation, or just execute instructions line by line?</p>
"
476726,277,2009-01-24T21:56:23Z,10,Filtering data in R,"<p>I have a CSV of file of data that I can load in R using <code>read.csv()</code></p>

<p>Some of the data is missing, so I want to reduce the data frame down to set that consists entirely of non-missing data, i.e. if a <code>NULL</code> appears anywhere, I want to exclude that column and row from the filtered data set.</p>

<p>I know I can probably do this fairly simply with the inbuilt R vector operations, but I am not quite sure how to do this exactly?</p>

<p>To make my question a little more concrete, here is a quick sample of the data so you can see what I want to do.</p>

<pre><code>DocID       Anno1    Anno7  Anno8
1           7        NULL   8
2           8        NULL   3
44          10       2      3
45          6        6      6
46          1        3      4
49          3        8      5
62          4        NULL   9
63          2        NULL   4
67          11       NULL   3
91          NULL     9      7
92          NULL     7      5
93          NULL     8      8
</code></pre>

<p>So given this input, I need some code that will reduce the output to this.</p>

<pre><code>DocID       Anno8
44          3
45          6
46          4
49          5
</code></pre>

<p>As <code>Anno8</code> is the only column with non-NULL data, and there are only four rows with non-NULL data.</p>
","Filtering data in R <p>I have a CSV of file of data that I can load in R using <code>read.csv()</code></p>

<p>Some of the data is missing, so I want to reduce the data frame down to set that consists entirely of non-missing data, i.e. if a <code>NULL</code> appears anywhere, I want to exclude that column and row from the filtered data set.</p>

<p>I know I can probably do this fairly simply with the inbuilt R vector operations, but I am not quite sure how to do this exactly?</p>

<p>To make my question a little more concrete, here is a quick sample of the data so you can see what I want to do.</p>

<pre><code>DocID       Anno1    Anno7  Anno8
1           7        NULL   8
2           8        NULL   3
44          10       2      3
45          6        6      6
46          1        3      4
49          3        8      5
62          4        NULL   9
63          2        NULL   4
67          11       NULL   3
91          NULL     9      7
92          NULL     7      5
93          NULL     8      8
</code></pre>

<p>So given this input, I need some code that will reduce the output to this.</p>

<pre><code>DocID       Anno8
44          3
45          6
46          4
49          5
</code></pre>

<p>As <code>Anno8</code> is the only column with non-NULL data, and there are only four rows with non-NULL data.</p>
"
495744,12677,2009-01-30T14:48:19Z,2,Operating with time intervals like 08:00-08:15,"<p>I would like to import a time-series where the first field indicates a period:</p>

<pre><code>08:00-08:15
08:15-08:30
08:30-08:45
</code></pre>

<p>Does R have any features to do this neatly?</p>

<p>Thanks!</p>

<hr>

<p><strong>Update:</strong></p>

<p>The most promising solution I found, as suggested by Godeke was the cron package and using substring() to extract the start of the interval.</p>

<p>I'm still working on related issues, so I'll update with the solution when I get there.</p>
","Operating with time intervals like 08:00-08:15 <p>I would like to import a time-series where the first field indicates a period:</p>

<pre><code>08:00-08:15
08:15-08:30
08:30-08:45
</code></pre>

<p>Does R have any features to do this neatly?</p>

<p>Thanks!</p>

<hr>

<p><strong>Update:</strong></p>

<p>The most promising solution I found, as suggested by Godeke was the cron package and using substring() to extract the start of the interval.</p>

<p>I'm still working on related issues, so I'll update with the solution when I get there.</p>
"
498932,445,2009-01-31T14:50:28Z,3,What's the easiest way to install 100s of files in a Visual Studio setup project,"<p>I have a standard c# application that acts as a GUI front end for a an ""R"" statistics engine. ""R"" consists of approx 600 files in approx 50 different folders and can be ""installed"" on a machine through xcopy deployment.</p>

<p>I would like to package up both the R engine and my c# gui into one setup.exe so that the user doesn't need to go and install R first and then my c# application seperately.</p>

<p>I know that I can produce a setup project and then add in the R files one by one but adding all 600 files will be very tedious!</p>

<p>Is there an easier way of doing what I want? Can I add the single R folder and automatically add the subfolders and files to save me adding them in one by one? Or maybe do an unzip procedure in my setup project which will unzip the R engine in one go?</p>
","What's the easiest way to install 100s of files in a Visual Studio setup project <p>I have a standard c# application that acts as a GUI front end for a an ""R"" statistics engine. ""R"" consists of approx 600 files in approx 50 different folders and can be ""installed"" on a machine through xcopy deployment.</p>

<p>I would like to package up both the R engine and my c# gui into one setup.exe so that the user doesn't need to go and install R first and then my c# application seperately.</p>

<p>I know that I can produce a setup project and then add in the R files one by one but adding all 600 files will be very tedious!</p>

<p>Is there an easier way of doing what I want? Can I add the single R folder and automatically add the subfolders and files to save me adding them in one by one? Or maybe do an unzip procedure in my setup project which will unzip the R engine in one go?</p>
"
509595,12677,2009-02-04T00:23:09Z,2,csv file with multiple time-series,"<p>I've imported a csv file with lots of columns and sections of data.</p>

<pre><code>v &lt;- read.csv2(""200109.csv"", header=TRUE, sep="","", skip=""6"", na.strings=c(""""))
</code></pre>

<p>The layout of the file is something like this:</p>

<pre><code>Dataset1
time, data, .....
0       0
0       &lt;NA&gt;
0       0

Dataset2
time, data, .....
00:00   0
0       &lt;NA&gt;
0       0
</code></pre>

<p>(The headers of the different datasets is exactly the same.</p>

<p>Now, I can plot the first dataset with:</p>

<pre><code>plot(as.numeric(as.character(v$Calls.served.by.agent[1:30])), type=""l"")
</code></pre>

<p>I am curious if there is a better way to:</p>

<ol>
<li><p>Get all the numbers read as numbers, without having to convert.</p></li>
<li><p>Address the different datasets in the file, in some meaningfull way.</p></li>
</ol>

<p>Any hints would be appreciated. Thank you.</p>

<hr>

<p>Status update:</p>

<p>I haven't really found a good solution yet in R, but I've started writing a script in Lua to seperate each individual time-series into a seperate file. I'm leaving this open for now, because I'm curious how well R will deal with all these files. I'll get 8 files per day.</p>
","csv file with multiple time-series <p>I've imported a csv file with lots of columns and sections of data.</p>

<pre><code>v &lt;- read.csv2(""200109.csv"", header=TRUE, sep="","", skip=""6"", na.strings=c(""""))
</code></pre>

<p>The layout of the file is something like this:</p>

<pre><code>Dataset1
time, data, .....
0       0
0       &lt;NA&gt;
0       0

Dataset2
time, data, .....
00:00   0
0       &lt;NA&gt;
0       0
</code></pre>

<p>(The headers of the different datasets is exactly the same.</p>

<p>Now, I can plot the first dataset with:</p>

<pre><code>plot(as.numeric(as.character(v$Calls.served.by.agent[1:30])), type=""l"")
</code></pre>

<p>I am curious if there is a better way to:</p>

<ol>
<li><p>Get all the numbers read as numbers, without having to convert.</p></li>
<li><p>Address the different datasets in the file, in some meaningfull way.</p></li>
</ol>

<p>Any hints would be appreciated. Thank you.</p>

<hr>

<p>Status update:</p>

<p>I haven't really found a good solution yet in R, but I've started writing a script in Lua to seperate each individual time-series into a seperate file. I'm leaving this open for now, because I'm curious how well R will deal with all these files. I'll get 8 files per day.</p>
"
520810,63372,2009-02-06T15:49:48Z,20,Does R have quote-like operators like Perl's qw()?,"<p>Anyone know if R has quote-like operators like Perl's <code>qw()</code> for generating character vectors? </p>
","Does R have quote-like operators like Perl's qw()? <p>Anyone know if R has quote-like operators like Perl's <code>qw()</code> for generating character vectors? </p>
"
551113,2056,2009-02-15T16:05:33Z,3,Writing a GUI for the BRCAPRO Cancer Gene Risk Calculation Engine,"<p>I think this is a completely unique question on Stack Overflow.  First some background:</p>

<p>I've been asked to write a new GUI on top of a calculation engine called BRCAPRO (brack-a-pro).  BRCAPRO implements a Mendelian computational model based on a piece of software called BayesMendel.  BRCAPRO calculation are used by doctors and surgeons specializing in cancer treatment to show patients:</p>

<ul>
<li>The probability of being diagnosed with cancer based on their genetics and family history.</li>
<li>The change in life expectancy based on different forms of treatment and/or the age at which these treatments are started.</li>
</ul>

<p>I've done enough research to know that the BRCAPRO formulas are far too complicated to reasonably implement in my own code.</p>

<p>There is an existing well-known (to cancer doctors) software package called CancerGene: <a href=""http://www8.utsouthwestern.edu/utsw/cda/dept47829/files/65844.html"" rel=""nofollow noreferrer"">http://www8.utsouthwestern.edu/utsw/cda/dept47829/files/65844.html</a>.  This program is very old, runs on Windows 95 and includes calculating engines for several forms of cancer my client does not work with.  Ideally my client would like his application to run on the web so that he can share information with other doctors easily.</p>

<p>My task is take the CancerGene application, which is built on the BRCAPRO engine, and:</p>

<ol>
<li>Duplicate 90% of its functionality</li>
<li>Remove unnecessary functionality</li>
<li>Modify the output of reports</li>
<li>If possible, make it web-based</li>
</ol>

<p>Now my question:</p>

<p>Does anybody have any idea how to code against BRCAPRO?  I have Googled for two days and found no API documentation or development information of any kind.  Wikipedia says that the BayesMendel modeling software is written in R, but I don't have any idea what BRCAPRO is written in.  I know absolutely nothing about R.  </p>

<p>To be clear, I don't need to modify the behavior or calculating engine of BRCAPRO.  I just need to know how to feed it input so that it returns numbers to me.</p>

<p>--  Edit to add more information --</p>

<p>I downloaded the CancerGene application in the above link and installed it.  There was a small amount of documentation, including the data format that BRCAPRO expects to receive.  Without getting into an unnecessary level of detail, BRCAPRO expects matrix-formatted data where each column represents a genetic trait and each row represents a family member.  Now I just need to know how to pass this matrix to the BRCAPRO engine once I collect it from my Web/Windows form.</p>

<p>Here's hoping there are a couple of doctor/developers here on Stack Overflow!</p>

<p>KN</p>
","Writing a GUI for the BRCAPRO Cancer Gene Risk Calculation Engine <p>I think this is a completely unique question on Stack Overflow.  First some background:</p>

<p>I've been asked to write a new GUI on top of a calculation engine called BRCAPRO (brack-a-pro).  BRCAPRO implements a Mendelian computational model based on a piece of software called BayesMendel.  BRCAPRO calculation are used by doctors and surgeons specializing in cancer treatment to show patients:</p>

<ul>
<li>The probability of being diagnosed with cancer based on their genetics and family history.</li>
<li>The change in life expectancy based on different forms of treatment and/or the age at which these treatments are started.</li>
</ul>

<p>I've done enough research to know that the BRCAPRO formulas are far too complicated to reasonably implement in my own code.</p>

<p>There is an existing well-known (to cancer doctors) software package called CancerGene: <a href=""http://www8.utsouthwestern.edu/utsw/cda/dept47829/files/65844.html"" rel=""nofollow noreferrer"">http://www8.utsouthwestern.edu/utsw/cda/dept47829/files/65844.html</a>.  This program is very old, runs on Windows 95 and includes calculating engines for several forms of cancer my client does not work with.  Ideally my client would like his application to run on the web so that he can share information with other doctors easily.</p>

<p>My task is take the CancerGene application, which is built on the BRCAPRO engine, and:</p>

<ol>
<li>Duplicate 90% of its functionality</li>
<li>Remove unnecessary functionality</li>
<li>Modify the output of reports</li>
<li>If possible, make it web-based</li>
</ol>

<p>Now my question:</p>

<p>Does anybody have any idea how to code against BRCAPRO?  I have Googled for two days and found no API documentation or development information of any kind.  Wikipedia says that the BayesMendel modeling software is written in R, but I don't have any idea what BRCAPRO is written in.  I know absolutely nothing about R.  </p>

<p>To be clear, I don't need to modify the behavior or calculating engine of BRCAPRO.  I just need to know how to feed it input so that it returns numbers to me.</p>

<p>--  Edit to add more information --</p>

<p>I downloaded the CancerGene application in the above link and installed it.  There was a small amount of documentation, including the data format that BRCAPRO expects to receive.  Without getting into an unnecessary level of detail, BRCAPRO expects matrix-formatted data where each column represents a genetic trait and each row represents a family member.  Now I just need to know how to pass this matrix to the BRCAPRO engine once I collect it from my Web/Windows form.</p>

<p>Here's hoping there are a couple of doctor/developers here on Stack Overflow!</p>

<p>KN</p>
"
560329,67405,2009-02-18T09:08:38Z,2,Sort the X axis in a barplot,"<p>I have binned data that looks like this:</p>

<pre><code>  (8.048,18.05] (-21.95,-11.95] (-31.95,-21.95]   (18.05,28.05] (-41.95,-31.95]
             81              76              18              18             12
    (-132,-122]     (-122,-112]     (-112,-102]     (-162,-152]  (-102,-91.95]
              6               6               6               5              5
(-91.95,-81.95]     (-192,-182]   (28.05,38.05]   (38.05,48.05]  (58.05,68.05]
              5               4               4               4              4
  (78.05,88.05]     (98.05,108]     (-562,-552]     (-512,-502]    (-482,-472]
              4               4               3               3              3
    (-452,-442]     (-412,-402]     (-282,-272]     (-152,-142]  (48.05,58.05]
              3               3               3               3              3
  (68.05,78.05]       (118,128]       (128,138]     (-582,-572]    (-552,-542]
              3               3               3               2              2
    (-532,-522]     (-422,-412]     (-392,-382]     (-362,-352]    (-262,-252]
              2               2               2               2              2
    (-252,-242]     (-142,-132] (-81.95,-71.95]       (148,158]  (-1402,-1392]
              2               2               2               2              1
  (-1372,-1362]   (-1342,-1332]     (-942,-932]     (-862,-852]    (-822,-812]
              1               1               1               1              1
    (-712,-702]     (-682,-672]     (-672,-662]     (-632,-622]    (-542,-532]
              1               1               1               1              1
    (-502,-492]     (-492,-482]     (-472,-462]     (-462,-452]    (-442,-432]
              1               1               1               1              1
    (-432,-422]     (-352,-342]     (-332,-322]     (-312,-302]    (-302,-292]
              1               1               1               1              1
    (-202,-192]     (-182,-172]     (-172,-162] (-51.95,-41.95]  (88.05,98.05]
              1               1               1               1              1
      (108,118]       (158,168]       (168,178]       (178,188]      (298,308]
              1               1               1               1              1
      (318,328]       (328,338]       (338,348]       (368,378]      (458,468]
              1               1               1               1              1
</code></pre>

<p>How can I plot this data so that the bin is sorted from most negative on the left to most positive on the right? Currently my graph looks <a href=""http://docs.google.com/Doc?id=dcvdrfrh_5cm5qkchw"" rel=""nofollow noreferrer"">like this</a>.  Notice that it is not sorted at all.  In particular the second bar (<code>value = 76</code>) is placed to the right of the first:</p>

<pre><code> (8.048,18.05] (-21.95,-11.95]
            81              76
</code></pre>

<p>This is the command I use to plot:</p>

<pre><code>barplot(x,ylab=""Number of Unique Tags"", xlab=""Expected - Observed"")
</code></pre>
","Sort the X axis in a barplot <p>I have binned data that looks like this:</p>

<pre><code>  (8.048,18.05] (-21.95,-11.95] (-31.95,-21.95]   (18.05,28.05] (-41.95,-31.95]
             81              76              18              18             12
    (-132,-122]     (-122,-112]     (-112,-102]     (-162,-152]  (-102,-91.95]
              6               6               6               5              5
(-91.95,-81.95]     (-192,-182]   (28.05,38.05]   (38.05,48.05]  (58.05,68.05]
              5               4               4               4              4
  (78.05,88.05]     (98.05,108]     (-562,-552]     (-512,-502]    (-482,-472]
              4               4               3               3              3
    (-452,-442]     (-412,-402]     (-282,-272]     (-152,-142]  (48.05,58.05]
              3               3               3               3              3
  (68.05,78.05]       (118,128]       (128,138]     (-582,-572]    (-552,-542]
              3               3               3               2              2
    (-532,-522]     (-422,-412]     (-392,-382]     (-362,-352]    (-262,-252]
              2               2               2               2              2
    (-252,-242]     (-142,-132] (-81.95,-71.95]       (148,158]  (-1402,-1392]
              2               2               2               2              1
  (-1372,-1362]   (-1342,-1332]     (-942,-932]     (-862,-852]    (-822,-812]
              1               1               1               1              1
    (-712,-702]     (-682,-672]     (-672,-662]     (-632,-622]    (-542,-532]
              1               1               1               1              1
    (-502,-492]     (-492,-482]     (-472,-462]     (-462,-452]    (-442,-432]
              1               1               1               1              1
    (-432,-422]     (-352,-342]     (-332,-322]     (-312,-302]    (-302,-292]
              1               1               1               1              1
    (-202,-192]     (-182,-172]     (-172,-162] (-51.95,-41.95]  (88.05,98.05]
              1               1               1               1              1
      (108,118]       (158,168]       (168,178]       (178,188]      (298,308]
              1               1               1               1              1
      (318,328]       (328,338]       (338,348]       (368,378]      (458,468]
              1               1               1               1              1
</code></pre>

<p>How can I plot this data so that the bin is sorted from most negative on the left to most positive on the right? Currently my graph looks <a href=""http://docs.google.com/Doc?id=dcvdrfrh_5cm5qkchw"" rel=""nofollow noreferrer"">like this</a>.  Notice that it is not sorted at all.  In particular the second bar (<code>value = 76</code>) is placed to the right of the first:</p>

<pre><code> (8.048,18.05] (-21.95,-11.95]
            81              76
</code></pre>

<p>This is the command I use to plot:</p>

<pre><code>barplot(x,ylab=""Number of Unique Tags"", xlab=""Expected - Observed"")
</code></pre>
"
582653,69117,2009-02-24T17:21:30Z,13,what is the best practice of handling time in R?,"<p>I am working with a survey dataset. It has two string vectors, start and finish, indicating the time of the day when the interview was started, and finished, respectively.</p>

<p>They are character strings that look like: ""9:24 am"", ""12:35 pm"", and so forth. i am trying to calculate the duration of the interview based on these two. what is the best way of doing this?</p>

<p>i know that, for dates, there are lots of classes or functions like <code>as.date()</code>, <code>as.Date()</code>, <code>chron()</code>, or <code>as.POSIXct()</code>. So i was looking for something like <code>as.time()</code>, but could not find it. Should I just append a made-up date and convert the whole thing into a <code>POSIX()</code> date-time class, then use <code>difftime()</code>? </p>

<p>What is the best practice of handling time in R?</p>
","what is the best practice of handling time in R? <p>I am working with a survey dataset. It has two string vectors, start and finish, indicating the time of the day when the interview was started, and finished, respectively.</p>

<p>They are character strings that look like: ""9:24 am"", ""12:35 pm"", and so forth. i am trying to calculate the duration of the interview based on these two. what is the best way of doing this?</p>

<p>i know that, for dates, there are lots of classes or functions like <code>as.date()</code>, <code>as.Date()</code>, <code>chron()</code>, or <code>as.POSIXct()</code>. So i was looking for something like <code>as.time()</code>, but could not find it. Should I just append a made-up date and convert the whole thing into a <code>POSIX()</code> date-time class, then use <code>difftime()</code>? </p>

<p>What is the best practice of handling time in R?</p>
"
596819,69117,2009-02-27T21:49:17Z,11,What is the best way to avoid passing a data frame around?,"<p>I have 12 data frames to work with. They are similar and I have to do the same processing to each one, so I wrote a function that takes a data frame, processes it, and then returns a data frame. This works. But I am afraid that I am passing around a very big structure. I may be making temporary copies (am I?) This can't be efficient. What is the best way to avoid passing a data frame around? Thank you.</p>

<pre><code>doSomething &lt;- function(df) {
  // do something with the data frame, df
  return(df)
}
</code></pre>
","What is the best way to avoid passing a data frame around? <p>I have 12 data frames to work with. They are similar and I have to do the same processing to each one, so I wrote a function that takes a data frame, processes it, and then returns a data frame. This works. But I am afraid that I am passing around a very big structure. I may be making temporary copies (am I?) This can't be efficient. What is the best way to avoid passing a data frame around? Thank you.</p>

<pre><code>doSomething &lt;- function(df) {
  // do something with the data frame, df
  return(df)
}
</code></pre>
"
596976,69117,2009-02-27T22:45:59Z,0,What is the Y function?,"<p>A friend of mine asked me if I understood the Y function. I didn't even know what it was. <code>? Y</code> did not get me anywhere.</p>

<p>What is it?</p>
","What is the Y function? <p>A friend of mine asked me if I understood the Y function. I didn't even know what it was. <code>? Y</code> did not get me anywhere.</p>

<p>What is it?</p>
"
652136,1447,2009-03-16T20:59:36Z,159,How can I remove an element from a list?,"<p>I have a list and I want to remove a single element from it.  How can I do this?</p>

<p>I've tried looking up what I think the obvious names for this function would be in the reference manual and I haven't found anything appropriate.</p>
","How can I remove an element from a list? <p>I have a list and I want to remove a single element from it.  How can I do this?</p>

<p>I've tried looking up what I think the obvious names for this function would be in the reference manual and I haven't found anything appropriate.</p>
"
657440,67405,2009-03-18T08:59:04Z,7,Cumulative Plot with Given X-Axis,"<p>I have data that looks like this.
In which I want to plot accumulative value of dat1 with respect
to x-axis. Also plot it together with dat2.</p>

<pre><code>#x-axis dat1              dat2
-10     0.0140149       0.0140146
-9      0.00890835      0.00891768
-8      0.00672276      0.00672488
-7      0.00876399      0.00879401
-6      0.00806879      0.00808141
-5      0.0088366       0.00885121
-4      0.00856872      0.00857769
-3      0.0195384       0.0196094
-2      0.0160239       0.0161829
-1      0.0254455       0.0257845
0       0.0397413       0.0400913
1       0.0743316       0.0755453
2       0.0247501       0.0253324
3       0.0214285       0.021778
4       0.0241462       0.0244967
5       0.0150943       0.015241
6       0.0141398       0.0142373
7       0.0101515       0.0102948
8       0.0308843       0.031294
9       0.0095504       0.00960626
10      0.00729676      0.0073713
</code></pre>

<p>What's the common way to do it in R?</p>

<p>I looked at ECDF from Hmisc, it doesn't seem to do what I want.
In particular it doesn't allow us to give x-axis value.</p>
","Cumulative Plot with Given X-Axis <p>I have data that looks like this.
In which I want to plot accumulative value of dat1 with respect
to x-axis. Also plot it together with dat2.</p>

<pre><code>#x-axis dat1              dat2
-10     0.0140149       0.0140146
-9      0.00890835      0.00891768
-8      0.00672276      0.00672488
-7      0.00876399      0.00879401
-6      0.00806879      0.00808141
-5      0.0088366       0.00885121
-4      0.00856872      0.00857769
-3      0.0195384       0.0196094
-2      0.0160239       0.0161829
-1      0.0254455       0.0257845
0       0.0397413       0.0400913
1       0.0743316       0.0755453
2       0.0247501       0.0253324
3       0.0214285       0.021778
4       0.0241462       0.0244967
5       0.0150943       0.015241
6       0.0141398       0.0142373
7       0.0101515       0.0102948
8       0.0308843       0.031294
9       0.0095504       0.00960626
10      0.00729676      0.0073713
</code></pre>

<p>What's the common way to do it in R?</p>

<p>I looked at ECDF from Hmisc, it doesn't seem to do what I want.
In particular it doesn't allow us to give x-axis value.</p>
"
659725,37751,2009-03-18T19:21:41Z,5,Column Stores: Comparing Column Based Databases,"<p>I've really been struggling to make SQL Server into something that, quite frankly, it will never be. I need a database engine for my analytical work. The DB needs to be fast and does NOT need all the logging and other overhead found in typical databases (SQL Server, Oracle, DB2, etc.) </p>

<p>Yesterday I listened to <a href=""http://itc.conversationsnetwork.org/shows/detail4009.html"" rel=""noreferrer"">Michael Stonebraker speak at the Money:Tech conference</a> and I kept thinking, ""I'm not really crazy. There IS a better way!"" He talks about using <a href=""http://en.wikipedia.org/wiki/Column-oriented_DBMS"" rel=""noreferrer"">column stores</a> instead of row oriented databases. I went to the Wikipedia page for <a href=""http://en.wikipedia.org/wiki/Column-oriented_DBMS"" rel=""noreferrer"">column stores</a> and I see a few open source projects (which I like) and a few commercial/open source projects (which I don't fully understand). </p>

<p>My question is this: In an applied analytical environment, how do the different column based DB's differ? How should I be thinking about them? Anyone have practical experience with multiple column based systems? Can I leverage my SQL experience with these DBs or am I going to have to learn a new language?</p>

<p>I am ultimately going to be pulling data into R for analysis. </p>

<p><strong>EDIT:</strong> I was requested for some clarification in what exactly I am trying to do. So, here's an example of what I would like to do:
Create a table that has 4 million rows and 20 columns (5 dims, 15 facts). Create 5 aggregation tables that calculate max, min, and average for each of the facts. Join those 5 aggregations back to the starting table. Now calculate the percent deviation from mean, percent deviation of min, and percent deviation from max for each row and add it to the original table. This table data does not get new rows each day, it gets TOTALLY replaced and the process is repeated. Heaven forbid if the process must be stopped. And the logs... ohhhhh the logs! :)</p>
","Column Stores: Comparing Column Based Databases <p>I've really been struggling to make SQL Server into something that, quite frankly, it will never be. I need a database engine for my analytical work. The DB needs to be fast and does NOT need all the logging and other overhead found in typical databases (SQL Server, Oracle, DB2, etc.) </p>

<p>Yesterday I listened to <a href=""http://itc.conversationsnetwork.org/shows/detail4009.html"" rel=""noreferrer"">Michael Stonebraker speak at the Money:Tech conference</a> and I kept thinking, ""I'm not really crazy. There IS a better way!"" He talks about using <a href=""http://en.wikipedia.org/wiki/Column-oriented_DBMS"" rel=""noreferrer"">column stores</a> instead of row oriented databases. I went to the Wikipedia page for <a href=""http://en.wikipedia.org/wiki/Column-oriented_DBMS"" rel=""noreferrer"">column stores</a> and I see a few open source projects (which I like) and a few commercial/open source projects (which I don't fully understand). </p>

<p>My question is this: In an applied analytical environment, how do the different column based DB's differ? How should I be thinking about them? Anyone have practical experience with multiple column based systems? Can I leverage my SQL experience with these DBs or am I going to have to learn a new language?</p>

<p>I am ultimately going to be pulling data into R for analysis. </p>

<p><strong>EDIT:</strong> I was requested for some clarification in what exactly I am trying to do. So, here's an example of what I would like to do:
Create a table that has 4 million rows and 20 columns (5 dims, 15 facts). Create 5 aggregation tables that calculate max, min, and average for each of the facts. Join those 5 aggregations back to the starting table. Now calculate the percent deviation from mean, percent deviation of min, and percent deviation from max for each row and add it to the original table. This table data does not get new rows each day, it gets TOTALLY replaced and the process is repeated. Heaven forbid if the process must be stopped. And the logs... ohhhhh the logs! :)</p>
"
713878,NA,2009-04-03T13:23:03Z,25,How expensive is it to compute the eigenvalues of a matrix?,"<p>How expensive is it to compute the eigenvalues of a matrix? </p>

<p>What is the complexity of the best algorithms? </p>

<p>How long might it take in practice if I have a 1000 x 1000 matrix? I assume it helps if the matrix is sparse?</p>

<p>Are there any cases where the eigenvalue computation would not terminate? </p>

<p>In <code>R</code>, I can compute the eigenvalues as in the following toy example:</p>

<pre><code>m&lt;-matrix( c(13,2, 5,4), ncol=2, nrow=2 )
eigen(m, only.values=1)
$values
[1] 14  3
</code></pre>

<p>Does anyone know what algorithm it uses? </p>

<p>Are there any other (open-source) packages that compute the eigenvalue?</p>
","How expensive is it to compute the eigenvalues of a matrix? <p>How expensive is it to compute the eigenvalues of a matrix? </p>

<p>What is the complexity of the best algorithms? </p>

<p>How long might it take in practice if I have a 1000 x 1000 matrix? I assume it helps if the matrix is sparse?</p>

<p>Are there any cases where the eigenvalue computation would not terminate? </p>

<p>In <code>R</code>, I can compute the eigenvalues as in the following toy example:</p>

<pre><code>m&lt;-matrix( c(13,2, 5,4), ncol=2, nrow=2 )
eigen(m, only.values=1)
$values
[1] 14  3
</code></pre>

<p>Does anyone know what algorithm it uses? </p>

<p>Are there any other (open-source) packages that compute the eigenvalue?</p>
"
717747,19410,2009-04-04T20:21:37Z,8,How do I color edges or draw rects correctly in an R dendrogram?,"<p>I generated <a href=""http://farm4.static.flickr.com/3622/3411762935_b9429d9d68_o.png"" rel=""nofollow noreferrer"">this dendrogram</a> using R's <code>hclust()</code>, <code>as.dendrogram()</code> and <code>plot.dendrogram()</code> functions.</p>

<p>I used the <code>dendrapply()</code> function and a local function to color leaves, which is working fine.</p>

<p>I have results from a statistical test that indicate if a set of nodes (<em>e.g.</em> the cluster of ""<code>_+v\_stat5a\_01_</code>"" and ""<code>_+v\_stat5b\_01_</code>"" in the lower-right corner of the tree) are significant or important.</p>

<p>I also have a local function that I can use with <code>dendrapply()</code> that finds the exact node in my dendrogram which contains significant leaves.</p>

<p>I would like to either (following the example):</p>

<ol>
<li>Color the edges that join ""<code>_+v\_stat5a\_01_</code>"" and ""<code>_+v\_stat5b\_01_</code>""; or,</li>
<li>Draw a <code>rect()</code> around ""<code>_+v\_stat5a\_01_</code>"" and ""<code>_+v\_stat5b\_01_</code>""</li>
</ol>

<p>I have the following local function (the details of the ""nodes-in-leafList-match-nodes-in-clusterList"" condition aren't important, but that it highlights significant nodes):</p>

<pre><code>markSignificantClusters &lt;&lt;- function (n) {
  if (!is.leaf(n)) {
     a &lt;- attributes(n)
     leafList &lt;- unlist(dendrapply(n, listLabels))
     for (clusterIndex in 1:length(significantClustersList[[1]])) {
       clusterList &lt;- unlist(significantClustersList[[1]][clusterIndex])
       if (nodes-in-leafList-match-nodes-in-clusterList) {
          # I now have a node ""n"" that contains significant leaves, and
          # I'd like to use a dendrapply() call to another local function
          # which colors the edges that run down to the leaves; or, draw
          # a rect() around the leaves
       }
     }
  }
}
</code></pre>

<p>From within this <code>if</code> block, I have tried calling <code>dendrapply(n, markEdges)</code>, but this did not work:</p>

<pre><code>markEdges &lt;&lt;- function (n) {
  a &lt;- attributes(n)
  attr(n, ""edgePar"") &lt;- c(a$edgePar, list(lty=3, col=""red""))
}
</code></pre>

<p>In my ideal example, the edges connecting ""<code>_+v\_stat5a\_01_</code>"" and ""<code>_+v\_stat5b\_01_</code>"" would be dashed and of a red color.</p>

<p>I have also tried using <code>rect.hclust()</code> within this <code>if</code> block:</p>

<pre><code>ma &lt;- match(leafList, orderedLabels)  
rect.hclust(scoreClusterObj, h = a$height, x = c(min(ma), max(ma)), border = 2)
</code></pre>

<p>But the result does not work with horizontal dendrograms (<em>i.e.</em> dendrograms with horizontal labels). <a href=""http://farm4.static.flickr.com/3331/3410126060_f8f06c4498_o.png"" rel=""nofollow noreferrer"">Here is an example</a> (note the red stripe in the lower-right corner). Something is not correct about the dimensions of what <code>rect.hclust()</code> generates, and I don't know how it works, to be able to write my own version.</p>

<p>I appreciate any advice for getting <code>edgePar</code> or <code>rect.hclust()</code> to work properly, or to be able to write my own <code>rect.hclust()</code> equivalent.</p>

<p><strong>UPDATE</strong></p>

<p>Since asking this question, I used <code>getAnywhere(rect.hclust())</code> to get the functional code that calculates parameters and draws the <code>rect</code> object. I wrote a custom version of this function to handle horizontal and vertical leaves, and call it with <code>dendrapply()</code>.</p>

<p>However, there is some kind of clipping effect that removes part of the <code>rect</code>. For horizontal leaves (leaves that are drawn on the right side of the tree), the rightmost edge of the <code>rect</code> either disappears or is thinner than the border width of the other three sides of the <code>rect</code>. For vertical leaves (leaves that are drawn on the bottom of the tree), the bottommost edge of the <code>rect</code> suffers the same display problem.</p>

<p>What I had done as a means of marking significant clusters is to reduce the width of the <code>rect</code> such that I render a vertical red stripe between the tips of the cluster edges and the (horizontal) leaf labels. </p>

<p>This eliminates the clipping issue, but introduces another problem, in that the space between the cluster edge tips and the leaf labels is only six or so pixels wide, which I don't have much control over. This limits the width of the vertical stripe. </p>

<p>The worse problem is that the <code>x</code>-coordinate that marks where the vertical stripe can fit between the two elements will change based on the width of the larger tree (<code>par[""usr""]</code>), which in turn depends on how the tree hierarchy ends up being structured.</p>

<p>I wrote a ""correction"" or, better termed, a hack to adjust this <code>x</code> value and the <code>rect</code> width for horizontal trees. It doesn't always work consistently, but for the trees I am making, it seems to keep from getting too close to (or overlapping) edges and labels.</p>

<p>Ultimately, a better fix would be to find out how to draw the <code>rect</code> so that there is no clipping. Or a consistent way to calculate the specific <code>x</code> position in between tree edges and labels for any given tree, so as to center and size the stripe properly.</p>

<p>I would also be very interested in a method for annotating edges with colors or line styles.</p>
","How do I color edges or draw rects correctly in an R dendrogram? <p>I generated <a href=""http://farm4.static.flickr.com/3622/3411762935_b9429d9d68_o.png"" rel=""nofollow noreferrer"">this dendrogram</a> using R's <code>hclust()</code>, <code>as.dendrogram()</code> and <code>plot.dendrogram()</code> functions.</p>

<p>I used the <code>dendrapply()</code> function and a local function to color leaves, which is working fine.</p>

<p>I have results from a statistical test that indicate if a set of nodes (<em>e.g.</em> the cluster of ""<code>_+v\_stat5a\_01_</code>"" and ""<code>_+v\_stat5b\_01_</code>"" in the lower-right corner of the tree) are significant or important.</p>

<p>I also have a local function that I can use with <code>dendrapply()</code> that finds the exact node in my dendrogram which contains significant leaves.</p>

<p>I would like to either (following the example):</p>

<ol>
<li>Color the edges that join ""<code>_+v\_stat5a\_01_</code>"" and ""<code>_+v\_stat5b\_01_</code>""; or,</li>
<li>Draw a <code>rect()</code> around ""<code>_+v\_stat5a\_01_</code>"" and ""<code>_+v\_stat5b\_01_</code>""</li>
</ol>

<p>I have the following local function (the details of the ""nodes-in-leafList-match-nodes-in-clusterList"" condition aren't important, but that it highlights significant nodes):</p>

<pre><code>markSignificantClusters &lt;&lt;- function (n) {
  if (!is.leaf(n)) {
     a &lt;- attributes(n)
     leafList &lt;- unlist(dendrapply(n, listLabels))
     for (clusterIndex in 1:length(significantClustersList[[1]])) {
       clusterList &lt;- unlist(significantClustersList[[1]][clusterIndex])
       if (nodes-in-leafList-match-nodes-in-clusterList) {
          # I now have a node ""n"" that contains significant leaves, and
          # I'd like to use a dendrapply() call to another local function
          # which colors the edges that run down to the leaves; or, draw
          # a rect() around the leaves
       }
     }
  }
}
</code></pre>

<p>From within this <code>if</code> block, I have tried calling <code>dendrapply(n, markEdges)</code>, but this did not work:</p>

<pre><code>markEdges &lt;&lt;- function (n) {
  a &lt;- attributes(n)
  attr(n, ""edgePar"") &lt;- c(a$edgePar, list(lty=3, col=""red""))
}
</code></pre>

<p>In my ideal example, the edges connecting ""<code>_+v\_stat5a\_01_</code>"" and ""<code>_+v\_stat5b\_01_</code>"" would be dashed and of a red color.</p>

<p>I have also tried using <code>rect.hclust()</code> within this <code>if</code> block:</p>

<pre><code>ma &lt;- match(leafList, orderedLabels)  
rect.hclust(scoreClusterObj, h = a$height, x = c(min(ma), max(ma)), border = 2)
</code></pre>

<p>But the result does not work with horizontal dendrograms (<em>i.e.</em> dendrograms with horizontal labels). <a href=""http://farm4.static.flickr.com/3331/3410126060_f8f06c4498_o.png"" rel=""nofollow noreferrer"">Here is an example</a> (note the red stripe in the lower-right corner). Something is not correct about the dimensions of what <code>rect.hclust()</code> generates, and I don't know how it works, to be able to write my own version.</p>

<p>I appreciate any advice for getting <code>edgePar</code> or <code>rect.hclust()</code> to work properly, or to be able to write my own <code>rect.hclust()</code> equivalent.</p>

<p><strong>UPDATE</strong></p>

<p>Since asking this question, I used <code>getAnywhere(rect.hclust())</code> to get the functional code that calculates parameters and draws the <code>rect</code> object. I wrote a custom version of this function to handle horizontal and vertical leaves, and call it with <code>dendrapply()</code>.</p>

<p>However, there is some kind of clipping effect that removes part of the <code>rect</code>. For horizontal leaves (leaves that are drawn on the right side of the tree), the rightmost edge of the <code>rect</code> either disappears or is thinner than the border width of the other three sides of the <code>rect</code>. For vertical leaves (leaves that are drawn on the bottom of the tree), the bottommost edge of the <code>rect</code> suffers the same display problem.</p>

<p>What I had done as a means of marking significant clusters is to reduce the width of the <code>rect</code> such that I render a vertical red stripe between the tips of the cluster edges and the (horizontal) leaf labels. </p>

<p>This eliminates the clipping issue, but introduces another problem, in that the space between the cluster edge tips and the leaf labels is only six or so pixels wide, which I don't have much control over. This limits the width of the vertical stripe. </p>

<p>The worse problem is that the <code>x</code>-coordinate that marks where the vertical stripe can fit between the two elements will change based on the width of the larger tree (<code>par[""usr""]</code>), which in turn depends on how the tree hierarchy ends up being structured.</p>

<p>I wrote a ""correction"" or, better termed, a hack to adjust this <code>x</code> value and the <code>rect</code> width for horizontal trees. It doesn't always work consistently, but for the trees I am making, it seems to keep from getting too close to (or overlapping) edges and labels.</p>

<p>Ultimately, a better fix would be to find out how to draw the <code>rect</code> so that there is no clipping. Or a consistent way to calculate the specific <code>x</code> position in between tree edges and labels for any given tree, so as to center and size the stripe properly.</p>

<p>I would also be very interested in a method for annotating edges with colors or line styles.</p>
"
736514,20895,2009-04-10T02:18:38Z,41,R Random Forests Variable Importance,"<p>I am trying to use the random forests package for classification in R.</p>

<p>The Variable Importance Measures listed are:</p>

<ul>
<li>mean raw importance score of variable x for class 0</li>
<li>mean raw importance score of variable x for class 1</li>
<li><code>MeanDecreaseAccuracy</code></li>
<li><code>MeanDecreaseGini</code></li>
</ul>

<p>Now I know what these ""mean"" as in I know their definitions.  What I want to know is how to use them.</p>

<p>What I really want to know is what these values mean in only the context of how accurate they are, what is a good value, what is a bad value, what are the maximums and minimums, etc.</p>

<p>If a variable has a high <code>MeanDecreaseAccuracy</code> or <code>MeanDecreaseGini</code> does that mean it is important or unimportant?  Also any information on raw scores could be useful too.
I want to know everything there is to know about these numbers that is relevant to the application of them.  </p>

<p>An explanation that uses the words 'error', 'summation', or 'permutated' would be less helpful then a simpler explanation that didn't involve any discussion of how random forests works.</p>

<p>Like if I wanted someone to explain to me how to use a radio, I wouldn't expect the explanation to involve how a radio converts radio waves into sound.</p>
","R Random Forests Variable Importance <p>I am trying to use the random forests package for classification in R.</p>

<p>The Variable Importance Measures listed are:</p>

<ul>
<li>mean raw importance score of variable x for class 0</li>
<li>mean raw importance score of variable x for class 1</li>
<li><code>MeanDecreaseAccuracy</code></li>
<li><code>MeanDecreaseGini</code></li>
</ul>

<p>Now I know what these ""mean"" as in I know their definitions.  What I want to know is how to use them.</p>

<p>What I really want to know is what these values mean in only the context of how accurate they are, what is a good value, what is a bad value, what are the maximums and minimums, etc.</p>

<p>If a variable has a high <code>MeanDecreaseAccuracy</code> or <code>MeanDecreaseGini</code> does that mean it is important or unimportant?  Also any information on raw scores could be useful too.
I want to know everything there is to know about these numbers that is relevant to the application of them.  </p>

<p>An explanation that uses the words 'error', 'summation', or 'permutated' would be less helpful then a simpler explanation that didn't involve any discussion of how random forests works.</p>

<p>Like if I wanted someone to explain to me how to use a radio, I wouldn't expect the explanation to involve how a radio converts radio waves into sound.</p>
"
736541,85950,2009-04-10T02:32:21Z,12,Plots without titles/labels in R,"<p>In <a href=""http://www.r-project.org/"" rel=""nofollow noreferrer"">R</a> is there any way to produce plots which have no title and which use the space the title would otherwise have taken up?</p>

<p>In <code>plot()</code>, <code>main</code>, <code>sub</code>, <code>xlab</code>, and <code>ylab</code> all default to <code>NULL</code>, but this just leaves blank space where they would have been, ditto for setting them to ''.  It would be nice if not including them meant that the entire plot space was utilized rather than leaving extra empty space on the edges.  This is all especially relevant in printing plots to file devices like <code>pdf()</code>, <code>png()</code>, etc.</p>
","Plots without titles/labels in R <p>In <a href=""http://www.r-project.org/"" rel=""nofollow noreferrer"">R</a> is there any way to produce plots which have no title and which use the space the title would otherwise have taken up?</p>

<p>In <code>plot()</code>, <code>main</code>, <code>sub</code>, <code>xlab</code>, and <code>ylab</code> all default to <code>NULL</code>, but this just leaves blank space where they would have been, ditto for setting them to ''.  It would be nice if not including them meant that the entire plot space was utilized rather than leaving extra empty space on the edges.  This is all especially relevant in printing plots to file devices like <code>pdf()</code>, <code>png()</code>, etc.</p>
"
743622,14744,2009-04-13T11:13:51Z,106,Finding row index containing maximum value using R,"<p>Given the following matrix lets assume I want to find the maximum value in column two:</p>

<pre><code>mat &lt;- matrix(c(1:3,7:9,4:6), byrow = T, nc = 3)
mat
     [,1] [,2] [,3]
[1,]    1    2    3
[2,]    7    8    9
[3,]    4    5    6
</code></pre>

<p>I know <code>max(mat[,2])</code> will return 8. How can I return the row index, in this case row two?</p>
","Finding row index containing maximum value using R <p>Given the following matrix lets assume I want to find the maximum value in column two:</p>

<pre><code>mat &lt;- matrix(c(1:3,7:9,4:6), byrow = T, nc = 3)
mat
     [,1] [,2] [,3]
[1,]    1    2    3
[2,]    7    8    9
[3,]    4    5    6
</code></pre>

<p>I know <code>max(mat[,2])</code> will return 8. How can I return the row index, in this case row two?</p>
"
743812,14744,2009-04-13T12:52:51Z,125,Calculating moving average,"<p>I'm trying to use R to calculate the moving average over a series of values in a matrix. The normal R mailing list search hasn't been very helpful though. There doesn't seem to be a <a href=""http://www.statmethods.net/management/functions.html"" rel=""noreferrer"">built-in function</a> in R will allow me to calculate moving averages. Do any packages provide one? Or do I need to write my own?</p>
","Calculating moving average <p>I'm trying to use R to calculate the moving average over a series of values in a matrix. The normal R mailing list search hasn't been very helpful though. There doesn't seem to be a <a href=""http://www.statmethods.net/management/functions.html"" rel=""noreferrer"">built-in function</a> in R will allow me to calculate moving averages. Do any packages provide one? Or do I need to write my own?</p>
"
750703,85950,2009-04-15T07:55:21Z,28,"Suppressing ""null device"" output with R in batch mode","<p>I have a number of bash scripts which invoke R scripts for plotting things.  Something like:  </p>

<pre><code>#!/bin/bash
R --vanilla --slave &lt;&lt;RSCRIPT
cat(""Plotting $1 to $2\n"")
input &lt;- read.table(""$1"")
png(""$2"")
plot(as.numeric(input[1,]))
dev.off()
RSCRIPT
</code></pre>

<p>The problem is that despite <code>--slave</code>, the call to <code>dev.off()</code> prints the message <code>null device 1</code>.  Once there are a lot of plots being done, or for more complex scripts which plot to a number of files, this gets to be a real hassle.</p>

<p>Is there some way to suppress this message?</p>
","Suppressing ""null device"" output with R in batch mode <p>I have a number of bash scripts which invoke R scripts for plotting things.  Something like:  </p>

<pre><code>#!/bin/bash
R --vanilla --slave &lt;&lt;RSCRIPT
cat(""Plotting $1 to $2\n"")
input &lt;- read.table(""$1"")
png(""$2"")
plot(as.numeric(input[1,]))
dev.off()
RSCRIPT
</code></pre>

<p>The problem is that despite <code>--slave</code>, the call to <code>dev.off()</code> prints the message <code>null device 1</code>.  Once there are a lot of plots being done, or for more complex scripts which plot to a number of files, this gets to be a real hassle.</p>

<p>Is there some way to suppress this message?</p>
"
750786,85950,2009-04-15T08:31:35Z,94,What's the best way to use R scripts on the command line (terminal)?,"<p>It's very convenient to have R scripts for doing simple plots from the command line.  However, running R from bash scripts is not convenient at all.  The ideal might be something like</p>

<pre><code>#!/path/to/R
...
</code></pre>

<p>or</p>

<pre><code>#!/usr/bin/env R
...
</code></pre>

<p>but I haven't been able to make either of those work.</p>

<p>Another option is keeping the scripts purely in R, e.g. <code>script.R</code>, and invoking it with <code>R --file=script.R</code> or similar.  However, occasionally a script will rely on obscure command line switches at which point part of the code exists outside the script.  Example: sneaking things into R from bash via a local .Rprofile, the desired switches are then everything <code>--vanilla</code> implies except <code>--no-init-file</code>.</p>

<p>Another option is a bash script to store the R flags and be painlessly executable, which then calls the R script.  The problem is that this means a single program just got split into two files which now have to be keep in sync, transferred to new machines together, etc.</p>

<p>The option I currently despise least is embedding the R in a bash script:</p>

<pre><code>#!/bin/bash
... # usage message to catch bad input without invoking R
... # any bash pre-processing of input
... # etc
R --random-flags &lt;&lt;RSCRIPT
# R code goes here
RSCRIPT
</code></pre>

<p>Everything's in a single file.  It's executable and easily handles arguments.  The problem is that combining bash and R like this pretty much eliminates the possibility of any IDE not failing on one or the other, and makes my heart hurt real bad.</p>

<p>Is there some better way I'm missing?</p>
","What's the best way to use R scripts on the command line (terminal)? <p>It's very convenient to have R scripts for doing simple plots from the command line.  However, running R from bash scripts is not convenient at all.  The ideal might be something like</p>

<pre><code>#!/path/to/R
...
</code></pre>

<p>or</p>

<pre><code>#!/usr/bin/env R
...
</code></pre>

<p>but I haven't been able to make either of those work.</p>

<p>Another option is keeping the scripts purely in R, e.g. <code>script.R</code>, and invoking it with <code>R --file=script.R</code> or similar.  However, occasionally a script will rely on obscure command line switches at which point part of the code exists outside the script.  Example: sneaking things into R from bash via a local .Rprofile, the desired switches are then everything <code>--vanilla</code> implies except <code>--no-init-file</code>.</p>

<p>Another option is a bash script to store the R flags and be painlessly executable, which then calls the R script.  The problem is that this means a single program just got split into two files which now have to be keep in sync, transferred to new machines together, etc.</p>

<p>The option I currently despise least is embedding the R in a bash script:</p>

<pre><code>#!/bin/bash
... # usage message to catch bad input without invoking R
... # any bash pre-processing of input
... # etc
R --random-flags &lt;&lt;RSCRIPT
# R code goes here
RSCRIPT
</code></pre>

<p>Everything's in a single file.  It's executable and easily handles arguments.  The problem is that combining bash and R like this pretty much eliminates the possibility of any IDE not failing on one or the other, and makes my heart hurt real bad.</p>

<p>Is there some better way I'm missing?</p>
"
775116,1447,2009-04-21T23:30:47Z,7,How can a function parameter be used without mentioning it in the function body?,"<p>I've been trying to learn more about R (and writing C extensions) and I thought it might help to read the source for some well known packages.  I decided to start with rpart which is defined as:</p>

<pre><code>rpart &lt;- function(formula, data, weights, subset,
       na.action=na.rpart, method, model=FALSE, x=FALSE, y=TRUE,
       parms, control, cost, ...)
</code></pre>

<p>I did a quick search through the source and I don't see formula mentioned anywhere in the function body yet I know that somehow rpart is using that parameter.  How is it that rpart is using formula without its name being in the function body?</p>
","How can a function parameter be used without mentioning it in the function body? <p>I've been trying to learn more about R (and writing C extensions) and I thought it might help to read the source for some well known packages.  I decided to start with rpart which is defined as:</p>

<pre><code>rpart &lt;- function(formula, data, weights, subset,
       na.action=na.rpart, method, model=FALSE, x=FALSE, y=TRUE,
       parms, control, cost, ...)
</code></pre>

<p>I did a quick search through the source and I don't see formula mentioned anywhere in the function body yet I know that somehow rpart is using that parameter.  How is it that rpart is using formula without its name being in the function body?</p>
"
780796,84458,2009-04-23T08:29:19Z,39,Emacs ESS Mode - Tabbing for Comment Region,"<p>I am using the Emacs-Speaks-Statistics (ESS) mode for Emacs.  When editing R code, any comment lines (those starting with #) automatically get tabbed to the far right when I create a new line above it.  How should I change my .emacs.el file to fix this?</p>

<p>For example, I have:</p>

<pre><code># Comment
</code></pre>

<p>Now, after putting my cursor at the beginning of the line and pressing Enter, I get:</p>

<pre><code>                                # Comment
</code></pre>

<p>Thanks for any hints.</p>
","Emacs ESS Mode - Tabbing for Comment Region <p>I am using the Emacs-Speaks-Statistics (ESS) mode for Emacs.  When editing R code, any comment lines (those starting with #) automatically get tabbed to the far right when I create a new line above it.  How should I change my .emacs.el file to fix this?</p>

<p>For example, I have:</p>

<pre><code># Comment
</code></pre>

<p>Now, after putting my cursor at the beginning of the line and pressing Enter, I get:</p>

<pre><code>                                # Comment
</code></pre>

<p>Thanks for any hints.</p>
"
789602,94704,2009-04-25T19:51:45Z,2,What does %% mean?,"<p>From the question you can probably tell that I don't know much about code! My question is this:</p>

<p>What does this code mean?</p>

<pre><code>mnlong &lt;- 280.460 + .9856474 * time
mnlong &lt;- mnlong %% 360
mnlong[mnlong &lt; 0] &lt;- mnlong[mnlong &lt; 0] + 360
</code></pre>

<p>I understand that the <code>mnlong</code> and <code>time</code> are variables but the <code>%%</code> confuses me.</p>

<p>Could someone give me a basic description?</p>
","What does %% mean? <p>From the question you can probably tell that I don't know much about code! My question is this:</p>

<p>What does this code mean?</p>

<pre><code>mnlong &lt;- 280.460 + .9856474 * time
mnlong &lt;- mnlong %% 360
mnlong[mnlong &lt; 0] &lt;- mnlong[mnlong &lt; 0] + 360
</code></pre>

<p>I understand that the <code>mnlong</code> and <code>time</code> are variables but the <code>%%</code> confuses me.</p>

<p>Could someone give me a basic description?</p>
"
805027,85950,2009-04-30T01:32:43Z,4,Suppressing or setting CreationDate/ModDate in R pdf output,"<p>When R creates PDFs using pdf() it includes a CreationDate and a ModDate in the PDF.  I have a number of such generated PDFs in an svn repository and the effect is that when figures are remade by R, even with the same data, they appear as modified (rightly so) to svn.  What's the best way to get the two to play nicely together?</p>

<p>I could simply remove those lines from the PDFs outside of R, but this extra step is undesirable.<br>
I could set the system time to some fixed value as part of the running the scripts, but this is even less desirable.<br>
I could probably even convince svn to use a specialized diff which ignored changes on those lines, but that sounds like more trouble than it's worth.</p>

<p>A very pleasant solution would be if there were a way to prevent R putting those lines in the PDF file in the first place.  I have a file system to tell me when files were created and modified thank-you-very-much, I don't need that info stored within the file as well.</p>
","Suppressing or setting CreationDate/ModDate in R pdf output <p>When R creates PDFs using pdf() it includes a CreationDate and a ModDate in the PDF.  I have a number of such generated PDFs in an svn repository and the effect is that when figures are remade by R, even with the same data, they appear as modified (rightly so) to svn.  What's the best way to get the two to play nicely together?</p>

<p>I could simply remove those lines from the PDFs outside of R, but this extra step is undesirable.<br>
I could set the system time to some fixed value as part of the running the scripts, but this is even less desirable.<br>
I could probably even convince svn to use a specialized diff which ignored changes on those lines, but that sounds like more trouble than it's worth.</p>

<p>A very pleasant solution would be if there were a way to prevent R putting those lines in the PDF file in the first place.  I have a file system to tell me when files were created and modified thank-you-very-much, I don't need that info stored within the file as well.</p>
"
855798,1811,2009-05-13T02:34:55Z,0,"In R, what is a good way to aggregate String data","<p>In R (or S-PLUS), what is a good way to aggregate String data in a data frame?</p>

<p>Consider the following:</p>

<pre><code>myList &lt;- as.data.frame(c(""Bob"", ""Mary"", ""Bob"", ""Bob"", ""Joe""))
</code></pre>

<p>I would like the output to be:</p>

<pre><code> [Bob,  3
  Mary, 1
  Joe,  1]
</code></pre>

<p>Currently, the only way I know how to do this is with the summary function.</p>

<pre><code>&gt; summary(as.data.frame(myList))

 Bob :3                                
 Joe :1                                
 Mary:1      
</code></pre>

<p>This feels like a hack. Can anyone suggest a better way?</p>
","In R, what is a good way to aggregate String data <p>In R (or S-PLUS), what is a good way to aggregate String data in a data frame?</p>

<p>Consider the following:</p>

<pre><code>myList &lt;- as.data.frame(c(""Bob"", ""Mary"", ""Bob"", ""Bob"", ""Joe""))
</code></pre>

<p>I would like the output to be:</p>

<pre><code> [Bob,  3
  Mary, 1
  Joe,  1]
</code></pre>

<p>Currently, the only way I know how to do this is with the summary function.</p>

<pre><code>&gt; summary(as.data.frame(myList))

 Bob :3                                
 Joe :1                                
 Mary:1      
</code></pre>

<p>This feels like a hack. Can anyone suggest a better way?</p>
"
876711,422,2009-05-18T08:16:10Z,18,Plotting Simple Data in R,"<p>I have a comma separated file named <code>foo.csv</code> containing the following data:</p>

<pre><code>scale, serial, spawn, for, worker
5, 0.000178, 0.000288, 0.000292, 0.000300
10, 0.156986, 0.297926, 0.064509, 0.066297
12, 2.658998, 6.059502, 0.912733, 0.923606
15, 188.023411, 719.463264, 164.111459, 161.687982
</code></pre>

<p>I essentially have two questions:</p>

<p>1) How do I plot the first column (x-axis) versus the second column (y-axis)? I'm trying this (from reading <a href=""http://www.ats.ucla.edu/stat/R/gbe/scatter.htm"" rel=""noreferrer"">this site</a>):</p>

<pre><code>data &lt;- read.table(""foo.csv"", header=T,sep="","")
attach(data)
scale &lt;- data[1]
serial &lt;- data[2]
plot(scale,serial)
</code></pre>

<p>But I get this error back:</p>

<pre><code>Error in stripchart.default(x1, ...) : invalid plotting method
</code></pre>

<p>Any idea what I'm doing wrong? A <a href=""http://www.nabble.com/Problems-producing-a-simple-plot-td23347296.html"" rel=""noreferrer"">quick Google search</a> reveals someone else with the same problem but no relevant answer. UPDATE: It turns out it works fine if I skip the two assignment statements in the middle. Any idea why this is?</p>

<p>The second question follows pretty easily after the first:</p>

<p>2) How do I plot the first column (x-axis) versus all the other columns on the y-axis? I presume it's pretty easy once I get around the first problem I'm running into, but am just a bit new to R so I'm still wrapping my head around it.</p>
","Plotting Simple Data in R <p>I have a comma separated file named <code>foo.csv</code> containing the following data:</p>

<pre><code>scale, serial, spawn, for, worker
5, 0.000178, 0.000288, 0.000292, 0.000300
10, 0.156986, 0.297926, 0.064509, 0.066297
12, 2.658998, 6.059502, 0.912733, 0.923606
15, 188.023411, 719.463264, 164.111459, 161.687982
</code></pre>

<p>I essentially have two questions:</p>

<p>1) How do I plot the first column (x-axis) versus the second column (y-axis)? I'm trying this (from reading <a href=""http://www.ats.ucla.edu/stat/R/gbe/scatter.htm"" rel=""noreferrer"">this site</a>):</p>

<pre><code>data &lt;- read.table(""foo.csv"", header=T,sep="","")
attach(data)
scale &lt;- data[1]
serial &lt;- data[2]
plot(scale,serial)
</code></pre>

<p>But I get this error back:</p>

<pre><code>Error in stripchart.default(x1, ...) : invalid plotting method
</code></pre>

<p>Any idea what I'm doing wrong? A <a href=""http://www.nabble.com/Problems-producing-a-simple-plot-td23347296.html"" rel=""noreferrer"">quick Google search</a> reveals someone else with the same problem but no relevant answer. UPDATE: It turns out it works fine if I skip the two assignment statements in the middle. Any idea why this is?</p>

<p>The second question follows pretty easily after the first:</p>

<p>2) How do I plot the first column (x-axis) versus all the other columns on the y-axis? I presume it's pretty easy once I get around the first problem I'm running into, but am just a bit new to R so I'm still wrapping my head around it.</p>
"
936748,57458,2009-06-01T20:56:30Z,25,Declaring a Const Variable in R,"<p>I'm working in R, and I'd like to define some variables that I (or one of my collaborators) cannot change. In C++ I'd do this:</p>

<pre><code>const std::string path( ""/projects/current"" );
</code></pre>

<p>How do I do this in the R programming language?</p>

<p>Edit for clarity: I know that I can define strings like this in R:</p>

<pre><code>path = ""/projects/current""
</code></pre>

<p>What I really want is a language construct that guarantees that nobody can ever change the value associated with the variable named ""path.""</p>

<p>Edit to respond to comments:</p>

<p>It's technically true that const is a compile-time guarantee, but it would be valid in my mind that the R interpreter would throw stop execution with an error message. For example, look what happens when you try to assign values to a numeric constant:</p>

<pre><code>&gt; 7 = 3
Error in 7 = 3 : invalid (do_set) left-hand side to assignment
</code></pre>

<p>So what I really want is a language feature that allows you to assign values once and only once, and there should be some kind of error when you try to assign a new value to a variabled declared as const. I don't care if the error occurs at run-time, especially if there's no compilation phase. This might not technically be const by the Wikipedia definition, but it's very close. It also looks like this is not possible in the R programming language.</p>
","Declaring a Const Variable in R <p>I'm working in R, and I'd like to define some variables that I (or one of my collaborators) cannot change. In C++ I'd do this:</p>

<pre><code>const std::string path( ""/projects/current"" );
</code></pre>

<p>How do I do this in the R programming language?</p>

<p>Edit for clarity: I know that I can define strings like this in R:</p>

<pre><code>path = ""/projects/current""
</code></pre>

<p>What I really want is a language construct that guarantees that nobody can ever change the value associated with the variable named ""path.""</p>

<p>Edit to respond to comments:</p>

<p>It's technically true that const is a compile-time guarantee, but it would be valid in my mind that the R interpreter would throw stop execution with an error message. For example, look what happens when you try to assign values to a numeric constant:</p>

<pre><code>&gt; 7 = 3
Error in 7 = 3 : invalid (do_set) left-hand side to assignment
</code></pre>

<p>So what I really want is a language feature that allows you to assign values once and only once, and there should be some kind of error when you try to assign a new value to a variabled declared as const. I don't care if the error occurs at run-time, especially if there's no compilation phase. This might not technically be const by the Wikipedia definition, but it's very close. It also looks like this is not possible in the R programming language.</p>
"
937346,58434,2009-06-01T23:52:20Z,3,How to link with static libraries when building an R package,"<p>I'm creating a package that is going to be used by R (the statistical program), I'm not an expert using this application but I have managed to create a very simple package, using the following logic, I have some classes in C++, as the code has to be compiled using the R compiler and it only allows C code, I have a wrapper C code that call the C++ methods, and later I have an R script that call the methods exposed by the C code, so basically is a communication like R &lt;-> C&lt;->C++.</p>

<p>The full tutorial that I used to create this package is found <a href=""http://www.stat.columbia.edu/~gelman/stuff_for_blog/AlanRPackageTutorial.pdf"" rel=""nofollow noreferrer"">here</a>, I add it as a reference.</p>

<p>Now my problem is that I need to add some functionality to the package that I already created, what I need to do is to add code for late binding to a COM object which is another product that I created and that is registered using regasm tool.</p>

<p>This is the c++ code that I'm using to try to late bind to the COM object, I'm trying to use IDispatch to do so:</p>

<pre><code>{
...
CLSID clsid;    
HRESULT hr = CLSIDFromProgID((WCHAR*)""My Com object ProgId"", &clsid);
if(FAILED(hr))                      
  return;   
...     
}
</code></pre>

<p>I didn't paste the whole code because only with these lines the compiler is giving me troubles already, the command I use to compile is </p>

<pre><code>R CMD SHLIB Cclass.cc C++class.cc</code></pre>

<p>Where ""Cclass.cc"" has the C code that call the c++ methods and ""C++class.cc"" is actually the C++ code.</p>

<p>When I compile these classes the compiler says <pre><code>""undefined reference to `CLSIDFromProgID@8'collect2: ld returned 1 exit status""</pre></code></p>

<p>I""m sure I have added all the header files that I need, that's why I believe my problem is that I'm not including ole32.lib and oleaut32.lib which are static libraries.</p>

<p>So, my question is, how can I include this libraries in order to be able to use the methods for late binding, like CLSIDFromProgID(...) or QueryInterface(...). Also if anyone believes that my problem is not linking this libraries, but something else, it would be great if can point me to which my problem may be.</p>

<p>Also have in mind that I need to link with those statics libraries in a way that they can be compiled without problem by the R compiler, which if I'm not wrong is a merely c compiler.</p>
","How to link with static libraries when building an R package <p>I'm creating a package that is going to be used by R (the statistical program), I'm not an expert using this application but I have managed to create a very simple package, using the following logic, I have some classes in C++, as the code has to be compiled using the R compiler and it only allows C code, I have a wrapper C code that call the C++ methods, and later I have an R script that call the methods exposed by the C code, so basically is a communication like R &lt;-> C&lt;->C++.</p>

<p>The full tutorial that I used to create this package is found <a href=""http://www.stat.columbia.edu/~gelman/stuff_for_blog/AlanRPackageTutorial.pdf"" rel=""nofollow noreferrer"">here</a>, I add it as a reference.</p>

<p>Now my problem is that I need to add some functionality to the package that I already created, what I need to do is to add code for late binding to a COM object which is another product that I created and that is registered using regasm tool.</p>

<p>This is the c++ code that I'm using to try to late bind to the COM object, I'm trying to use IDispatch to do so:</p>

<pre><code>{
...
CLSID clsid;    
HRESULT hr = CLSIDFromProgID((WCHAR*)""My Com object ProgId"", &clsid);
if(FAILED(hr))                      
  return;   
...     
}
</code></pre>

<p>I didn't paste the whole code because only with these lines the compiler is giving me troubles already, the command I use to compile is </p>

<pre><code>R CMD SHLIB Cclass.cc C++class.cc</code></pre>

<p>Where ""Cclass.cc"" has the C code that call the c++ methods and ""C++class.cc"" is actually the C++ code.</p>

<p>When I compile these classes the compiler says <pre><code>""undefined reference to `CLSIDFromProgID@8'collect2: ld returned 1 exit status""</pre></code></p>

<p>I""m sure I have added all the header files that I need, that's why I believe my problem is that I'm not including ole32.lib and oleaut32.lib which are static libraries.</p>

<p>So, my question is, how can I include this libraries in order to be able to use the methods for late binding, like CLSIDFromProgID(...) or QueryInterface(...). Also if anyone believes that my problem is not linking this libraries, but something else, it would be great if can point me to which my problem may be.</p>

<p>Also have in mind that I need to link with those statics libraries in a way that they can be compiled without problem by the R compiler, which if I'm not wrong is a merely c compiler.</p>
"
952275,69749,2009-06-04T18:25:55Z,58,Regex group capture in R with multiple capture-groups,"<p>In R, is it possible to extract group capture from a regular expression match?  As far as I can tell, none of <code>grep</code>, <code>grepl</code>, <code>regexpr</code>, <code>gregexpr</code>, <code>sub</code>, or <code>gsub</code> return the group captures.</p>

<p>I need to extract key-value pairs from strings that are encoded thus:</p>

<pre><code>\((.*?) :: (0\.[0-9]+)\)
</code></pre>

<p>I can always just do multiple full-match greps, or do some outside (non-R) processing, but I was hoping I can do it all within R.  Is there's a function or a package that provides such a function to do this?</p>
","Regex group capture in R with multiple capture-groups <p>In R, is it possible to extract group capture from a regular expression match?  As far as I can tell, none of <code>grep</code>, <code>grepl</code>, <code>regexpr</code>, <code>gregexpr</code>, <code>sub</code>, or <code>gsub</code> return the group captures.</p>

<p>I need to extract key-value pairs from strings that are encoded thus:</p>

<pre><code>\((.*?) :: (0\.[0-9]+)\)
</code></pre>

<p>I can always just do multiple full-match greps, or do some outside (non-R) processing, but I was hoping I can do it all within R.  Is there's a function or a package that provides such a function to do this?</p>
"
1007495,23524,2009-06-17T14:44:04Z,3,Determining distribution so I can generate test data,"<p>I've got about 100M value/count pairs in a text file on my Linux machine.  I'd like to figure out what sort of formula I would use to generate more pairs that follow the same distribution.  </p>

<p>From a casual inspection, it looks power law-ish, but I need to be a bit more rigorous than that.  Can R do this easily?  If so, how?  Is there something else that works better?</p>
","Determining distribution so I can generate test data <p>I've got about 100M value/count pairs in a text file on my Linux machine.  I'd like to figure out what sort of formula I would use to generate more pairs that follow the same distribution.  </p>

<p>From a casual inspection, it looks power law-ish, but I need to be a bit more rigorous than that.  Can R do this easily?  If so, how?  Is there something else that works better?</p>
"
1022649,NA,2009-06-20T21:53:56Z,7,Weighted slope one algorithm? (porting from Python to R),"<p>I was reading about the <a href=""http://en.wikipedia.org/wiki/Slope_One#Slope_one_collaborative_filtering_for_rated_resources"" rel=""nofollow noreferrer"">Weighted slope one algorithm</a> ( and more
formally <a href=""http://www.daniel-lemire.com/fr/documents/publications/lemiremaclachlan_sdm05.pdf"" rel=""nofollow noreferrer"">here (PDF)</a>) which is supposed to take item ratings from different users and, given a user vector containing at least 1 rating and 1 missing value, predict the missing ratings.</p>

<p>I found a <a href=""http://www.serpentine.com/wordpress/wp-content/uploads/2006/12/slope_one.py.txt"" rel=""nofollow noreferrer"">Python implementation of the algorithm</a>, but I'm having a hard time porting it to <a href=""http://www.r-project.org/"" rel=""nofollow noreferrer"">R</a> (which I'm more comfortable with). Below is my attempt. Any suggestions on how to make it work?</p>

<p>Thanks in advance, folks.</p>

<pre><code># take a 'training' set, tr.set and a vector with some missing ratings, d
pred=function(tr.set,d) {
    tr.set=rbind(tr.set,d)
    n.items=ncol(tr.set)

    # tally frequencies to use as weights
    freqs=sapply(1:n.items, function(i) {
        unlist(lapply(1:n.items, function(j) {
            sum(!(i==j)&amp;!is.na(tr.set[,i])&amp;!is.na(tr.set[,j])) })) })

    # estimate product-by-product mean differences in ratings
    diffs=array(NA, dim=c(n.items,n.items))
    diffs=sapply(1:n.items, function(i) {
        unlist(lapply(1:n.items, function(j) {
            diffs[j,i]=mean(tr.set[,i]-tr.set[,j],na.rm=T) })) })

    # create an output vector with NAs for all the items the user has already rated
    pred.out=as.numeric(is.na(d))
    pred.out[!is.na(d)]=NA

    a=which(!is.na(pred.out))
    b=which(is.na(pred.out))

    # calculated the weighted slope one estimate
    pred.out[a]=sapply(a, function(i) {
        sum(unlist(lapply(b,function (j) {
            sum((d[j]+diffs[j,i])*freqs[j,i])/rowSums(freqs)[i] }))) })

    names(pred.out)=colnames(tr.set)
    return(pred.out) }
# end function

# test, using example from [3]
alice=c(squid=1.0, octopus=0.2, cuttlefish=0.5, nautilus=NA)
bob=c(squid=1.0, octopus=0.5, cuttlefish=NA, nautilus=0.2)
carole=c(squid=0.2, octopus=1.0, cuttlefish=0.4, nautilus=0.4)
dave=c(squid=NA, octopus=0.4, cuttlefish=0.9, nautilus=0.5)
tr.set2=rbind(alice,bob,carole,dave)
lucy2=c(squid=0.4, octopus=NA, cuttlefish=NA, nautilus=NA)
pred(tr.set2,lucy2)
# not correct
# correct(?): {'nautilus': 0.10, 'octopus': 0.23, 'cuttlefish': 0.25}
</code></pre>
","Weighted slope one algorithm? (porting from Python to R) <p>I was reading about the <a href=""http://en.wikipedia.org/wiki/Slope_One#Slope_one_collaborative_filtering_for_rated_resources"" rel=""nofollow noreferrer"">Weighted slope one algorithm</a> ( and more
formally <a href=""http://www.daniel-lemire.com/fr/documents/publications/lemiremaclachlan_sdm05.pdf"" rel=""nofollow noreferrer"">here (PDF)</a>) which is supposed to take item ratings from different users and, given a user vector containing at least 1 rating and 1 missing value, predict the missing ratings.</p>

<p>I found a <a href=""http://www.serpentine.com/wordpress/wp-content/uploads/2006/12/slope_one.py.txt"" rel=""nofollow noreferrer"">Python implementation of the algorithm</a>, but I'm having a hard time porting it to <a href=""http://www.r-project.org/"" rel=""nofollow noreferrer"">R</a> (which I'm more comfortable with). Below is my attempt. Any suggestions on how to make it work?</p>

<p>Thanks in advance, folks.</p>

<pre><code># take a 'training' set, tr.set and a vector with some missing ratings, d
pred=function(tr.set,d) {
    tr.set=rbind(tr.set,d)
    n.items=ncol(tr.set)

    # tally frequencies to use as weights
    freqs=sapply(1:n.items, function(i) {
        unlist(lapply(1:n.items, function(j) {
            sum(!(i==j)&amp;!is.na(tr.set[,i])&amp;!is.na(tr.set[,j])) })) })

    # estimate product-by-product mean differences in ratings
    diffs=array(NA, dim=c(n.items,n.items))
    diffs=sapply(1:n.items, function(i) {
        unlist(lapply(1:n.items, function(j) {
            diffs[j,i]=mean(tr.set[,i]-tr.set[,j],na.rm=T) })) })

    # create an output vector with NAs for all the items the user has already rated
    pred.out=as.numeric(is.na(d))
    pred.out[!is.na(d)]=NA

    a=which(!is.na(pred.out))
    b=which(is.na(pred.out))

    # calculated the weighted slope one estimate
    pred.out[a]=sapply(a, function(i) {
        sum(unlist(lapply(b,function (j) {
            sum((d[j]+diffs[j,i])*freqs[j,i])/rowSums(freqs)[i] }))) })

    names(pred.out)=colnames(tr.set)
    return(pred.out) }
# end function

# test, using example from [3]
alice=c(squid=1.0, octopus=0.2, cuttlefish=0.5, nautilus=NA)
bob=c(squid=1.0, octopus=0.5, cuttlefish=NA, nautilus=0.2)
carole=c(squid=0.2, octopus=1.0, cuttlefish=0.4, nautilus=0.4)
dave=c(squid=NA, octopus=0.4, cuttlefish=0.9, nautilus=0.5)
tr.set2=rbind(alice,bob,carole,dave)
lucy2=c(squid=0.4, octopus=NA, cuttlefish=NA, nautilus=NA)
pred(tr.set2,lucy2)
# not correct
# correct(?): {'nautilus': 0.10, 'octopus': 0.23, 'cuttlefish': 0.25}
</code></pre>
"
1088639,57458,2009-07-06T18:48:46Z,18,Static Variables in R,"<p>I have a function in R that I call multiple times. I want to keep track of the number of times that I've called it and use that to make decisions on what to do inside of the function. Here's what I have right now:</p>

<pre><code>f = function( x ) {
   count &lt;&lt;- count + 1
   return( mean(x) )
}

count = 1
numbers = rnorm( n = 100, mean = 0, sd = 1 )
for ( x in seq(1,100) ) {
   mean = f( numbers )
   print( count )
}
</code></pre>

<p>I don't like that I have to declare the variable count outside the scope of the function. In C or C++ I could just make a static variable. Can I do a similar thing in the R programming language?</p>
","Static Variables in R <p>I have a function in R that I call multiple times. I want to keep track of the number of times that I've called it and use that to make decisions on what to do inside of the function. Here's what I have right now:</p>

<pre><code>f = function( x ) {
   count &lt;&lt;- count + 1
   return( mean(x) )
}

count = 1
numbers = rnorm( n = 100, mean = 0, sd = 1 )
for ( x in seq(1,100) ) {
   mean = f( numbers )
   print( count )
}
</code></pre>

<p>I don't like that I have to declare the variable count outside the scope of the function. In C or C++ I could just make a static variable. Can I do a similar thing in the R programming language?</p>
"
1092506,130633,2009-07-07T13:58:31Z,2,Line functions in R,"<p>I was wondering if it was possible to graph three lines in R using functions. For instance, how could I get the functions:</p>

<pre><code>3x+1 
4x+2
x+1 
</code></pre>

<p>to show up on the same graph in r?</p>
","Line functions in R <p>I was wondering if it was possible to graph three lines in R using functions. For instance, how could I get the functions:</p>

<pre><code>3x+1 
4x+2
x+1 
</code></pre>

<p>to show up on the same graph in r?</p>
"
1098210,84458,2009-07-08T13:51:15Z,2,Emacs and ESS: Using the correct version of R,"<p>I have installed R-2.9.1 and I am using Emacs+ESS. When I start an R process, though, the version of R that gets used by Emacs is 2.6.  I thought maybe Emacs was running R from a weird starting directory.  However, if I select my home directory ESS still starts R 2.6. (Running R at the terminal correctly brings up version 2.9.1.)</p>

<p>How do I add a new ESS process, or change the properties of the current R process, so that I can run my newer version of R?</p>
","Emacs and ESS: Using the correct version of R <p>I have installed R-2.9.1 and I am using Emacs+ESS. When I start an R process, though, the version of R that gets used by Emacs is 2.6.  I thought maybe Emacs was running R from a weird starting directory.  However, if I select my home directory ESS still starts R 2.6. (Running R at the terminal correctly brings up version 2.9.1.)</p>

<p>How do I add a new ESS process, or change the properties of the current R process, so that I can run my newer version of R?</p>
"
1105659,60628,2009-07-09T18:20:00Z,41,How to add variable key/value pair to list object?,"<p>I have two variables, <code>key</code> and <code>value</code>, and I want to add them as a key/value pair to a list:</p>

<pre><code>key = ""width""
value = 32

mylist = list()
mylist$key = value
</code></pre>

<p>The result is this:</p>

<pre><code>mylist
# $key
# [1] 32
</code></pre>

<p>But I would like this instead:</p>

<pre><code>mylist
# $width
# [1] 32
</code></pre>

<p>How can I do this?</p>
","How to add variable key/value pair to list object? <p>I have two variables, <code>key</code> and <code>value</code>, and I want to add them as a key/value pair to a list:</p>

<pre><code>key = ""width""
value = 32

mylist = list()
mylist$key = value
</code></pre>

<p>The result is this:</p>

<pre><code>mylist
# $key
# [1] 32
</code></pre>

<p>But I would like this instead:</p>

<pre><code>mylist
# $width
# [1] 32
</code></pre>

<p>How can I do this?</p>
"
1107605,60628,2009-07-10T03:55:08Z,6,Is there an Emacs mode for Rscript?,"<p>Is there any usable emacs mode for <code>Rscript</code>? </p>

<p>(<code>Rscript</code> is the script front-end for the <a href=""http://www.r-project.org/"" rel=""nofollow noreferrer"">R</a> language.)</p>

<p>If I type this:</p>

<pre><code>#!/usr/bin/Rscript
print(commandArgs(TRUE))
</code></pre>

<p>and do <code>indent</code> in the <a href=""http://ess.r-project.org/"" rel=""nofollow noreferrer"">ESS</a> R-mode it indents the first line like crazy, since it sees it as a comment:</p>

<pre><code>                          #!/usr/bin/Rscript
print(commandArgs(TRUE))
</code></pre>
","Is there an Emacs mode for Rscript? <p>Is there any usable emacs mode for <code>Rscript</code>? </p>

<p>(<code>Rscript</code> is the script front-end for the <a href=""http://www.r-project.org/"" rel=""nofollow noreferrer"">R</a> language.)</p>

<p>If I type this:</p>

<pre><code>#!/usr/bin/Rscript
print(commandArgs(TRUE))
</code></pre>

<p>and do <code>indent</code> in the <a href=""http://ess.r-project.org/"" rel=""nofollow noreferrer"">ESS</a> R-mode it indents the first line like crazy, since it sees it as a comment:</p>

<pre><code>                          #!/usr/bin/Rscript
print(commandArgs(TRUE))
</code></pre>
"
1109017,60628,2009-07-10T11:25:47Z,39,How do you print to stderr in R?,"<p>How do you print to <code>stderr</code> in <code>R</code>?</p>

<p>This would especially useful for scripts written in <code>Rscript</code>.</p>
","How do you print to stderr in R? <p>How do you print to <code>stderr</code> in <code>R</code>?</p>

<p>This would especially useful for scripts written in <code>Rscript</code>.</p>
"
1110363,60628,2009-07-10T15:46:06Z,5,Is there a package to process command line options in R?,"<p>Is there a package to process command-line options in R? </p>

<p>I know <code>commandArgs</code>, but it's too basic. Its result is basically the equivalent to <code>argc</code> and <code>argv</code> in <code>C</code>, but I'd need something on top of that, just like <code>boost::program_options</code> in <code>C++</code>, or <code>GetOptions::Long</code> in <code>perl</code>.</p>

<p>In particular, I'd like to specify in advance what options are allowed and give an error message if the user specifies something else. </p>

<p>The call would be like this (with user options --width=32 --file=foo.txt):</p>

<pre><code>R --vanilla --args --width=32 --file=foo.txt &lt; myscript.R
</code></pre>

<p>or, if <code>Rscript</code> is used:</p>

<pre><code>myscript.R --width=32 --file=foo.txt 
</code></pre>

<p>(Please don't say, ""why don't you write it yourself, it's not that hard"". In other languages you don't have to write it yourself either. :)</p>
","Is there a package to process command line options in R? <p>Is there a package to process command-line options in R? </p>

<p>I know <code>commandArgs</code>, but it's too basic. Its result is basically the equivalent to <code>argc</code> and <code>argv</code> in <code>C</code>, but I'd need something on top of that, just like <code>boost::program_options</code> in <code>C++</code>, or <code>GetOptions::Long</code> in <code>perl</code>.</p>

<p>In particular, I'd like to specify in advance what options are allowed and give an error message if the user specifies something else. </p>

<p>The call would be like this (with user options --width=32 --file=foo.txt):</p>

<pre><code>R --vanilla --args --width=32 --file=foo.txt &lt; myscript.R
</code></pre>

<p>or, if <code>Rscript</code> is used:</p>

<pre><code>myscript.R --width=32 --file=foo.txt 
</code></pre>

<p>(Please don't say, ""why don't you write it yourself, it's not that hard"". In other languages you don't have to write it yourself either. :)</p>
"
1114699,136862,2009-07-11T21:36:42Z,6,Creating an adjacency list from a data.frame,"<p>I have a data.frame with 2 columns: Node A, Node B. Each entry in the frame implies an edge in a graph between node A and B. </p>

<p>There must be a nice one-liner to convert this data.frame into an adjacency list. Any hints?</p>
","Creating an adjacency list from a data.frame <p>I have a data.frame with 2 columns: Node A, Node B. Each entry in the frame implies an edge in a graph between node A and B. </p>

<p>There must be a nice one-liner to convert this data.frame into an adjacency list. Any hints?</p>
"
1125907,130633,2009-07-14T14:46:43Z,3,Moving an R Plot header,"<p>I was trying to create a graph in R Plot and was just wondering if there was any way to move the side header label closer to the graph.</p>

<p>I've made the font smaller and put the label into two lines, but when I put it into two lines the top line falls off the screen and the bottom line is rather far away from the numbered Y-Axis of the graph.  Is there anyway to move the label closer to the y-axis so the whole thing is visible?</p>
","Moving an R Plot header <p>I was trying to create a graph in R Plot and was just wondering if there was any way to move the side header label closer to the graph.</p>

<p>I've made the font smaller and put the label into two lines, but when I put it into two lines the top line falls off the screen and the bottom line is rather far away from the numbered Y-Axis of the graph.  Is there anyway to move the label closer to the y-axis so the whole thing is visible?</p>
"
1133172,130633,2009-07-15T18:41:34Z,5,Can you use R terminal commands on a Mac computer?,"<p>I wrote some code in school to basically bring up different graphs from R and I had wanted to use it on a Mac computer.  </p>

<p>Is there are way to use R terminal commands on a Mac computer and is there a place where I could get more information about these Mac R Terminal commands? Thanks so much!</p>
","Can you use R terminal commands on a Mac computer? <p>I wrote some code in school to basically bring up different graphs from R and I had wanted to use it on a Mac computer.  </p>

<p>Is there are way to use R terminal commands on a Mac computer and is there a place where I could get more information about these Mac R Terminal commands? Thanks so much!</p>
"
1136709,85148,2009-07-16T10:26:36Z,9,Extend my Java application with R?,"<p>I am building an application that I want to have extended with modules that does some nr crunching and I would like to have R for that. What are my best options for extending my Java application with R?</p>
","Extend my Java application with R? <p>I am building an application that I want to have extended with modules that does some nr crunching and I would like to have R for that. What are my best options for extending my Java application with R?</p>
"
1142294,140049,2009-07-17T09:35:57Z,11,How do I plot a classification graph of a SVM in R,"<p>I have an SVM in R and I would now like to plot the classification space for this machine. I have found some examples on the Internet, but I can't seem to make sense of them.</p>

<p>My R script is as follows:</p>

<pre><code>library(e1071)
day_of_week &lt;- c(0,1,2,3,4,5,6)
holiday &lt;- factor( c(T, F, F, F, F, F, T) )
model &lt;- svm(day_of_week, holiday)
plot(model, day_of_week, holiday)
</code></pre>

<p>I cannot get the plot command to work. I would like a graph something like this <a href=""http://bm2.genes.nig.ac.jp/RGM2/R_current/library/e1071/man/images/plot.svm_001.png"" rel=""noreferrer"">http://bm2.genes.nig.ac.jp/RGM2/R_current/library/e1071/man/images/plot.svm_001.png</a> </p>
","How do I plot a classification graph of a SVM in R <p>I have an SVM in R and I would now like to plot the classification space for this machine. I have found some examples on the Internet, but I can't seem to make sense of them.</p>

<p>My R script is as follows:</p>

<pre><code>library(e1071)
day_of_week &lt;- c(0,1,2,3,4,5,6)
holiday &lt;- factor( c(T, F, F, F, F, F, T) )
model &lt;- svm(day_of_week, holiday)
plot(model, day_of_week, holiday)
</code></pre>

<p>I cannot get the plot command to work. I would like a graph something like this <a href=""http://bm2.genes.nig.ac.jp/RGM2/R_current/library/e1071/man/images/plot.svm_001.png"" rel=""noreferrer"">http://bm2.genes.nig.ac.jp/RGM2/R_current/library/e1071/man/images/plot.svm_001.png</a> </p>
"
1154242,130633,2009-07-20T15:25:31Z,106,Getting rid of axis values in R Plot,"<p>I was just wondering if there is a way to get rid of axis values, either the x-axis or y-axis respectively, in an r-plot graph. I know that axes = false will get rid of the entire axis, but I would only like to get rid of the numbering.  Thanks so much!                 </p>
","Getting rid of axis values in R Plot <p>I was just wondering if there is a way to get rid of axis values, either the x-axis or y-axis respectively, in an r-plot graph. I know that axes = false will get rid of the entire axis, but I would only like to get rid of the numbering.  Thanks so much!                 </p>
"
1163640,80458,2009-07-22T07:34:10Z,4,How to reduce size of R plots in EPS format?,"<p>I have a histogram with several hundred items, for which I do a Q-Q plot. This results in EPS that is 2.5 megabytes large. This is too much for a figure that is only going to be included in a publication and is not going to be viewed at 100x magnification.</p>

<p>Is there any option in R to somehow output smaller EPS? I have searched docs to no avail. Or is my best option to, say, rasterize it afterwards at 300 dpi? If that's the case, any recommendations for the tool for this job?</p>

<p>The R code for the plot is nothing fancy:</p>

<pre><code>postscript(filename)
qqnorm(n, main=title))
qqline(n)
dev.off()
</code></pre>

<p>Thanks.</p>

<p>EDIT: Doh! My question mentioned outputting EPS, and then converting it to some raster format. When of course I could just generate PNG in the first place from R. Thanks for all the answers.</p>
","How to reduce size of R plots in EPS format? <p>I have a histogram with several hundred items, for which I do a Q-Q plot. This results in EPS that is 2.5 megabytes large. This is too much for a figure that is only going to be included in a publication and is not going to be viewed at 100x magnification.</p>

<p>Is there any option in R to somehow output smaller EPS? I have searched docs to no avail. Or is my best option to, say, rasterize it afterwards at 300 dpi? If that's the case, any recommendations for the tool for this job?</p>

<p>The R code for the plot is nothing fancy:</p>

<pre><code>postscript(filename)
qqnorm(n, main=title))
qqline(n)
dev.off()
</code></pre>

<p>Thanks.</p>

<p>EDIT: Doh! My question mentioned outputting EPS, and then converting it to some raster format. When of course I could just generate PNG in the first place from R. Thanks for all the answers.</p>
"
1166157,NA,2009-07-22T15:36:30Z,1,Tutorial Using R on an Amazon Ec2 using just browser for building a regression model,"<p>Assume I have huge huge data and no money for hardware for more RAM for R AND software like Windows or any non open source</p>

<p>. Just an internet connection. and an university Amazon ec2 account.</p>

<p>Could you please guide me to a step by step- copy and paste coding tutorial on building a model using any Package on Amazon ec2.</p>

<p>Note- I know BIOCEP can do this, and Robert Grossman gave a tutorial on using R on Amazon Ec2. I just need a tutorial that say uses a R GUI like Rattle to build model on Amazon Ec2.</p>

<p>Assume I am a statistican with no knowledge of Amazon ec2 or using R there</p>
","Tutorial Using R on an Amazon Ec2 using just browser for building a regression model <p>Assume I have huge huge data and no money for hardware for more RAM for R AND software like Windows or any non open source</p>

<p>. Just an internet connection. and an university Amazon ec2 account.</p>

<p>Could you please guide me to a step by step- copy and paste coding tutorial on building a model using any Package on Amazon ec2.</p>

<p>Note- I know BIOCEP can do this, and Robert Grossman gave a tutorial on using R on Amazon Ec2. I just need a tutorial that say uses a R GUI like Rattle to build model on Amazon Ec2.</p>

<p>Assume I am a statistican with no knowledge of Amazon ec2 or using R there</p>
"
1167448,86684,2009-07-22T19:00:09Z,29,Most mature sparse matrix package for R?,"<p>There are at least two sparse matrix packages for R.  I'm looking into these because I'm working with datasets that are too big and sparse to fit in memory with a dense representation.  I want basic linear algebra routines, plus the ability to easily write C code to operate on them.  Which library is the most mature and best to use?</p>

<p>So far I've found</p>

<ul>
<li><a href=""http://cran.r-project.org/web/packages/Matrix"" rel=""noreferrer"">Matrix</a> which has many reverse dependencies, implying it's the most used one.</li>
<li><a href=""http://cran.r-project.org/web/packages/SparseM/index.html"" rel=""noreferrer"">SparseM</a> which doesn't have as many reverse deps.</li>
<li>Various graph libraries probably have their own (implicit) versions of this; e.g. <a href=""http://cran.r-project.org/web/packages/igraph/index.html"" rel=""noreferrer"">igraph</a> and <a href=""http://cran.r-project.org/web/packages/network/index.html"" rel=""noreferrer"">network</a> (the latter is part of <a href=""http://statnetproject.org/"" rel=""noreferrer"">statnet</a>).  These are too specialized for my needs.</li>
</ul>

<p>Anyone have experience with this?</p>

<p>From searching around <a href=""http://rseek.org"" rel=""noreferrer"">RSeek.org</a> a little bit, the <a href=""http://cran.r-project.org/web/packages/Matrix"" rel=""noreferrer"">Matrix</a> package seems the most commonly mentioned one.  I often think of <a href=""http://cran.r-project.org/web/views/"" rel=""noreferrer"">CRAN Task Views</a> as fairly authoritative, and the <a href=""http://cran.r-project.org/web/views/Multivariate.html"" rel=""noreferrer"">Multivariate Task View</a> mentions Matrix and SparseM.</p>
","Most mature sparse matrix package for R? <p>There are at least two sparse matrix packages for R.  I'm looking into these because I'm working with datasets that are too big and sparse to fit in memory with a dense representation.  I want basic linear algebra routines, plus the ability to easily write C code to operate on them.  Which library is the most mature and best to use?</p>

<p>So far I've found</p>

<ul>
<li><a href=""http://cran.r-project.org/web/packages/Matrix"" rel=""noreferrer"">Matrix</a> which has many reverse dependencies, implying it's the most used one.</li>
<li><a href=""http://cran.r-project.org/web/packages/SparseM/index.html"" rel=""noreferrer"">SparseM</a> which doesn't have as many reverse deps.</li>
<li>Various graph libraries probably have their own (implicit) versions of this; e.g. <a href=""http://cran.r-project.org/web/packages/igraph/index.html"" rel=""noreferrer"">igraph</a> and <a href=""http://cran.r-project.org/web/packages/network/index.html"" rel=""noreferrer"">network</a> (the latter is part of <a href=""http://statnetproject.org/"" rel=""noreferrer"">statnet</a>).  These are too specialized for my needs.</li>
</ul>

<p>Anyone have experience with this?</p>

<p>From searching around <a href=""http://rseek.org"" rel=""noreferrer"">RSeek.org</a> a little bit, the <a href=""http://cran.r-project.org/web/packages/Matrix"" rel=""noreferrer"">Matrix</a> package seems the most commonly mentioned one.  I often think of <a href=""http://cran.r-project.org/web/views/"" rel=""noreferrer"">CRAN Task Views</a> as fairly authoritative, and the <a href=""http://cran.r-project.org/web/views/Multivariate.html"" rel=""noreferrer"">Multivariate Task View</a> mentions Matrix and SparseM.</p>
"
1169248,2002705,2009-07-23T02:20:53Z,338,R function for testing if a vector contains a given element,"<p>In R, how do you test a vector to see if it contains a given element?</p>
","R function for testing if a vector contains a given element <p>In R, how do you test a vector to see if it contains a given element?</p>
"
1169330,37751,2009-07-23T02:48:01Z,6,Native vs ODBC database connections with R,"<p>I understand that some databases have native support in R (e.g. MySQL) but you can connect to other DBs like MS SQL Server using RODBC. How much speed improvement does one gain for reading/writing with the native drivers vs. RODBC? What other DBs have native drivers in R? Is reading faster or slower than writing generally?</p>
","Native vs ODBC database connections with R <p>I understand that some databases have native support in R (e.g. MySQL) but you can connect to other DBs like MS SQL Server using RODBC. How much speed improvement does one gain for reading/writing with the native drivers vs. RODBC? What other DBs have native drivers in R? Is reading faster or slower than writing generally?</p>
"
1169373,84458,2009-07-23T03:03:09Z,24,Memory Usage in R,"<p>After creating large objects and running out of RAM, I will try and delete the objects in my current environment using</p>

<pre><code>rm(list=ls())
</code></pre>

<p>When I check my RAM usage, nothing has changed.  Even after calling <code>gc()</code> nothing has changed.  I can only replenish my RAM by quitting R.</p>

<p>Anybody have advice for dealing with memory-intensive objects within R?</p>
","Memory Usage in R <p>After creating large objects and running out of RAM, I will try and delete the objects in my current environment using</p>

<pre><code>rm(list=ls())
</code></pre>

<p>When I check my RAM usage, nothing has changed.  Even after calling <code>gc()</code> nothing has changed.  I can only replenish my RAM by quitting R.</p>

<p>Anybody have advice for dealing with memory-intensive objects within R?</p>
"
1169376,2002705,2009-07-23T03:03:55Z,7,"Cumulative sums, moving averages, and SQL ""group by"" equivalents in R","<p>What's the most efficient way to create a moving average or rolling sum in R? How do you do the rolling function along with a ""group by""?</p>
","Cumulative sums, moving averages, and SQL ""group by"" equivalents in R <p>What's the most efficient way to create a moving average or rolling sum in R? How do you do the rolling function along with a ""group by""?</p>
"
1169388,84458,2009-07-23T03:10:59Z,12,Finding Multiple Elements in a Vector,"<p>Suppose I have the following vector:</p>

<pre><code>&gt; x &lt;- sample(1:10,20,replace=TRUE)
&gt; x
 [1]  8  6  9  9  7  3  2  5  5  1  6  8  5  2  9  3  5 10  8  2
</code></pre>

<p>How can I find which elements are either 8 or 9?</p>
","Finding Multiple Elements in a Vector <p>Suppose I have the following vector:</p>

<pre><code>&gt; x &lt;- sample(1:10,20,replace=TRUE)
&gt; x
 [1]  8  6  9  9  7  3  2  5  5  1  6  8  5  2  9  3  5 10  8  2
</code></pre>

<p>How can I find which elements are either 8 or 9?</p>
"
1169426,84458,2009-07-23T03:24:25Z,10,Manipulating Network Data in R,"<p>I have a data frame detailing edge weights among N nodes.  Is there a package for working with this sort of data?</p>

<p>For example, I would like to plot the following information as a network:</p>

<pre><code>  p1 p2 counts
1  a  b    100
2  a  c    200
3  a  d    100
4  b  c     80
5  b  d     90
6  b  e    100
7  c  d    100
8  c  e     40
9  d  e     60
</code></pre>
","Manipulating Network Data in R <p>I have a data frame detailing edge weights among N nodes.  Is there a package for working with this sort of data?</p>

<p>For example, I would like to plot the following information as a network:</p>

<pre><code>  p1 p2 counts
1  a  b    100
2  a  c    200
3  a  d    100
4  b  c     80
5  b  d     90
6  b  e    100
7  c  d    100
8  c  e     40
9  d  e     60
</code></pre>
"
1169456,135870,2009-07-23T03:33:18Z,337,The difference between [] and [[]] notations for accessing the elements of a list or dataframe,"<p>R provides two different methods for accessing the elements of a list or data.frame- the <code>[]</code> and <code>[[]]</code> operators.</p>

<p>What is the difference between the two? In what situations should I use one over the other?</p>
","The difference between [] and [[]] notations for accessing the elements of a list or dataframe <p>R provides two different methods for accessing the elements of a list or data.frame- the <code>[]</code> and <code>[[]]</code> operators.</p>

<p>What is the difference between the two? In what situations should I use one over the other?</p>
"
1169534,84458,2009-07-23T03:58:10Z,28,"Writing functions in R, keeping scoping in mind","<p>I often write functions that need to see other objects in my environment.  For example:</p>

<pre><code>&gt; a &lt;- 3
&gt; b &lt;- 3
&gt; x &lt;- 1:5
&gt; fn1 &lt;- function(x,a,b) a+b+x
&gt; fn2 &lt;- function(x) a+b+x
&gt; fn1(x,a,b)
[1]  7  8  9 10 11
&gt; fn2(x)
[1]  7  8  9 10 11
</code></pre>

<p>As expected, both these functions are identical because <code>fn2</code> can ""see"" a and b when it executes.  But whenever I start to take advantage of this, within about 30 minutes I end up calling the function without one of the necessary variables (e.g. a or b).  If I don't take advantage of this, then I feel like I am passing around objects unnecessarily.</p>

<p>Is it better to be explicit about what a function requires?  Or should this be taken care of via inline comments or other documentation of the function?  Is there a better way?</p>
","Writing functions in R, keeping scoping in mind <p>I often write functions that need to see other objects in my environment.  For example:</p>

<pre><code>&gt; a &lt;- 3
&gt; b &lt;- 3
&gt; x &lt;- 1:5
&gt; fn1 &lt;- function(x,a,b) a+b+x
&gt; fn2 &lt;- function(x) a+b+x
&gt; fn1(x,a,b)
[1]  7  8  9 10 11
&gt; fn2(x)
[1]  7  8  9 10 11
</code></pre>

<p>As expected, both these functions are identical because <code>fn2</code> can ""see"" a and b when it executes.  But whenever I start to take advantage of this, within about 30 minutes I end up calling the function without one of the necessary variables (e.g. a or b).  If I don't take advantage of this, then I feel like I am passing around objects unnecessarily.</p>

<p>Is it better to be explicit about what a function requires?  Or should this be taken care of via inline comments or other documentation of the function?  Is there a better way?</p>
"
1169539,37751,2009-07-23T04:00:09Z,58,Linear Regression and group by in R,"<p>I want to do a linear regression in R using the <code>lm()</code> function. My data is an annual time series with one field for year (22 years) and another for state (50 states). I want to fit a regression for each state so that at the end I have a vector of lm responses. I can imagine doing for loop for each state then doing the regression inside the loop and adding the results of each regression to a vector. That does not seem very R-like, however. In SAS I would do a 'by' statement and in SQL I would do a 'group by'. What's the R way of doing this?</p>
","Linear Regression and group by in R <p>I want to do a linear regression in R using the <code>lm()</code> function. My data is an annual time series with one field for year (22 years) and another for state (50 states). I want to fit a regression for each state so that at the end I have a vector of lm responses. I can imagine doing for loop for each state then doing the regression inside the loop and adding the results of each regression to a vector. That does not seem very R-like, however. In SAS I would do a 'by' statement and in SQL I would do a 'group by'. What's the R way of doing this?</p>
"
1169551,2002705,2009-07-23T04:04:21Z,12,SQL-like functionality in R,"<p>I am used to writing data manipulation logic in SQL and now that I am learning R I find myself sometimes just wanting to do something that would be simple in SQL but I have to learn a bunch of stuff with R to do the same manipulation on an R data frame. Is there a simple work around? </p>
","SQL-like functionality in R <p>I am used to writing data manipulation logic in SQL and now that I am learning R I find myself sometimes just wanting to do something that would be simple in SQL but I have to learn a bunch of stuff with R to do the same manipulation on an R data frame. Is there a simple work around? </p>
"
1169573,84458,2009-07-23T04:15:08Z,7,Large loops hang in R?,"<p>Suppose I want perform a simulation using the following function:</p>

<pre><code>fn1 &lt;- function(N) {
  res &lt;- c()
  for (i in 1:N) {
    x &lt;- rnorm(2)
    res &lt;- c(res,x[2]-x[1])
  }
  res
}
</code></pre>

<p>For very large <code>N</code>, computation appears to hang.  Are there better ways of doing this?</p>

<p>(Inspired by: <a href=""https://stat.ethz.ch/pipermail/r-help/2008-February/155591.html"" rel=""noreferrer"">https://stat.ethz.ch/pipermail/r-help/2008-February/155591.html</a>)</p>
","Large loops hang in R? <p>Suppose I want perform a simulation using the following function:</p>

<pre><code>fn1 &lt;- function(N) {
  res &lt;- c()
  for (i in 1:N) {
    x &lt;- rnorm(2)
    res &lt;- c(res,x[2]-x[1])
  }
  res
}
</code></pre>

<p>For very large <code>N</code>, computation appears to hang.  Are there better ways of doing this?</p>

<p>(Inspired by: <a href=""https://stat.ethz.ch/pipermail/r-help/2008-February/155591.html"" rel=""noreferrer"">https://stat.ethz.ch/pipermail/r-help/2008-February/155591.html</a>)</p>
"
1172485,143813,2009-07-23T15:15:37Z,51,How to increase the number of columns using R in Linux,"<p>This may seem menial, but it affects my productivity. I am using R in terminal mode on Linux. Unlike the Windows IDE, Linux limits the number of columns to 80, thus making harder the inspection of data sets. Is there a way to set the max number of columns?</p>
","How to increase the number of columns using R in Linux <p>This may seem menial, but it affects my productivity. I am using R in terminal mode on Linux. Unlike the Windows IDE, Linux limits the number of columns to 80, thus making harder the inspection of data sets. Is there a way to set the max number of columns?</p>
"
1174799,23929,2009-07-23T22:17:24Z,86,"How to make execution pause, sleep, wait for X seconds in R?","<p>How do you pause an R script for a specified number of seconds or miliseconds? In many languages, there is a <code>sleep</code> function, but <code>?sleep</code> references a data set. And <code>?pause</code> and <code>?wait</code> don't exist.</p>

<p>The intended purpose is for self-timed animations. The desired solution works without asking for user input.</p>
","How to make execution pause, sleep, wait for X seconds in R? <p>How do you pause an R script for a specified number of seconds or miliseconds? In many languages, there is a <code>sleep</code> function, but <code>?sleep</code> references a data set. And <code>?pause</code> and <code>?wait</code> don't exist.</p>

<p>The intended purpose is for self-timed animations. The desired solution works without asking for user input.</p>
"
1176455,4907,2009-07-24T08:44:49Z,2,Portable use of dyn.load to call a C function in an R package,"<p>I am creating an R package that I intend to submit to CRAN that has a function calling a routine written in C.  How do I load the compiled C routine in the R function in platform-independent way?  I am able to make my package work on my intel-based Mac with:</p>

<pre><code>function(mydata)
{
dyn.load(file.path(.Library,""mypkg/libs/i386"",paste(""mypkg"", .Platform$dynlib.ext, sep=""""))) 
try(
    output &lt;- .C(""myfunc_cversion"",
                 in_data    = as.double(mydata),
                 res_data   = as.double(res),
                 PACKAGE    = ""mypkg"")
    )
    result &lt;- as.matrix(output$res_data)
    return(result)
}
</code></pre>

<p>The problem is the call to dyn.load where I cannot figure out how to specify the full path to the shared library for my installed package in a portable way.</p>

<p>Is there another variable in R besides .Library that I should use, or is there a better function than dyn.load for this case?</p>
","Portable use of dyn.load to call a C function in an R package <p>I am creating an R package that I intend to submit to CRAN that has a function calling a routine written in C.  How do I load the compiled C routine in the R function in platform-independent way?  I am able to make my package work on my intel-based Mac with:</p>

<pre><code>function(mydata)
{
dyn.load(file.path(.Library,""mypkg/libs/i386"",paste(""mypkg"", .Platform$dynlib.ext, sep=""""))) 
try(
    output &lt;- .C(""myfunc_cversion"",
                 in_data    = as.double(mydata),
                 res_data   = as.double(res),
                 PACKAGE    = ""mypkg"")
    )
    result &lt;- as.matrix(output$res_data)
    return(result)
}
</code></pre>

<p>The problem is the call to dyn.load where I cannot figure out how to specify the full path to the shared library for my installed package in a portable way.</p>

<p>Is there another variable in R besides .Library that I should use, or is there a better function than dyn.load for this case?</p>
"
1177919,37751,2009-07-24T14:06:05Z,22,Does column exist and how to rearrange columns in R data frame,"<p>How do I add a column in the middle of an R data frame? I want to see if I have a column named ""LastName"" and then add it as the third column if it does not already exist. </p>
","Does column exist and how to rearrange columns in R data frame <p>How do I add a column in the middle of an R data frame? I want to see if I have a column named ""LastName"" and then add it as the third column if it does not already exist. </p>
"
1177926,37751,2009-07-24T14:07:07Z,86,R object identification,"<p>I am often ending up with a function producing output for which I don't understand the output data type. I'm expecting a list and it ends up being a list of lists or a data frame or something else. What's a good method or workflow for figuring out the output data type when first using a function?</p>
","R object identification <p>I am often ending up with a function producing output for which I don't understand the output data type. I'm expecting a list and it ends up being a list of lists or a data frame or something else. What's a good method or workflow for figuring out the output data type when first using a function?</p>
"
1181021,2002705,2009-07-25T02:32:27Z,6,Determining if a matrix is diagonalizable in the R Programming Language,"<p>I have a matrix and I would like to know if it is diagonalizable. How do I do this in the R programming language? </p>
","Determining if a matrix is diagonalizable in the R Programming Language <p>I have a matrix and I would like to know if it is diagonalizable. How do I do this in the R programming language? </p>
"
1181025,2002705,2009-07-25T02:36:06Z,22,Goodness of fit functions in R,"<p>What functions do you use in R to fit a curve to your data and test how well that curve fits?  What results are considered good?</p>
","Goodness of fit functions in R <p>What functions do you use in R to fit a curve to your data and test how well that curve fits?  What results are considered good?</p>
"
1182932,37751,2009-07-25T20:10:59Z,3,unexpected agrep() results related to max.distance in R,"<p><strong>EDIT:</strong> This bug was found in 32-bit versions of R was fixed in R version 2.9.2.</p>

<hr>

<p>This was tweeted to me by @leoniedu today and I don't have an answer for him so I thought I would post it here. </p>

<p>I have read the documentation for agrep() (fuzzy string matching) and it appears that I don't fully understand the max.distance parameter. Here's an example:</p>

<pre><code>pattern &lt;- ""Staatssekretar im Bundeskanzleramt""
x &lt;- ""Bundeskanzleramt""
agrep(pattern,x,max.distance=18) 
agrep(pattern,x,max.distance=19)
</code></pre>

<p>That behaves exactly like I would expect. There are 18 characters different between the strings so I would expect that to be the threshold of a match. Here's what's confusing me:</p>

<pre><code>agrep(pattern,x,max.distance=30) 
agrep(pattern,x,max.distance=31)
agrep(pattern,x,max.distance=32) 
agrep(pattern,x,max.distance=33)
</code></pre>

<p>Why are 30 and 33 matches, but not 31 and 32? To save you some counting, </p>

<pre><code>&gt; nchar(""Staatssekretar im Bundeskanzleramt"")
[1] 34
&gt; nchar(""Bundeskanzleramt"")
[1] 16
</code></pre>
","unexpected agrep() results related to max.distance in R <p><strong>EDIT:</strong> This bug was found in 32-bit versions of R was fixed in R version 2.9.2.</p>

<hr>

<p>This was tweeted to me by @leoniedu today and I don't have an answer for him so I thought I would post it here. </p>

<p>I have read the documentation for agrep() (fuzzy string matching) and it appears that I don't fully understand the max.distance parameter. Here's an example:</p>

<pre><code>pattern &lt;- ""Staatssekretar im Bundeskanzleramt""
x &lt;- ""Bundeskanzleramt""
agrep(pattern,x,max.distance=18) 
agrep(pattern,x,max.distance=19)
</code></pre>

<p>That behaves exactly like I would expect. There are 18 characters different between the strings so I would expect that to be the threshold of a match. Here's what's confusing me:</p>

<pre><code>agrep(pattern,x,max.distance=30) 
agrep(pattern,x,max.distance=31)
agrep(pattern,x,max.distance=32) 
agrep(pattern,x,max.distance=33)
</code></pre>

<p>Why are 30 and 33 matches, but not 31 and 32? To save you some counting, </p>

<pre><code>&gt; nchar(""Staatssekretar im Bundeskanzleramt"")
[1] 34
&gt; nchar(""Bundeskanzleramt"")
[1] 16
</code></pre>
"
1188544,37751,2009-07-27T14:36:31Z,3,Getting windows to start R in batch mode using the Start command,"<p>I know I must be making a simple syntax mistake, but I want to have a windows batch file that fires up 9 instances of R and runs a different routine in each one. I want these to run simultaneously (i.e. asynchronously). I can fire up 9 command prompt windows and type a command in each one, but it seems like with the START command I should be able to make them start from a single batch file. </p>

<p>Here's an example of how I start one of the instances of R:</p>

<pre><code>""C:\Program Files (x86)\R\R-2.8.1\bin\R"" CMD BATCH ""C:\Users\jd\Documents\mexico\Estado\getdata1.r"" 
</code></pre>

<p>Reading this <a href=""https://stackoverflow.com/questions/72671/how-to-create-batch-file-in-windows-using-start-with-a-path-and-command-with-sp"">previous stackoverflow question</a> along with <a href=""https://stackoverflow.com/questions/154075/using-the-dos-start-command-with-parameters-passed-to-the-started-program"">this previous question</a> makes me think I should be able to do this:</p>

<pre><code>START """" ""C:\Program Files (x86)\R\R-2.8.1\bin\R"" CMD BATCH ""C:\Users\jd\Documents\mexico\Estado\getdata1.r"" /b
</code></pre>

<p>That does not return an error, it just returns a prompt and R never starts. What am I missing?</p>
","Getting windows to start R in batch mode using the Start command <p>I know I must be making a simple syntax mistake, but I want to have a windows batch file that fires up 9 instances of R and runs a different routine in each one. I want these to run simultaneously (i.e. asynchronously). I can fire up 9 command prompt windows and type a command in each one, but it seems like with the START command I should be able to make them start from a single batch file. </p>

<p>Here's an example of how I start one of the instances of R:</p>

<pre><code>""C:\Program Files (x86)\R\R-2.8.1\bin\R"" CMD BATCH ""C:\Users\jd\Documents\mexico\Estado\getdata1.r"" 
</code></pre>

<p>Reading this <a href=""https://stackoverflow.com/questions/72671/how-to-create-batch-file-in-windows-using-start-with-a-path-and-command-with-sp"">previous stackoverflow question</a> along with <a href=""https://stackoverflow.com/questions/154075/using-the-dos-start-command-with-parameters-passed-to-the-started-program"">this previous question</a> makes me think I should be able to do this:</p>

<pre><code>START """" ""C:\Program Files (x86)\R\R-2.8.1\bin\R"" CMD BATCH ""C:\Users\jd\Documents\mexico\Estado\getdata1.r"" /b
</code></pre>

<p>That does not return an error, it just returns a prompt and R never starts. What am I missing?</p>
"
1191689,143813,2009-07-28T02:43:03Z,11,Hierarchical Bayes for R or Python,"<p>Hierarchical Bayes models are commonly used in Marketing, Political Science, and Econometrics. Yet, the only package I know of is <code>bayesm</code>, which is really a companion to a book (<em>Bayesian Statistics and Marketing</em>, by Rossi, et al.) Am I missing something? Is there a software package for R or Python doing the job out there, and/or a worked-out example in the associated language? </p>
","Hierarchical Bayes for R or Python <p>Hierarchical Bayes models are commonly used in Marketing, Political Science, and Econometrics. Yet, the only package I know of is <code>bayesm</code>, which is really a companion to a book (<em>Bayesian Statistics and Marketing</em>, by Rossi, et al.) Am I missing something? Is there a software package for R or Python doing the job out there, and/or a worked-out example in the associated language? </p>
"
1195826,2002705,2009-07-28T18:21:47Z,378,Drop factor levels in a subsetted data frame,"<p>I have a data frame containing a factor.  When I create a subset of this data frame using <code>subset()</code> or another indexing function, a new data frame is created.  However, the factor variable retains all of its original levels -- even when they do not exist in the new data frame.</p>

<p>This creates headaches when doing faceted plotting or using functions that rely on factor levels.</p>

<p>What is the most succinct way to remove levels from a factor in my new data frame?</p>

<p>Here's my example:</p>

<pre><code>df &lt;- data.frame(letters=letters[1:5],
                    numbers=seq(1:5))

levels(df$letters)
## [1] ""a"" ""b"" ""c"" ""d"" ""e""

subdf &lt;- subset(df, numbers &lt;= 3)
##   letters numbers
## 1       a       1
## 2       b       2
## 3       c       3    

## but the levels are still there!
levels(subdf$letters)
## [1] ""a"" ""b"" ""c"" ""d"" ""e""
</code></pre>
","Drop factor levels in a subsetted data frame <p>I have a data frame containing a factor.  When I create a subset of this data frame using <code>subset()</code> or another indexing function, a new data frame is created.  However, the factor variable retains all of its original levels -- even when they do not exist in the new data frame.</p>

<p>This creates headaches when doing faceted plotting or using functions that rely on factor levels.</p>

<p>What is the most succinct way to remove levels from a factor in my new data frame?</p>

<p>Here's my example:</p>

<pre><code>df &lt;- data.frame(letters=letters[1:5],
                    numbers=seq(1:5))

levels(df$letters)
## [1] ""a"" ""b"" ""c"" ""d"" ""e""

subdf &lt;- subset(df, numbers &lt;= 3)
##   letters numbers
## 1       a       1
## 2       b       2
## 3       c       3    

## but the levels are still there!
levels(subdf$letters)
## [1] ""a"" ""b"" ""c"" ""d"" ""e""
</code></pre>
"
1197434,70702,2009-07-29T00:11:37Z,5,Loading data from Excel file into R or Octave,"<p>I have an Excel file with a large set of data. The built-in graphs available in Excel are <em>not</em> enough to analyze these data, so I am thinking about using some tool like octave or R.</p>

<p>I was thinking about some method to load an Excel file directly into octave or R. I searched the web and found that many people have succeeded using by exporting data from Excel into a CSV file.</p>

<p>The question:
Is there a direct way to load an Excel file in R or Octave?</p>
","Loading data from Excel file into R or Octave <p>I have an Excel file with a large set of data. The built-in graphs available in Excel are <em>not</em> enough to analyze these data, so I am thinking about using some tool like octave or R.</p>

<p>I was thinking about some method to load an Excel file directly into octave or R. I searched the web and found that many people have succeeded using by exporting data from Excel into a CSV file.</p>

<p>The question:
Is there a direct way to load an Excel file in R or Octave?</p>
"
1198116,70702,2009-07-29T04:57:48Z,3,"sql command for reading a particular sheet, column ","<p>This is probably a very stupid question for SQL stalwarts, but I just want one SQL command.</p>

<p>Details,</p>

<p>I am using a data analysis tool called R, this tool uses ODBC to read data from XLS. I am now trying to read data from an XLS file. The ODBC tool in R accepts SQL commands.</p>

<p>Question,</p>

<p>Can someone give me an SQL command that will read data from an XLS file's
- Specified sheet
- Specified column [by name]
- Specified row [Specified just by Row Index]</p>

<p>Thanks ... </p>
","sql command for reading a particular sheet, column  <p>This is probably a very stupid question for SQL stalwarts, but I just want one SQL command.</p>

<p>Details,</p>

<p>I am using a data analysis tool called R, this tool uses ODBC to read data from XLS. I am now trying to read data from an XLS file. The ODBC tool in R accepts SQL commands.</p>

<p>Question,</p>

<p>Can someone give me an SQL command that will read data from an XLS file's
- Specified sheet
- Specified column [by name]
- Specified row [Specified just by Row Index]</p>

<p>Thanks ... </p>
"
1203662,NA,2009-07-29T23:36:11Z,2,How to connect to R with Java (using Eclipse),"<p>Very newbie (to Java) question:</p>

<p>I opened an Rserve connection (<a href=""http://www.rforge.net/Rserve/"" rel=""nofollow noreferrer"">http://www.rforge.net/Rserve/</a>) on localhost, and I would like to use the REngine client (src/client/java-new in the Rserve package) to connect to it.</p>

<p>What do I need to do to get the ""RTest.java"" (located in src/client/java-new/Rserve; pasted below) to compile?</p>

<p>I gather that I need to compile the org.rosuda.* libraries. How can I do this using Eclipse 3.5? I tried copying the ""src/client/java-new"" folder into my Java project's ""src"" directory, right clicking in Eclipse -> Build path -> Use as source folder.  But I don't think this is enough to create the ""org.rosuda"" package, because I don't see an ""org/rosuda"" directory structure created anywhere (and those ominous red lines in Eclipse don't disappear). </p>

<p>Anyone done this recently, care to offer a pointer? Thanks plenty.</p>

<pre><code>import org.rosuda.REngine.*;
import org.rosuda.REngine.Rserve.*;

class TestException extends Exception {
    public TestException(String msg) { super(msg); }
}

public class test {
    public static void main(String[] args) {
    try {
        RConnection c = new RConnection();

        System.out.println(""&gt;&gt;""+c.eval(""R.version$version.string"").asString()+""&lt;&lt;"");

        {
            System.out.println(""* Test string and list retrieval"");
            RList l = c.eval(""{d=data.frame(\""huhu\"",c(11:20)); lapply(d,as.character)}"").asList();
            int cols = l.size();
            int rows = l.at(0).length();
            String[][] s = new String[cols][];
            for (int i=0; i&lt;cols; i++) s[i]=l.at(i).asStrings();
            System.out.println(""PASSED"");
        }

        {
        System.out.println(""* Test NA/NaN support in double vectors..."");
        double R_NA = Double.longBitsToDouble(0x7ff00000000007a2L);
        // int R_NA_int = -2147483648; // just for completeness
        double x[] = { 1.0, 0.5, R_NA, Double.NaN, 3.5 };
        c.assign(""x"",x);
        String nas = c.eval(""paste(capture.output(print(x)),collapse='\\n')"").asString();
        System.out.println(nas);
        if (!nas.equals(""[1] 1.0 0.5  NA NaN 3.5""))
            throw new TestException(""NA/NaN assign+retrieve test failed"");
        System.out.println(""PASSED"");
        }

        {
            System.out.println(""* Test assigning of lists and vectors ..."");
            RList l = new RList();
            l.put(""a"",new REXPInteger(new int[] { 0,1,2,3}));
            l.put(""b"",new REXPDouble(new double[] { 0.5,1.2,2.3,3.0}));
            System.out.println(""  assign x=pairlist"");
            c.assign(""x"", new REXPList(l));
            System.out.println(""  assign y=vector"");
            c.assign(""y"", new REXPGenericVector(l));
            System.out.println(""  assign z=data.frame"");
            c.assign(""z"", REXP.createDataFrame(l));
            System.out.println(""  pull all three back to Java"");
            REXP x = c.parseAndEval(""x"");
            System.out.println(""  x = ""+x);
            x = c.eval(""y"");
            System.out.println(""  y = ""+x);
            x = c.eval(""z"");
            System.out.println(""  z = ""+x);
            System.out.println(""PASSED"");
        }
        {
            System.out.println(""* Test support for logicals ... "");
            System.out.println(""  assign b={true,false,true}"");
            c.assign(""b"", new REXPLogical(new boolean[] { true, false, true }));
            REXP x = c.parseAndEval(""b"");
            System.out.println(""  "" + ((x != null) ? x.toDebugString() : ""NULL""));
            if (!x.isLogical() || x.length() != 3)
                throw new TestException(""boolean array assign+retrieve test failed"");
            boolean q[] = ((REXPLogical)x).isTRUE();
            if (q[0] != true || q[1] != false || q[2] != true)
                throw new TestException(""boolean array assign+retrieve test failed (value mismatch)"");
            System.out.println(""  get c(TRUE,FLASE,NA)"");
            x = c.parseAndEval(""c(TRUE,FALSE,NA)"");
            System.out.println(""  "" + ((x != null) ? x.toDebugString() : ""NULL""));
            if (!x.isLogical() || x.length() != 3)
                throw new TestException(""boolean array NA test failed"");
            boolean q1[] = ((REXPLogical)x).isTRUE();
            boolean q2[] = ((REXPLogical)x).isFALSE();
            boolean q3[] = ((REXPLogical)x).isNA();
            if (q1[0] != true || q1[1] != false || q1[2] != false ||
                q2[0] != false || q2[1] != true || q2[2] != false ||
                q3[0] != false || q3[1] != false || q3[2] != true)
                throw new TestException(""boolean array NA test failed (value mismatch)"");
        }

        { // regression: object bit was not set for Java-side generated objects before 0.5-3
            System.out.println(""* Testing functionality of assembled S3 objects ..."");
            // we have already assigned the data.frame in previous test, so we jsut re-use it
            REXP x = c.parseAndEval(""z[2,2]"");
            System.out.println(""  z[2,2] = "" + x);
            if (x == null || x.length() != 1 || x.asDouble() != 1.2)
                throw new TestException(""S3 object bit regression test failed"");
            System.out.println(""PASSED"");
        }

        { // this test does a pull and push of a data frame. It will fail when the S3 test above failed.
            System.out.println(""* Testing pass-though capability for data.frames ..."");
            REXP df = c.parseAndEval(""{data(iris); iris}"");
            c.assign(""df"", df);
            REXP x = c.eval(""identical(df, iris)"");
            System.out.println(""  identical(df, iris) = ""+x);
            if (x == null || !x.isLogical() || x.length() != 1 || !((REXPLogical)x).isTrue()[0])
                throw new TestException(""Pass-through test for a data.frame failed"");
            System.out.println(""PASSED"");
        }

            { // factors
                System.out.println(""* Test support of factors"");
                REXP f = c.parseAndEval(""factor(paste('F',as.integer(runif(20)*5),sep=''))"");
                System.out.println(""  f=""+f);
                System.out.println(""  isFactor: ""+f.isFactor()+"", asFactor: ""+f.asFactor());
                if (!f.isFactor() || f.asFactor() == null) throw new TestException(""factor test failed"");
                System.out.println(""  singe-level factor used to degenerate:"");
                f = c.parseAndEval(""factor('foo')"");
                System.out.println(""  isFactor: ""+f.isFactor()+"", asFactor: ""+f.asFactor());
                if (!f.isFactor() || f.asFactor() == null) throw new TestException(""single factor test failed (not a factor)"");
                if (!f.asFactor().at(0).equals(""foo"")) throw new TestException(""single factor test failed (wrong value)"");
                System.out.println(""  test factors with null elements contents:"");
                c.assign(""f"", new REXPFactor(new RFactor(new String[] { ""foo"", ""bar"", ""foo"", ""foo"", null, ""bar"" })));
                f = c.parseAndEval(""f"");
                if (!f.isFactor() || f.asFactor() == null) throw new TestException(""factor assign-eval test failed (not a factor)"");
                System.out.println(""  f = ""+f.asFactor());
                f = c.parseAndEval(""as.factor(c(1,'a','b',1,'b'))"");
                System.out.println(""  f = ""+f);
                if (!f.isFactor() || f.asFactor() == null) throw new TestException(""factor test failed (not a factor)"");
                System.out.println(""PASSED"");
            }


        {
            System.out.println(""* Lowess test"");
            double x[] = c.eval(""rnorm(100)"").asDoubles();
            double y[] = c.eval(""rnorm(100)"").asDoubles();
            c.assign(""x"", x);
            c.assign(""y"", y);
            RList l = c.parseAndEval(""lowess(x,y)"").asList();
            System.out.println(""  ""+l);
            x = l.at(""x"").asDoubles();
            y = l.at(""y"").asDoubles();
            System.out.println(""PASSED"");
        }

        {
            // multi-line expressions
            System.out.println(""* Test multi-line expressions"");
            if (c.eval(""{ a=1:10\nb=11:20\nmean(b-a) }\n"").asInteger()!=10)
                throw new TestException(""multi-line test failed."");
            System.out.println(""PASSED"");
        }
        {
            System.out.println(""* Matrix tests\n  matrix: create a matrix"");
            int m=100, n=100;
            double[] mat=new double[m*n];
            int i=0;
            while (i&lt;m*n) mat[i++]=i/100;
            System.out.println(""  matrix: assign a matrix"");
            c.assign(""m"", mat);
            c.voidEval(""m&lt;-matrix(m,""+m+"",""+n+"")"");
            System.out.println(""matrix: cross-product"");
            double[][] mr=c.parseAndEval(""crossprod(m,m)"").asDoubleMatrix();
            System.out.println(""PASSED"");
        }

        {
            System.out.println(""* Test serialization and raw vectors"");
            byte[] b = c.eval(""serialize(ls, NULL, ascii=FALSE)"").asBytes();
            System.out.println(""  serialized ls is ""+b.length+"" bytes long"");
            c.assign(""r"", new REXPRaw(b));
            String[] s = c.eval(""unserialize(r)()"").asStrings();
            System.out.println(""  we have ""+s.length+"" items in the workspace"");
            System.out.println(""PASSED"");
        }


        { // string encoding test (will work with Rserve 0.5-3 and higher only)
            System.out.println(""* Test string encoding support ..."");
            String t = ""ã²ã‚‰ãŒãª""; // hiragana (literally, in hiragana ;))
            c.setStringEncoding(""utf8"");
            // -- Just in case the console is not UTF-8 don't display it
            //System.out.println(""  unicode text: ""+t);
            c.assign(""s"", t);
            REXP x = c.parseAndEval(""nchar(s)"");
            System.out.println(""  nchar = "" + x);
            if (x == null || !x.isInteger() || x.asInteger() != 4)
                throw new TestException(""UTF-8 encoding string length test failed"");
            // we cannot really test any other encoding ..
            System.out.println(""PASSED"");
        }

        } catch (RserveException rse) {
        System.out.println(rse);
    } catch (REXPMismatchException mme) {
        System.out.println(mme);
        mme.printStackTrace();
        } catch(TestException te) {
            System.err.println(""** Test failed: ""+te.getMessage());
            te.printStackTrace();
    } catch (Exception e) {
        e.printStackTrace();
    }
    }
}
</code></pre>
","How to connect to R with Java (using Eclipse) <p>Very newbie (to Java) question:</p>

<p>I opened an Rserve connection (<a href=""http://www.rforge.net/Rserve/"" rel=""nofollow noreferrer"">http://www.rforge.net/Rserve/</a>) on localhost, and I would like to use the REngine client (src/client/java-new in the Rserve package) to connect to it.</p>

<p>What do I need to do to get the ""RTest.java"" (located in src/client/java-new/Rserve; pasted below) to compile?</p>

<p>I gather that I need to compile the org.rosuda.* libraries. How can I do this using Eclipse 3.5? I tried copying the ""src/client/java-new"" folder into my Java project's ""src"" directory, right clicking in Eclipse -> Build path -> Use as source folder.  But I don't think this is enough to create the ""org.rosuda"" package, because I don't see an ""org/rosuda"" directory structure created anywhere (and those ominous red lines in Eclipse don't disappear). </p>

<p>Anyone done this recently, care to offer a pointer? Thanks plenty.</p>

<pre><code>import org.rosuda.REngine.*;
import org.rosuda.REngine.Rserve.*;

class TestException extends Exception {
    public TestException(String msg) { super(msg); }
}

public class test {
    public static void main(String[] args) {
    try {
        RConnection c = new RConnection();

        System.out.println(""&gt;&gt;""+c.eval(""R.version$version.string"").asString()+""&lt;&lt;"");

        {
            System.out.println(""* Test string and list retrieval"");
            RList l = c.eval(""{d=data.frame(\""huhu\"",c(11:20)); lapply(d,as.character)}"").asList();
            int cols = l.size();
            int rows = l.at(0).length();
            String[][] s = new String[cols][];
            for (int i=0; i&lt;cols; i++) s[i]=l.at(i).asStrings();
            System.out.println(""PASSED"");
        }

        {
        System.out.println(""* Test NA/NaN support in double vectors..."");
        double R_NA = Double.longBitsToDouble(0x7ff00000000007a2L);
        // int R_NA_int = -2147483648; // just for completeness
        double x[] = { 1.0, 0.5, R_NA, Double.NaN, 3.5 };
        c.assign(""x"",x);
        String nas = c.eval(""paste(capture.output(print(x)),collapse='\\n')"").asString();
        System.out.println(nas);
        if (!nas.equals(""[1] 1.0 0.5  NA NaN 3.5""))
            throw new TestException(""NA/NaN assign+retrieve test failed"");
        System.out.println(""PASSED"");
        }

        {
            System.out.println(""* Test assigning of lists and vectors ..."");
            RList l = new RList();
            l.put(""a"",new REXPInteger(new int[] { 0,1,2,3}));
            l.put(""b"",new REXPDouble(new double[] { 0.5,1.2,2.3,3.0}));
            System.out.println(""  assign x=pairlist"");
            c.assign(""x"", new REXPList(l));
            System.out.println(""  assign y=vector"");
            c.assign(""y"", new REXPGenericVector(l));
            System.out.println(""  assign z=data.frame"");
            c.assign(""z"", REXP.createDataFrame(l));
            System.out.println(""  pull all three back to Java"");
            REXP x = c.parseAndEval(""x"");
            System.out.println(""  x = ""+x);
            x = c.eval(""y"");
            System.out.println(""  y = ""+x);
            x = c.eval(""z"");
            System.out.println(""  z = ""+x);
            System.out.println(""PASSED"");
        }
        {
            System.out.println(""* Test support for logicals ... "");
            System.out.println(""  assign b={true,false,true}"");
            c.assign(""b"", new REXPLogical(new boolean[] { true, false, true }));
            REXP x = c.parseAndEval(""b"");
            System.out.println(""  "" + ((x != null) ? x.toDebugString() : ""NULL""));
            if (!x.isLogical() || x.length() != 3)
                throw new TestException(""boolean array assign+retrieve test failed"");
            boolean q[] = ((REXPLogical)x).isTRUE();
            if (q[0] != true || q[1] != false || q[2] != true)
                throw new TestException(""boolean array assign+retrieve test failed (value mismatch)"");
            System.out.println(""  get c(TRUE,FLASE,NA)"");
            x = c.parseAndEval(""c(TRUE,FALSE,NA)"");
            System.out.println(""  "" + ((x != null) ? x.toDebugString() : ""NULL""));
            if (!x.isLogical() || x.length() != 3)
                throw new TestException(""boolean array NA test failed"");
            boolean q1[] = ((REXPLogical)x).isTRUE();
            boolean q2[] = ((REXPLogical)x).isFALSE();
            boolean q3[] = ((REXPLogical)x).isNA();
            if (q1[0] != true || q1[1] != false || q1[2] != false ||
                q2[0] != false || q2[1] != true || q2[2] != false ||
                q3[0] != false || q3[1] != false || q3[2] != true)
                throw new TestException(""boolean array NA test failed (value mismatch)"");
        }

        { // regression: object bit was not set for Java-side generated objects before 0.5-3
            System.out.println(""* Testing functionality of assembled S3 objects ..."");
            // we have already assigned the data.frame in previous test, so we jsut re-use it
            REXP x = c.parseAndEval(""z[2,2]"");
            System.out.println(""  z[2,2] = "" + x);
            if (x == null || x.length() != 1 || x.asDouble() != 1.2)
                throw new TestException(""S3 object bit regression test failed"");
            System.out.println(""PASSED"");
        }

        { // this test does a pull and push of a data frame. It will fail when the S3 test above failed.
            System.out.println(""* Testing pass-though capability for data.frames ..."");
            REXP df = c.parseAndEval(""{data(iris); iris}"");
            c.assign(""df"", df);
            REXP x = c.eval(""identical(df, iris)"");
            System.out.println(""  identical(df, iris) = ""+x);
            if (x == null || !x.isLogical() || x.length() != 1 || !((REXPLogical)x).isTrue()[0])
                throw new TestException(""Pass-through test for a data.frame failed"");
            System.out.println(""PASSED"");
        }

            { // factors
                System.out.println(""* Test support of factors"");
                REXP f = c.parseAndEval(""factor(paste('F',as.integer(runif(20)*5),sep=''))"");
                System.out.println(""  f=""+f);
                System.out.println(""  isFactor: ""+f.isFactor()+"", asFactor: ""+f.asFactor());
                if (!f.isFactor() || f.asFactor() == null) throw new TestException(""factor test failed"");
                System.out.println(""  singe-level factor used to degenerate:"");
                f = c.parseAndEval(""factor('foo')"");
                System.out.println(""  isFactor: ""+f.isFactor()+"", asFactor: ""+f.asFactor());
                if (!f.isFactor() || f.asFactor() == null) throw new TestException(""single factor test failed (not a factor)"");
                if (!f.asFactor().at(0).equals(""foo"")) throw new TestException(""single factor test failed (wrong value)"");
                System.out.println(""  test factors with null elements contents:"");
                c.assign(""f"", new REXPFactor(new RFactor(new String[] { ""foo"", ""bar"", ""foo"", ""foo"", null, ""bar"" })));
                f = c.parseAndEval(""f"");
                if (!f.isFactor() || f.asFactor() == null) throw new TestException(""factor assign-eval test failed (not a factor)"");
                System.out.println(""  f = ""+f.asFactor());
                f = c.parseAndEval(""as.factor(c(1,'a','b',1,'b'))"");
                System.out.println(""  f = ""+f);
                if (!f.isFactor() || f.asFactor() == null) throw new TestException(""factor test failed (not a factor)"");
                System.out.println(""PASSED"");
            }


        {
            System.out.println(""* Lowess test"");
            double x[] = c.eval(""rnorm(100)"").asDoubles();
            double y[] = c.eval(""rnorm(100)"").asDoubles();
            c.assign(""x"", x);
            c.assign(""y"", y);
            RList l = c.parseAndEval(""lowess(x,y)"").asList();
            System.out.println(""  ""+l);
            x = l.at(""x"").asDoubles();
            y = l.at(""y"").asDoubles();
            System.out.println(""PASSED"");
        }

        {
            // multi-line expressions
            System.out.println(""* Test multi-line expressions"");
            if (c.eval(""{ a=1:10\nb=11:20\nmean(b-a) }\n"").asInteger()!=10)
                throw new TestException(""multi-line test failed."");
            System.out.println(""PASSED"");
        }
        {
            System.out.println(""* Matrix tests\n  matrix: create a matrix"");
            int m=100, n=100;
            double[] mat=new double[m*n];
            int i=0;
            while (i&lt;m*n) mat[i++]=i/100;
            System.out.println(""  matrix: assign a matrix"");
            c.assign(""m"", mat);
            c.voidEval(""m&lt;-matrix(m,""+m+"",""+n+"")"");
            System.out.println(""matrix: cross-product"");
            double[][] mr=c.parseAndEval(""crossprod(m,m)"").asDoubleMatrix();
            System.out.println(""PASSED"");
        }

        {
            System.out.println(""* Test serialization and raw vectors"");
            byte[] b = c.eval(""serialize(ls, NULL, ascii=FALSE)"").asBytes();
            System.out.println(""  serialized ls is ""+b.length+"" bytes long"");
            c.assign(""r"", new REXPRaw(b));
            String[] s = c.eval(""unserialize(r)()"").asStrings();
            System.out.println(""  we have ""+s.length+"" items in the workspace"");
            System.out.println(""PASSED"");
        }


        { // string encoding test (will work with Rserve 0.5-3 and higher only)
            System.out.println(""* Test string encoding support ..."");
            String t = ""ã²ã‚‰ãŒãª""; // hiragana (literally, in hiragana ;))
            c.setStringEncoding(""utf8"");
            // -- Just in case the console is not UTF-8 don't display it
            //System.out.println(""  unicode text: ""+t);
            c.assign(""s"", t);
            REXP x = c.parseAndEval(""nchar(s)"");
            System.out.println(""  nchar = "" + x);
            if (x == null || !x.isInteger() || x.asInteger() != 4)
                throw new TestException(""UTF-8 encoding string length test failed"");
            // we cannot really test any other encoding ..
            System.out.println(""PASSED"");
        }

        } catch (RserveException rse) {
        System.out.println(rse);
    } catch (REXPMismatchException mme) {
        System.out.println(mme);
        mme.printStackTrace();
        } catch(TestException te) {
            System.err.println(""** Test failed: ""+te.getMessage());
            te.printStackTrace();
    } catch (Exception e) {
        e.printStackTrace();
    }
    }
}
</code></pre>
"
1208627,142405,2009-07-30T18:59:05Z,4,Visualizing Data in Java,"<p>is there a good library on the market to visualize big datas in Java. Maybe a library for statistical outputs. I know the programming language R to visualize statistical data in R. I also have seen a solution to connect Java and R. It would be better if a have a pure Java solution. </p>
","Visualizing Data in Java <p>is there a good library on the market to visualize big datas in Java. Maybe a library for statistical outputs. I know the programming language R to visualize statistical data in R. I also have seen a solution to connect Java and R. It would be better if a have a pure Java solution. </p>
"
1213783,143383,2009-07-31T17:17:08Z,5,Using function arguments in update.formula,"<p>I am writing a function that takes two variables and separately regresses each of them on a set of controls expressed as a one-sided formula. Right now I'm using the following to make the formula for one of the regressions, but it feels a bit hacked-up:</p>

<pre><code>foo &lt;- function(x, y, controls) {
    cl &lt;- match.call()
    xn &lt;- cl[[""x""]]
    xf &lt;- as.formula(paste(xn, deparse(controls)))
}
</code></pre>

<p>I'd prefer to do this using <code>update.formula()</code>, but of course <code>update.formula(controls, x ~ .)</code> and <code>update.formula(controls, as.name(x) ~ .)</code> don't work. What should I be doing?</p>
","Using function arguments in update.formula <p>I am writing a function that takes two variables and separately regresses each of them on a set of controls expressed as a one-sided formula. Right now I'm using the following to make the formula for one of the regressions, but it feels a bit hacked-up:</p>

<pre><code>foo &lt;- function(x, y, controls) {
    cl &lt;- match.call()
    xn &lt;- cl[[""x""]]
    xf &lt;- as.formula(paste(xn, deparse(controls)))
}
</code></pre>

<p>I'd prefer to do this using <code>update.formula()</code>, but of course <code>update.formula(controls, x ~ .)</code> and <code>update.formula(controls, as.name(x) ~ .)</code> don't work. What should I be doing?</p>
"
1219480,64253,2009-08-02T18:25:39Z,2,Step-by-Step How-to on Mediation Analysis in R,"<p>I'd like to know if anybody can provide a step-by-step how to on how to use mediation analysis using <a href=""http://imai.princeton.edu/software/mediation.html"" rel=""nofollow noreferrer"">Keele, Tingley, Yamamoto and Imai's mediation package</a>. I think there are two approaches to this - <a href=""http://www.public.asu.edu/~davidpm/classes/psy536/Baron.pdf"" rel=""nofollow noreferrer"">the classic Baron and Kenny (1986)</a> and the new one by <a href=""http://kuscholarworks.ku.edu/dspace/bitstream/1808/1658/1/preacher_rucker_hayes_2007.pdf"" rel=""nofollow noreferrer"">Preacher, Rucker and Hayes (2007)</a> - I'd like to know how to do both approaches in R</p>
","Step-by-Step How-to on Mediation Analysis in R <p>I'd like to know if anybody can provide a step-by-step how to on how to use mediation analysis using <a href=""http://imai.princeton.edu/software/mediation.html"" rel=""nofollow noreferrer"">Keele, Tingley, Yamamoto and Imai's mediation package</a>. I think there are two approaches to this - <a href=""http://www.public.asu.edu/~davidpm/classes/psy536/Baron.pdf"" rel=""nofollow noreferrer"">the classic Baron and Kenny (1986)</a> and the new one by <a href=""http://kuscholarworks.ku.edu/dspace/bitstream/1808/1658/1/preacher_rucker_hayes_2007.pdf"" rel=""nofollow noreferrer"">Preacher, Rucker and Hayes (2007)</a> - I'd like to know how to do both approaches in R</p>
"
1223904,37751,2009-08-03T18:32:05Z,3,Hooking R from within Excel - DCOM? R add in for Excel?,"<p>In the past I have used a DCOM connection to call R functions from Excel and from VBA inside of Excel. I just got a new laptop and have been looking for the install files for the R add in for Excel. I find references to it all over the place but they all point to R (D)COM Server project's home page at <a href=""http://sunsite.univie.ac.at/rcom"" rel=""nofollow noreferrer"">http://sunsite.univie.ac.at/rcom</a>. That URL has been down now for some time. Is there another way to get the same functionality with another method? Is there a new project page? </p>

<p>I've never tried to use the DCOM server without the Excel Add-in. Is that a possibility?</p>
","Hooking R from within Excel - DCOM? R add in for Excel? <p>In the past I have used a DCOM connection to call R functions from Excel and from VBA inside of Excel. I just got a new laptop and have been looking for the install files for the R add in for Excel. I find references to it all over the place but they all point to R (D)COM Server project's home page at <a href=""http://sunsite.univie.ac.at/rcom"" rel=""nofollow noreferrer"">http://sunsite.univie.ac.at/rcom</a>. That URL has been down now for some time. Is there another way to get the same functionality with another method? Is there a new project page? </p>

<p>I've never tried to use the DCOM server without the Excel Add-in. Is that a possibility?</p>
"
1231195,144601,2009-08-05T04:30:49Z,83,Multiline Comment Workarounds?,"<p>I (sort of) already know the answer to this question.  But I figured it is one that gets asked so frequently on the R Users list, that there should be one solid good answer.  <strong>To the best of my knowledge there is no multiline comment functionality in R.  So, does anyone have any good workarounds?</strong></p>

<p>While quite a bit of work in R usually involves interactive sessions (which casts doubt on the need for multiline comments), there are times when I've had to send scripts to colleagues and classmates, much of which involves nontrivial blocks of code.  And for people coming from other languages it is a fairly natural question.  </p>

<p>In the past I've used quotes. Since strings support linebreaks, running an R script with</p>

<pre><code>""
Here's my multiline comment.

""
a &lt;- 10
rocknroll.lm &lt;- lm(blah blah blah)
 ...
</code></pre>

<p>works fine.  Does anyone have a better solution?</p>
","Multiline Comment Workarounds? <p>I (sort of) already know the answer to this question.  But I figured it is one that gets asked so frequently on the R Users list, that there should be one solid good answer.  <strong>To the best of my knowledge there is no multiline comment functionality in R.  So, does anyone have any good workarounds?</strong></p>

<p>While quite a bit of work in R usually involves interactive sessions (which casts doubt on the need for multiline comments), there are times when I've had to send scripts to colleagues and classmates, much of which involves nontrivial blocks of code.  And for people coming from other languages it is a fairly natural question.  </p>

<p>In the past I've used quotes. Since strings support linebreaks, running an R script with</p>

<pre><code>""
Here's my multiline comment.

""
a &lt;- 10
rocknroll.lm &lt;- lm(blah blah blah)
 ...
</code></pre>

<p>works fine.  Does anyone have a better solution?</p>
"
1233948,112882,2009-08-05T15:18:21Z,0,How to set alpha in R?,"<p>I have <a href=""http://rss.acs.unt.edu/Rdoc/library/coin/html/LocationTests.html"" rel=""nofollow noreferrer"">this example</a> from the coin package of R:</p>

<pre><code>  library(coin)
  library(multcomp)
  ### Length of YOY Gizzard Shad from Kokosing Lake, Ohio,
  ### sampled in Summer 1984, Hollander &amp; Wolfe (1999), Table 6.3, page 200
  YOY &lt;- data.frame(length = c(46, 28, 46, 37, 32, 41, 42, 45, 38, 44, 
                               42, 60, 32, 42, 45, 58, 27, 51, 42, 52, 
                               38, 33, 26, 25, 28, 28, 26, 27, 27, 27, 
                               31, 30, 27, 29, 30, 25, 25, 24, 27, 30),
                    site = factor(c(rep(""I"", 10), rep(""II"", 10),
                                    rep(""III"", 10), rep(""IV"", 10))))

  ### Nemenyi-Damico-Wolfe-Dunn test (joint ranking)
  ### Hollander &amp; Wolfe (1999), page 244 
  ### (where Steel-Dwass results are given)
  NDWD &lt;- oneway_test(length ~ site, data = YOY,
      ytrafo = function(data) trafo(data, numeric_trafo = rank),
      xtrafo = function(data) trafo(data, factor_trafo = function(x)
          model.matrix(~x - 1) %*% t(contrMat(table(x), ""Tukey""))),
      teststat = ""max"", distribution = approximate(B = 90000))

  ### global p-value
  print(pvalue(NDWD))

  ### sites (I = II) != (III = IV) at alpha = 0.01 (page 244)
  print(pvalue(NDWD, method = ""single-step""))
</code></pre>

<p>I want to assign alpha a different value, how can I do this??</p>

<p>This doesn't work!</p>

<pre><code>  library(coin)
  library(multcomp)
  ### Length of YOY Gizzard Shad from Kokosing Lake, Ohio,
  ### sampled in Summer 1984, Hollander &amp; Wolfe (1999), Table 6.3, page 200
  YOY &lt;- data.frame(length = c(46, 28, 46, 37, 32, 41, 42, 45, 38, 44, 
                               42, 60, 32, 42, 45, 58, 27, 51, 42, 52, 
                               38, 33, 26, 25, 28, 28, 26, 27, 27, 27, 
                               31, 30, 27, 29, 30, 25, 25, 24, 27, 30),
                    site = factor(c(rep(""I"", 10), rep(""II"", 10),
                                    rep(""III"", 10), rep(""IV"", 10))))

  ### Nemenyi-Damico-Wolfe-Dunn test (joint ranking)
  ### Hollander &amp; Wolfe (1999), page 244 
  ### (where Steel-Dwass results are given)
  NDWD &lt;- oneway_test(length ~ site, data = YOY,
      ytrafo = function(data) trafo(data, numeric_trafo = rank),
      xtrafo = function(data) trafo(data, factor_trafo = function(x)
          model.matrix(~x - 1) %*% t(contrMat(table(x), ""Tukey""))),
      teststat = ""max"", distribution = approximate(B = 90000),
      alpha = 0.05)

  ### global p-value
  print(pvalue(NDWD))

  ### sites (I = II) != (III = IV) at alpha = 0.05 (default was 0.01) (page 244)
  print(pvalue(NDWD, method = ""single-step""))
</code></pre>
","How to set alpha in R? <p>I have <a href=""http://rss.acs.unt.edu/Rdoc/library/coin/html/LocationTests.html"" rel=""nofollow noreferrer"">this example</a> from the coin package of R:</p>

<pre><code>  library(coin)
  library(multcomp)
  ### Length of YOY Gizzard Shad from Kokosing Lake, Ohio,
  ### sampled in Summer 1984, Hollander &amp; Wolfe (1999), Table 6.3, page 200
  YOY &lt;- data.frame(length = c(46, 28, 46, 37, 32, 41, 42, 45, 38, 44, 
                               42, 60, 32, 42, 45, 58, 27, 51, 42, 52, 
                               38, 33, 26, 25, 28, 28, 26, 27, 27, 27, 
                               31, 30, 27, 29, 30, 25, 25, 24, 27, 30),
                    site = factor(c(rep(""I"", 10), rep(""II"", 10),
                                    rep(""III"", 10), rep(""IV"", 10))))

  ### Nemenyi-Damico-Wolfe-Dunn test (joint ranking)
  ### Hollander &amp; Wolfe (1999), page 244 
  ### (where Steel-Dwass results are given)
  NDWD &lt;- oneway_test(length ~ site, data = YOY,
      ytrafo = function(data) trafo(data, numeric_trafo = rank),
      xtrafo = function(data) trafo(data, factor_trafo = function(x)
          model.matrix(~x - 1) %*% t(contrMat(table(x), ""Tukey""))),
      teststat = ""max"", distribution = approximate(B = 90000))

  ### global p-value
  print(pvalue(NDWD))

  ### sites (I = II) != (III = IV) at alpha = 0.01 (page 244)
  print(pvalue(NDWD, method = ""single-step""))
</code></pre>

<p>I want to assign alpha a different value, how can I do this??</p>

<p>This doesn't work!</p>

<pre><code>  library(coin)
  library(multcomp)
  ### Length of YOY Gizzard Shad from Kokosing Lake, Ohio,
  ### sampled in Summer 1984, Hollander &amp; Wolfe (1999), Table 6.3, page 200
  YOY &lt;- data.frame(length = c(46, 28, 46, 37, 32, 41, 42, 45, 38, 44, 
                               42, 60, 32, 42, 45, 58, 27, 51, 42, 52, 
                               38, 33, 26, 25, 28, 28, 26, 27, 27, 27, 
                               31, 30, 27, 29, 30, 25, 25, 24, 27, 30),
                    site = factor(c(rep(""I"", 10), rep(""II"", 10),
                                    rep(""III"", 10), rep(""IV"", 10))))

  ### Nemenyi-Damico-Wolfe-Dunn test (joint ranking)
  ### Hollander &amp; Wolfe (1999), page 244 
  ### (where Steel-Dwass results are given)
  NDWD &lt;- oneway_test(length ~ site, data = YOY,
      ytrafo = function(data) trafo(data, numeric_trafo = rank),
      xtrafo = function(data) trafo(data, factor_trafo = function(x)
          model.matrix(~x - 1) %*% t(contrMat(table(x), ""Tukey""))),
      teststat = ""max"", distribution = approximate(B = 90000),
      alpha = 0.05)

  ### global p-value
  print(pvalue(NDWD))

  ### sites (I = II) != (III = IV) at alpha = 0.05 (default was 0.01) (page 244)
  print(pvalue(NDWD, method = ""single-step""))
</code></pre>
"
1236620,70702,2009-08-06T02:03:00Z,77,Global variables in R,"<p>I am a newbie in R programming. Though I am poking into the manuals, I also wanted to ask the community <strong>""How can we set global variables inside a function?""</strong></p>

<p>Any pointers will help.</p>

<p>Question-2: Regarding plotting,</p>

<p>I am using plotting multiple graphs in a single sheet, and to differentiate each one of them, I want to add title for each one of them. Can anyone tell me how I can achieve this?</p>
","Global variables in R <p>I am a newbie in R programming. Though I am poking into the manuals, I also wanted to ask the community <strong>""How can we set global variables inside a function?""</strong></p>

<p>Any pointers will help.</p>

<p>Question-2: Regarding plotting,</p>

<p>I am using plotting multiple graphs in a single sheet, and to differentiate each one of them, I want to add title for each one of them. Can anyone tell me how I can achieve this?</p>
"
1238250,64253,2009-08-06T11:13:22Z,0,How do you implement Velicer's MAP criterion in R,"<p>I'm looking at the <a href=""http://bm2.genes.nig.ac.jp/RGM2/R_current/library/psych/man/00.psych-package.html"" rel=""nofollow noreferrer"">psych package</a> and the <a href=""http://www.personality-project.org/R/html/VSS.html"" rel=""nofollow noreferrer"">VSS tutorial</a>, do I simply replace VSS with MAP? Like this:</p>

<pre><code>MAP(x, n = 8, rotate = ""varimax"", diagonal = FALSE, fm = ""pa"", n.obs=NULL,plot=TRUE,title=""Very Simple Structure"",...)
</code></pre>

<p>or is there another way to do this?
I've doing factor analysis right now and I'm using the elbow method on a scree plot. I'm trying to see if I can try to use Velicer's MAP criterion also</p>
","How do you implement Velicer's MAP criterion in R <p>I'm looking at the <a href=""http://bm2.genes.nig.ac.jp/RGM2/R_current/library/psych/man/00.psych-package.html"" rel=""nofollow noreferrer"">psych package</a> and the <a href=""http://www.personality-project.org/R/html/VSS.html"" rel=""nofollow noreferrer"">VSS tutorial</a>, do I simply replace VSS with MAP? Like this:</p>

<pre><code>MAP(x, n = 8, rotate = ""varimax"", diagonal = FALSE, fm = ""pa"", n.obs=NULL,plot=TRUE,title=""Very Simple Structure"",...)
</code></pre>

<p>or is there another way to do this?
I've doing factor analysis right now and I'm using the elbow method on a scree plot. I'm trying to see if I can try to use Velicer's MAP criterion also</p>
"
1238933,23929,2009-08-06T13:35:24Z,6,"Should ""while loops"" be preferred to ""for loops"" for large, necessary loops in R?","<p>Realizing that loops are usually not ideal in R, sometimes they are necessary.</p>

<p>When writing large loops, doesn't </p>

<pre><code>for (i in 1:large_number) 
</code></pre>

<p>waste memory, since a vector of size large_number must be created?</p>

<p>Would this make while loops the best choice for large, necessary loops?</p>
","Should ""while loops"" be preferred to ""for loops"" for large, necessary loops in R? <p>Realizing that loops are usually not ideal in R, sometimes they are necessary.</p>

<p>When writing large loops, doesn't </p>

<pre><code>for (i in 1:large_number) 
</code></pre>

<p>waste memory, since a vector of size large_number must be created?</p>

<p>Would this make while loops the best choice for large, necessary loops?</p>
"
1241184,144278,2009-08-06T20:23:56Z,6,Overall Title for Plotting Window,"<p>If I create a plotting window in R with m rows and n columns, how can I give the ""overall"" graphic a main title?</p>

<p>For example, I might have three scatterplots showing the relationship between GPA and SAT score for 3 different schools. How could I give one master title to all three plots, such as, ""SAT score vs. GPA for 3 schools in CA""?</p>
","Overall Title for Plotting Window <p>If I create a plotting window in R with m rows and n columns, how can I give the ""overall"" graphic a main title?</p>

<p>For example, I might have three scatterplots showing the relationship between GPA and SAT score for 3 different schools. How could I give one master title to all three plots, such as, ""SAT score vs. GPA for 3 schools in CA""?</p>
"
1245273,101927,2009-08-07T15:02:34Z,62,Histogram with Logarithmic Scale and custom breaks,"<p>I'm trying to generate a histogram in R with a logarithmic scale for y. Currently I do:</p>

<pre><code>hist(mydata$V3, breaks=c(0,1,2,3,4,5,25))
</code></pre>

<p>This gives me a histogram, but the density between 0 to 1 is so great (about a million values difference) that you can barely make out any of the other bars.</p>

<p>Then I've tried doing:</p>

<pre><code>mydata_hist &lt;- hist(mydata$V3, breaks=c(0,1,2,3,4,5,25), plot=FALSE)
plot(rpd_hist$counts, log=""xy"", pch=20, col=""blue"")
</code></pre>

<p>It gives me sorta what I want, but the bottom shows me the values 1-6 rather than 0, 1, 2, 3, 4, 5, 25.  It's also showing the data as points rather than bars. <code>barplot</code> works but then I don't get any bottom axis.</p>
","Histogram with Logarithmic Scale and custom breaks <p>I'm trying to generate a histogram in R with a logarithmic scale for y. Currently I do:</p>

<pre><code>hist(mydata$V3, breaks=c(0,1,2,3,4,5,25))
</code></pre>

<p>This gives me a histogram, but the density between 0 to 1 is so great (about a million values difference) that you can barely make out any of the other bars.</p>

<p>Then I've tried doing:</p>

<pre><code>mydata_hist &lt;- hist(mydata$V3, breaks=c(0,1,2,3,4,5,25), plot=FALSE)
plot(rpd_hist$counts, log=""xy"", pch=20, col=""blue"")
</code></pre>

<p>It gives me sorta what I want, but the bottom shows me the values 1-6 rather than 0, 1, 2, 3, 4, 5, 25.  It's also showing the data as points rather than bars. <code>barplot</code> works but then I don't get any bottom axis.</p>
"
1246244,37751,2009-08-07T18:14:19Z,9,Applying pnorm to columns of a data frame,"<p>I'm trying to normalize some data which I have in a data frame. I want to take each value and run it through the pnorm function along with the mean and standard deviation of the column the value lives in. Using loops, here's how I would write out what I want to do:</p>

<pre><code>#example data
hist_data &lt;- data.frame( matrix( rnorm( 200,mean=5,sd=.5 ),nrow=20 ) )

n &lt;- dim( hist_data )[2] #columns=10
k &lt;- dim( hist_data )[1] #rows   =20

#set up the data frame which we will populate with a loop
normalized &lt;- data.frame( matrix( nrow = nrow( hist_data ), ncol = ncol( hist_data ) ) )

#hot loop in loop action
for ( i in 1:n ){
   for ( j in 1:k ){
      normalized[j,i] &lt;- pnorm( hist_data[j,i], 
                                mean = mean( hist_data[,i] ), 
                                sd = sd( hist_data[,i] ) )
   }  
}
normalized
</code></pre>

<p>It seems that in R there should be a handy dandy vector way of doing this. I thought I was smart so tried using the apply function:</p>

<pre><code>#trouble ahead
hist_data &lt;- data.frame( matrix( rnorm( 200, mean = 5,sd = .5 ), nrow=10 ) )
normalized &lt;- apply( hist_data, 2, pnorm, mean = mean( hist_data ), sd = sd( hist_data ) )
normalized
</code></pre>

<p>Much to my chagrin, that does NOT produce what I expected. The upper left and bottom right elements of the output are correct, but that's it. So how can I de-loopify my life? </p>

<p>Bonus points if you can tell me what my second code block is actually doing. Kind of a mystery to me still. :)</p>
","Applying pnorm to columns of a data frame <p>I'm trying to normalize some data which I have in a data frame. I want to take each value and run it through the pnorm function along with the mean and standard deviation of the column the value lives in. Using loops, here's how I would write out what I want to do:</p>

<pre><code>#example data
hist_data &lt;- data.frame( matrix( rnorm( 200,mean=5,sd=.5 ),nrow=20 ) )

n &lt;- dim( hist_data )[2] #columns=10
k &lt;- dim( hist_data )[1] #rows   =20

#set up the data frame which we will populate with a loop
normalized &lt;- data.frame( matrix( nrow = nrow( hist_data ), ncol = ncol( hist_data ) ) )

#hot loop in loop action
for ( i in 1:n ){
   for ( j in 1:k ){
      normalized[j,i] &lt;- pnorm( hist_data[j,i], 
                                mean = mean( hist_data[,i] ), 
                                sd = sd( hist_data[,i] ) )
   }  
}
normalized
</code></pre>

<p>It seems that in R there should be a handy dandy vector way of doing this. I thought I was smart so tried using the apply function:</p>

<pre><code>#trouble ahead
hist_data &lt;- data.frame( matrix( rnorm( 200, mean = 5,sd = .5 ), nrow=10 ) )
normalized &lt;- apply( hist_data, 2, pnorm, mean = mean( hist_data ), sd = sd( hist_data ) )
normalized
</code></pre>

<p>Much to my chagrin, that does NOT produce what I expected. The upper left and bottom right elements of the output are correct, but that's it. So how can I de-loopify my life? </p>

<p>Bonus points if you can tell me what my second code block is actually doing. Kind of a mystery to me still. :)</p>
"
1249548,84458,2009-08-08T18:16:43Z,194,Side-by-side plots with ggplot2,"<p>I would like to place two plots side by side using the <a href=""http://crantastic.org/packages/ggplot2"" rel=""noreferrer"">ggplot2 package</a>, i.e. do the equivalent of <code>par(mfrow=c(1,2))</code>.</p>

<p>For example, I would like to have the following two plots show side-by-side with the same scale.</p>

<pre><code>x &lt;- rnorm(100)
eps &lt;- rnorm(100,0,.2)
qplot(x,3*x+eps)
qplot(x,2*x+eps)
</code></pre>

<p>Do I need to put them in the same data.frame?</p>

<pre><code>qplot(displ, hwy, data=mpg, facets = . ~ year) + geom_smooth()
</code></pre>
","Side-by-side plots with ggplot2 <p>I would like to place two plots side by side using the <a href=""http://crantastic.org/packages/ggplot2"" rel=""noreferrer"">ggplot2 package</a>, i.e. do the equivalent of <code>par(mfrow=c(1,2))</code>.</p>

<p>For example, I would like to have the following two plots show side-by-side with the same scale.</p>

<pre><code>x &lt;- rnorm(100)
eps &lt;- rnorm(100,0,.2)
qplot(x,3*x+eps)
qplot(x,2*x+eps)
</code></pre>

<p>Do I need to put them in the same data.frame?</p>

<pre><code>qplot(displ, hwy, data=mpg, facets = . ~ year) + geom_smooth()
</code></pre>
"
1252546,153440,2009-08-09T23:00:23Z,16,How to replace NA (missing values) in a data frame with neighbouring values,"<pre><code>862 2006-05-19 6.241603 5.774208     
863 2006-05-20 NA       NA      
864 2006-05-21 NA       NA      
865 2006-05-22 6.383929 5.906426      
866 2006-05-23 6.782068 6.268758      
867 2006-05-24 6.534616 6.013767      
868 2006-05-25 6.370312 5.856366      
869 2006-05-26 6.225175 5.781617      
870 2006-05-27 NA       NA     
</code></pre>

<p>I have a data frame x like above with some NA, which i want to fill using neighboring non-NA values like for 2006-05-20 it will be avg of 19&amp;22 </p>

<p>How do it is the question?</p>
","How to replace NA (missing values) in a data frame with neighbouring values <pre><code>862 2006-05-19 6.241603 5.774208     
863 2006-05-20 NA       NA      
864 2006-05-21 NA       NA      
865 2006-05-22 6.383929 5.906426      
866 2006-05-23 6.782068 6.268758      
867 2006-05-24 6.534616 6.013767      
868 2006-05-25 6.370312 5.856366      
869 2006-05-26 6.225175 5.781617      
870 2006-05-27 NA       NA     
</code></pre>

<p>I have a data frame x like above with some NA, which i want to fill using neighboring non-NA values like for 2006-05-20 it will be avg of 19&amp;22 </p>

<p>How do it is the question?</p>
"
1256347,138470,2009-08-10T18:08:30Z,9,"Plot time data in R to various resolutions (to the minute, to the hour, to the second, etc.)","<p>I have some data in CSV like:</p>

<pre><code>""Timestamp"", ""Count""
""2009-07-20 16:30:45"", 10
""2009-07-20 16:30:45"", 15
""2009-07-20 16:30:46"", 8
""2009-07-20 16:30:46"", 6
""2009-07-20 16:30:46"", 8
""2009-07-20 16:30:47"", 20
</code></pre>

<p>I can read it into R using read.cvs. I'd like to plot:</p>

<ol>
<li>Number of entries per second, so:

<pre>
""2009-07-20 16:30:45"", 2
""2009-07-20 16:30:46"", 3
""2009-07-20 16:30:47"", 1
</pre></li>
<li>Average value per second:

<pre>
""2009-07-20 16:30:45"", 12.5
""2009-07-20 16:30:46"", 7.333
""2009-07-20 16:30:47"", 20
</pre></li>
<li>Same as 1 &amp; 2 but then by Minute and then by Hour.</li>
</ol>

<p>Is there some way to do this (collect by second/min/etc &amp; plot) in R? </p>
","Plot time data in R to various resolutions (to the minute, to the hour, to the second, etc.) <p>I have some data in CSV like:</p>

<pre><code>""Timestamp"", ""Count""
""2009-07-20 16:30:45"", 10
""2009-07-20 16:30:45"", 15
""2009-07-20 16:30:46"", 8
""2009-07-20 16:30:46"", 6
""2009-07-20 16:30:46"", 8
""2009-07-20 16:30:47"", 20
</code></pre>

<p>I can read it into R using read.cvs. I'd like to plot:</p>

<ol>
<li>Number of entries per second, so:

<pre>
""2009-07-20 16:30:45"", 2
""2009-07-20 16:30:46"", 3
""2009-07-20 16:30:47"", 1
</pre></li>
<li>Average value per second:

<pre>
""2009-07-20 16:30:45"", 12.5
""2009-07-20 16:30:46"", 7.333
""2009-07-20 16:30:47"", 20
</pre></li>
<li>Same as 1 &amp; 2 but then by Minute and then by Hour.</li>
</ol>

<p>Is there some way to do this (collect by second/min/etc &amp; plot) in R? </p>
"
1259867,23929,2009-08-11T11:45:35Z,8,How to do median splits within factor levels in R?,"<p>Here I make a new column to indicate whether myData is above or below its median</p>

<pre><code>### MedianSplits based on Whole Data
#create some test data
myDataFrame=data.frame(myData=runif(15),myFactor=rep(c(""A"",""B"",""C""),5)) 

#create column showing median split
myBreaks= quantile(myDataFrame$myData,c(0,.5,1))
myDataFrame$MedianSplitWholeData = cut(
    myDataFrame$myData,
    breaks=myBreaks, 
    include.lowest=TRUE,
    labels=c(""Below"",""Above""))

#Check if it's correct
myDataFrame$AboveWholeMedian = myDataFrame$myData &gt; median(myDataFrame$myData)
myDataFrame
</code></pre>

<p>Works fine. Now I want to do the same thing, but compute the median splits within each level of myFactor.</p>

<p>I've come up with this:</p>

<pre><code>#Median splits within factor levels
byOutput=by(myDataFrame$myData,myDataFrame$myFactor, function (x) {
     myBreaks= quantile(x,c(0,.5,1))
     MedianSplitByGroup=cut(x,
       breaks=myBreaks, 
       include.lowest=TRUE,
       labels=c(""Below"",""Above""))
     MedianSplitByGroup
     })
</code></pre>

<p>byOutput contains what I want. It categorizes each element of factors A, B, and C correctly. However I'd like to create a new column, myDataFrame$FactorLevelMedianSplit, that shows the newly-computed median split.</p>

<p>How do you convert the output of the ""by"" command into a useful data-frame column?</p>

<p>I think perhaps the ""by"" command is not R-like way to do this ... </p>

<p><strong>Update</strong>:</p>

<p>With Thierry's example of how to use factor() cleverly, and upon discovering the ""ave"" function in Spector's book, I've found this solution, which requires no additional packages.</p>

<pre><code>myDataFrame$MediansByFactor=ave(
    myDataFrame$myData,
    myDataFrame$myFactor,
    FUN=median)

myDataFrame$FactorLevelMedianSplit = factor(
    myDataFrame$myData&gt;myDataFrame$MediansByFactor, 
    levels = c(TRUE, FALSE), 
    labels = c(""Above"", ""Below""))
</code></pre>
","How to do median splits within factor levels in R? <p>Here I make a new column to indicate whether myData is above or below its median</p>

<pre><code>### MedianSplits based on Whole Data
#create some test data
myDataFrame=data.frame(myData=runif(15),myFactor=rep(c(""A"",""B"",""C""),5)) 

#create column showing median split
myBreaks= quantile(myDataFrame$myData,c(0,.5,1))
myDataFrame$MedianSplitWholeData = cut(
    myDataFrame$myData,
    breaks=myBreaks, 
    include.lowest=TRUE,
    labels=c(""Below"",""Above""))

#Check if it's correct
myDataFrame$AboveWholeMedian = myDataFrame$myData &gt; median(myDataFrame$myData)
myDataFrame
</code></pre>

<p>Works fine. Now I want to do the same thing, but compute the median splits within each level of myFactor.</p>

<p>I've come up with this:</p>

<pre><code>#Median splits within factor levels
byOutput=by(myDataFrame$myData,myDataFrame$myFactor, function (x) {
     myBreaks= quantile(x,c(0,.5,1))
     MedianSplitByGroup=cut(x,
       breaks=myBreaks, 
       include.lowest=TRUE,
       labels=c(""Below"",""Above""))
     MedianSplitByGroup
     })
</code></pre>

<p>byOutput contains what I want. It categorizes each element of factors A, B, and C correctly. However I'd like to create a new column, myDataFrame$FactorLevelMedianSplit, that shows the newly-computed median split.</p>

<p>How do you convert the output of the ""by"" command into a useful data-frame column?</p>

<p>I think perhaps the ""by"" command is not R-like way to do this ... </p>

<p><strong>Update</strong>:</p>

<p>With Thierry's example of how to use factor() cleverly, and upon discovering the ""ave"" function in Spector's book, I've found this solution, which requires no additional packages.</p>

<pre><code>myDataFrame$MediansByFactor=ave(
    myDataFrame$myData,
    myDataFrame$myFactor,
    FUN=median)

myDataFrame$FactorLevelMedianSplit = factor(
    myDataFrame$myData&gt;myDataFrame$MediansByFactor, 
    levels = c(TRUE, FALSE), 
    labels = c(""Above"", ""Below""))
</code></pre>
"
1260965,37751,2009-08-11T15:06:53Z,58,Developing Geographic Thematic Maps with R,"<p>There are clearly a number of packages in R for all sorts of spatial analysis. That can by seen in the <a href=""http://cran.r-project.org/web/views/Spatial.html"" rel=""noreferrer"">CRAN Task View: Analysis of Spatial Data</a>. These packages are numerous and diverse, but all I want to do is some simple <a href=""http://images.google.com/images?q=thematic+map&amp;oe=utf-8&amp;rls=org.mozilla:en-US:official&amp;client=firefox-a&amp;um=1&amp;ie=UTF-8&amp;ei=EYiBSqywF5TYNZW8sJ0L&amp;sa=X&amp;oi=image_result_group&amp;ct=title&amp;resnum=4"" rel=""noreferrer"">thematic maps</a>. I have data with county and state FIPS codes and I have ESRI shape files of county and state boundaries and the accompanying FIPS codes which allows joining with the data. The shape files could be easily converted to other formats, if needed. </p>

<p>So what's the most straight forward way to create thematic maps with R? </p>

<p>This map looks like it was created with an ESRI Arc product, but this is the type of thing I would like to do with R:</p>

<p><a href=""http://www.infousagov.com/images/choro.jpg"" rel=""noreferrer"">alt text http://www.infousagov.com/images/choro.jpg</a> Map <a href=""http://www.infousagov.com/thematicmap.asp"" rel=""noreferrer"">copied from here</a>. </p>
","Developing Geographic Thematic Maps with R <p>There are clearly a number of packages in R for all sorts of spatial analysis. That can by seen in the <a href=""http://cran.r-project.org/web/views/Spatial.html"" rel=""noreferrer"">CRAN Task View: Analysis of Spatial Data</a>. These packages are numerous and diverse, but all I want to do is some simple <a href=""http://images.google.com/images?q=thematic+map&amp;oe=utf-8&amp;rls=org.mozilla:en-US:official&amp;client=firefox-a&amp;um=1&amp;ie=UTF-8&amp;ei=EYiBSqywF5TYNZW8sJ0L&amp;sa=X&amp;oi=image_result_group&amp;ct=title&amp;resnum=4"" rel=""noreferrer"">thematic maps</a>. I have data with county and state FIPS codes and I have ESRI shape files of county and state boundaries and the accompanying FIPS codes which allows joining with the data. The shape files could be easily converted to other formats, if needed. </p>

<p>So what's the most straight forward way to create thematic maps with R? </p>

<p>This map looks like it was created with an ESRI Arc product, but this is the type of thing I would like to do with R:</p>

<p><a href=""http://www.infousagov.com/images/choro.jpg"" rel=""noreferrer"">alt text http://www.infousagov.com/images/choro.jpg</a> Map <a href=""http://www.infousagov.com/thematicmap.asp"" rel=""noreferrer"">copied from here</a>. </p>
"
1262911,NA,2009-08-11T21:04:53Z,2,Rows being dropped in R with read.table?,"<p>I am loading a table in which the first column is a URL and reading it into R using <code>read.table()</code>.  </p>

<p>It seems that R is dropping about 1/3 of the columns and does not return any errors.  </p>

<p>The URLs do not contain any <code>#</code> characters or tabs (my separator field), which I understand could be an issue.  If I convert the URLs to integer IDs first, the problem goes away.</p>

<p>Is there something about the field that might be causing R to drop the rows?</p>
","Rows being dropped in R with read.table? <p>I am loading a table in which the first column is a URL and reading it into R using <code>read.table()</code>.  </p>

<p>It seems that R is dropping about 1/3 of the columns and does not return any errors.  </p>

<p>The URLs do not contain any <code>#</code> characters or tabs (my separator field), which I understand could be an issue.  If I convert the URLs to integer IDs first, the problem goes away.</p>

<p>Is there something about the field that might be causing R to drop the rows?</p>
"
1265129,23929,2009-08-12T09:22:08Z,13,How to export the definition of an R object to plain text so that others can recreate it?,"<p>Let's say you have this data in R, and you want to post a question on stackoverflow. For others to best help you, it would be nice if they could have a copy of your object (dataframe, vector, etc) to work with.</p>

<p>Let's say your data is in a data frame called site.data</p>

<pre><code>&gt; site.data
    site year     peak
1  ALBEN    5 101529.6
2  ALBEN   10 117483.4
3  ALBEN   20 132960.9
8  ALDER    5   6561.3
9  ALDER   10   7897.1
10 ALDER   20   9208.1
15 AMERI    5  43656.5
16 AMERI   10  51475.3
17 AMERI   20  58854.4
</code></pre>

<p>How do you package it up so that the users can recreate the data exactly as you have it? </p>

<p>You want to do this without having people download a text file and import it.  </p>

<p>(Note: These data subsetted from an example of the REvolutions blog)</p>
","How to export the definition of an R object to plain text so that others can recreate it? <p>Let's say you have this data in R, and you want to post a question on stackoverflow. For others to best help you, it would be nice if they could have a copy of your object (dataframe, vector, etc) to work with.</p>

<p>Let's say your data is in a data frame called site.data</p>

<pre><code>&gt; site.data
    site year     peak
1  ALBEN    5 101529.6
2  ALBEN   10 117483.4
3  ALBEN   20 132960.9
8  ALDER    5   6561.3
9  ALDER   10   7897.1
10 ALDER   20   9208.1
15 AMERI    5  43656.5
16 AMERI   10  51475.3
17 AMERI   20  58854.4
</code></pre>

<p>How do you package it up so that the users can recreate the data exactly as you have it? </p>

<p>You want to do this without having people download a text file and import it.  </p>

<p>(Note: These data subsetted from an example of the REvolutions blog)</p>
"
1266279,23929,2009-08-12T13:50:45Z,138,How to organize large R programs?,"<p>When I undertake an R project of any complexity, my scripts quickly get long and confusing. </p>

<p>What are some practices I can adopt so that my code will always be a pleasure to work with? I'm thinking about things like</p>

<ul>
<li>Placement of functions in source files</li>
<li>When to break something out to another source file</li>
<li>What should be in the master file</li>
<li>Using functions as organizational units (whether this is worthwhile given that R makes it hard to access global state)</li>
<li>Indentation / line break practices. 

<ul>
<li>Treat ( like {? </li>
<li>Put things like )} on 1 or 2 lines?</li>
</ul></li>
</ul>

<p>Basically, what are your rules of thumb for organizing large R scripts?</p>
","How to organize large R programs? <p>When I undertake an R project of any complexity, my scripts quickly get long and confusing. </p>

<p>What are some practices I can adopt so that my code will always be a pleasure to work with? I'm thinking about things like</p>

<ul>
<li>Placement of functions in source files</li>
<li>When to break something out to another source file</li>
<li>What should be in the master file</li>
<li>Using functions as organizational units (whether this is worthwhile given that R makes it hard to access global state)</li>
<li>Indentation / line break practices. 

<ul>
<li>Treat ( like {? </li>
<li>Put things like )} on 1 or 2 lines?</li>
</ul></li>
</ul>

<p>Basically, what are your rules of thumb for organizing large R scripts?</p>
"
1269624,32978,2009-08-13T01:44:56Z,76,How to get row from R data.frame,"<p>I have a data.frame with column headers. </p>

<p>How can I get a specific row from the data.frame as a list (with the column headers as keys for the list)?</p>

<p>Specifically, my data.frame is </p>

<pre>
      A    B    C
    1 5    4.25 4.5
    2 3.5  4    2.5
    3 3.25 4    4
    4 4.25 4.5  2.25
    5 1.5  4.5  3
</pre>

<p>And I want to get a row that's the equivalent of</p>

<pre><code>&gt; c(a=5, b=4.25, c=4.5)
  a   b   c 
5.0 4.25 4.5 
</code></pre>
","How to get row from R data.frame <p>I have a data.frame with column headers. </p>

<p>How can I get a specific row from the data.frame as a list (with the column headers as keys for the list)?</p>

<p>Specifically, my data.frame is </p>

<pre>
      A    B    C
    1 5    4.25 4.5
    2 3.5  4    2.5
    3 3.25 4    4
    4 4.25 4.5  2.25
    5 1.5  4.5  3
</pre>

<p>And I want to get a row that's the equivalent of</p>

<pre><code>&gt; c(a=5, b=4.25, c=4.5)
  a   b   c 
5.0 4.25 4.5 
</code></pre>
"
1274171,84458,2009-08-13T19:46:34Z,11,Creating (and Accessing) a Sparse Matrix with NA default entries,"<p>After learning about the <a href=""https://stackoverflow.com/questions/1167448/most-mature-sparse-matrix-package-for-r"">options for working with sparse matrices in R</a>, I want to use the <a href=""http://cran.r-project.org/web/packages/Matrix/index.html"" rel=""nofollow noreferrer"">Matrix</a> package to create a sparse matrix from the following data frame and have all other elements be <code>NA</code>.</p>

<pre><code>     s    r d
1 1089 3772 1
2 1109  190 1
3 1109 2460 1
4 1109 3071 2
5 1109 3618 1
6 1109   38 7
</code></pre>

<p>I know I can create a sparse matrix with the following, accessing elements as usual:</p>

<pre><code>&gt; library(Matrix)
&gt; Y &lt;- sparseMatrix(s,r,x=d)
&gt; Y[1089,3772]
[1] 1
&gt; Y[1,1]
[1] 0
</code></pre>

<p>but if I want to have the default value to be NA, I tried the following:</p>

<pre><code>  M &lt;- Matrix(NA,max(s),max(r),sparse=TRUE)
  for (i in 1:nrow(X))
    M[s[i],r[i]] &lt;- d[i]
</code></pre>

<p>and got this error</p>

<pre><code>Error in checkSlotAssignment(object, name, value) : 
  assignment of an object of class ""numeric"" is not valid for slot ""x"" in an object of class ""lgCMatrix""; is(value, ""logical"") is not TRUE
</code></pre>

<p>Not only that, I find that one takes much longer to access to elements.</p>

<pre><code>&gt; system.time(Y[3,3])
   user  system elapsed 
  0.000   0.000   0.003 
&gt; system.time(M[3,3])
   user  system elapsed 
  0.660   0.032   0.995 
</code></pre>

<p>How should I be creating this matrix?  Why is one matrix so much slower to work with?</p>

<p>Here's the code snippet for the above data:</p>

<pre><code>X &lt;- structure(list(s = c(1089, 1109, 1109, 1109, 1109, 1109), r = c(3772, 
190, 2460, 3071, 3618, 38), d = c(1, 1, 1, 2, 1, 7)), .Names = c(""s"", 
""r"", ""d""), row.names = c(NA, 6L), class = ""data.frame"")
</code></pre>
","Creating (and Accessing) a Sparse Matrix with NA default entries <p>After learning about the <a href=""https://stackoverflow.com/questions/1167448/most-mature-sparse-matrix-package-for-r"">options for working with sparse matrices in R</a>, I want to use the <a href=""http://cran.r-project.org/web/packages/Matrix/index.html"" rel=""nofollow noreferrer"">Matrix</a> package to create a sparse matrix from the following data frame and have all other elements be <code>NA</code>.</p>

<pre><code>     s    r d
1 1089 3772 1
2 1109  190 1
3 1109 2460 1
4 1109 3071 2
5 1109 3618 1
6 1109   38 7
</code></pre>

<p>I know I can create a sparse matrix with the following, accessing elements as usual:</p>

<pre><code>&gt; library(Matrix)
&gt; Y &lt;- sparseMatrix(s,r,x=d)
&gt; Y[1089,3772]
[1] 1
&gt; Y[1,1]
[1] 0
</code></pre>

<p>but if I want to have the default value to be NA, I tried the following:</p>

<pre><code>  M &lt;- Matrix(NA,max(s),max(r),sparse=TRUE)
  for (i in 1:nrow(X))
    M[s[i],r[i]] &lt;- d[i]
</code></pre>

<p>and got this error</p>

<pre><code>Error in checkSlotAssignment(object, name, value) : 
  assignment of an object of class ""numeric"" is not valid for slot ""x"" in an object of class ""lgCMatrix""; is(value, ""logical"") is not TRUE
</code></pre>

<p>Not only that, I find that one takes much longer to access to elements.</p>

<pre><code>&gt; system.time(Y[3,3])
   user  system elapsed 
  0.000   0.000   0.003 
&gt; system.time(M[3,3])
   user  system elapsed 
  0.660   0.032   0.995 
</code></pre>

<p>How should I be creating this matrix?  Why is one matrix so much slower to work with?</p>

<p>Here's the code snippet for the above data:</p>

<pre><code>X &lt;- structure(list(s = c(1089, 1109, 1109, 1109, 1109, 1109), r = c(3772, 
190, 2460, 3071, 3618, 38), d = c(1, 1, 1, 2, 1, 7)), .Names = c(""s"", 
""r"", ""d""), row.names = c(NA, 6L), class = ""data.frame"")
</code></pre>
"
1279003,144278,2009-08-14T17:06:15Z,13,Specify Width and Height of Plot,"<p>I have a panel containing three plots. How can I use <code>par</code> to specify the width and height of the main panel so it is always at a fixed size?</p>
","Specify Width and Height of Plot <p>I have a panel containing three plots. How can I use <code>par</code> to specify the width and height of the main panel so it is always at a fixed size?</p>
"
1296646,84458,2009-08-18T21:33:18Z,956,How to sort a dataframe by column(s)?,"<p>I want to sort a data.frame by multiple columns. For example, with the data.frame below I would like to sort by column <code>z</code> (descending) then by column <code>b</code> (ascending): </p>

<pre><code>dd &lt;- data.frame(b = factor(c(""Hi"", ""Med"", ""Hi"", ""Low""), 
      levels = c(""Low"", ""Med"", ""Hi""), ordered = TRUE),
      x = c(""A"", ""D"", ""A"", ""C""), y = c(8, 3, 9, 9),
      z = c(1, 1, 1, 2))
dd
    b x y z
1  Hi A 8 1
2 Med D 3 1
3  Hi A 9 1
4 Low C 9 2
</code></pre>
","How to sort a dataframe by column(s)? <p>I want to sort a data.frame by multiple columns. For example, with the data.frame below I would like to sort by column <code>z</code> (descending) then by column <code>b</code> (ascending): </p>

<pre><code>dd &lt;- data.frame(b = factor(c(""Hi"", ""Med"", ""Hi"", ""Low""), 
      levels = c(""Low"", ""Med"", ""Hi""), ordered = TRUE),
      x = c(""A"", ""D"", ""A"", ""C""), y = c(8, 3, 9, 9),
      z = c(1, 1, 1, 2))
dd
    b x y z
1  Hi A 8 1
2 Med D 3 1
3  Hi A 9 1
4 Low C 9 2
</code></pre>
"
1297698,37751,2009-08-19T03:35:02Z,2,Plotting Regression results from lme4 in R using Lattice (or something else),"<p>I have fit a regression using lme4 thanks to a <a href=""https://stackoverflow.com/questions/1169539/linear-regression-and-group-by-in-r"">previous answer</a>. Now that I have a regression fit for each state I'd like to use lattice to plot QQ plots for each state. I would also like to plot error plots for each state in a lattice format. How do I make a lattice plot using the results of a lme4 regression? </p>

<p>Below is a simple sample (yeah, I like a good alliteration) using two states. I would like to make a two panel lattice made from the object fits. </p>

<pre><code>library(lme4)
d &lt;- data.frame(state=rep(c('NY', 'CA'), c(10, 10)), year=rep(1:10, 2), response=c(rnorm(10), rnorm(10)))
fits &lt;- lmList(response ~ year | state, data=d)
</code></pre>
","Plotting Regression results from lme4 in R using Lattice (or something else) <p>I have fit a regression using lme4 thanks to a <a href=""https://stackoverflow.com/questions/1169539/linear-regression-and-group-by-in-r"">previous answer</a>. Now that I have a regression fit for each state I'd like to use lattice to plot QQ plots for each state. I would also like to plot error plots for each state in a lattice format. How do I make a lattice plot using the results of a lme4 regression? </p>

<p>Below is a simple sample (yeah, I like a good alliteration) using two states. I would like to make a two panel lattice made from the object fits. </p>

<pre><code>library(lme4)
d &lt;- data.frame(state=rep(c('NY', 'CA'), c(10, 10)), year=rep(1:10, 2), response=c(rnorm(10), rnorm(10)))
fits &lt;- lmList(response ~ year | state, data=d)
</code></pre>
"
1299871,23929,2009-08-19T13:18:11Z,771,"How to join (merge) data frames (inner, outer, left, right)?","<p>Given two data frames:</p>

<pre><code>df1 = data.frame(CustomerId = c(1:6), Product = c(rep(""Toaster"", 3), rep(""Radio"", 3)))
df2 = data.frame(CustomerId = c(2, 4, 6), State = c(rep(""Alabama"", 2), rep(""Ohio"", 1)))

df1
#  CustomerId Product
#           1 Toaster
#           2 Toaster
#           3 Toaster
#           4   Radio
#           5   Radio
#           6   Radio

df2
#  CustomerId   State
#           2 Alabama
#           4 Alabama
#           6    Ohio
</code></pre>

<p>How can I do database style, i.e., <a href=""http://en.wikipedia.org/wiki/Join_%28SQL%29"" rel=""noreferrer"">sql style, joins</a>? That is, how do I get:</p>

<ul>
<li>An <a href=""http://en.wikipedia.org/wiki/Join_%28SQL%29#Inner_join"" rel=""noreferrer"">inner join</a> of <code>df1</code> and <code>df2</code>:<br>
Return only the rows in which the left table have matching keys in the right table.</li>
<li>An <a href=""http://en.wikipedia.org/wiki/Join_%28SQL%29#Outer_join"" rel=""noreferrer"">outer join</a> of <code>df1</code> and <code>df2</code>:<br>
Returns all rows from both tables, join records from the left which have matching keys in the right table.</li>
<li>A <a href=""http://en.wikipedia.org/wiki/Join_%28SQL%29#Left_outer_join"" rel=""noreferrer"">left outer join (or simply left join)</a> of <code>df1</code> and <code>df2</code><br>
Return all rows from the left table, and any rows with matching keys from the right table.</li>
<li>A <a href=""http://en.wikipedia.org/wiki/Join_%28SQL%29#Right_outer_join"" rel=""noreferrer"">right outer join</a> of <code>df1</code> and <code>df2</code><br>
Return all rows from the right table, and any rows with matching keys from the left table.</li>
</ul>

<p>Extra credit:</p>

<p>How can I do a SQL style select statement?</p>
","How to join (merge) data frames (inner, outer, left, right)? <p>Given two data frames:</p>

<pre><code>df1 = data.frame(CustomerId = c(1:6), Product = c(rep(""Toaster"", 3), rep(""Radio"", 3)))
df2 = data.frame(CustomerId = c(2, 4, 6), State = c(rep(""Alabama"", 2), rep(""Ohio"", 1)))

df1
#  CustomerId Product
#           1 Toaster
#           2 Toaster
#           3 Toaster
#           4   Radio
#           5   Radio
#           6   Radio

df2
#  CustomerId   State
#           2 Alabama
#           4 Alabama
#           6    Ohio
</code></pre>

<p>How can I do database style, i.e., <a href=""http://en.wikipedia.org/wiki/Join_%28SQL%29"" rel=""noreferrer"">sql style, joins</a>? That is, how do I get:</p>

<ul>
<li>An <a href=""http://en.wikipedia.org/wiki/Join_%28SQL%29#Inner_join"" rel=""noreferrer"">inner join</a> of <code>df1</code> and <code>df2</code>:<br>
Return only the rows in which the left table have matching keys in the right table.</li>
<li>An <a href=""http://en.wikipedia.org/wiki/Join_%28SQL%29#Outer_join"" rel=""noreferrer"">outer join</a> of <code>df1</code> and <code>df2</code>:<br>
Returns all rows from both tables, join records from the left which have matching keys in the right table.</li>
<li>A <a href=""http://en.wikipedia.org/wiki/Join_%28SQL%29#Left_outer_join"" rel=""noreferrer"">left outer join (or simply left join)</a> of <code>df1</code> and <code>df2</code><br>
Return all rows from the left table, and any rows with matching keys from the right table.</li>
<li>A <a href=""http://en.wikipedia.org/wiki/Join_%28SQL%29#Right_outer_join"" rel=""noreferrer"">right outer join</a> of <code>df1</code> and <code>df2</code><br>
Return all rows from the right table, and any rows with matching keys from the left table.</li>
</ul>

<p>Extra credit:</p>

<p>How can I do a SQL style select statement?</p>
"

----------------------------104617940851235207681121--
",
  "isBase64Encoded": true
}